/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppPatchRequest;
import com.konfigthis.client.model.AppPatchRequestData;
import com.konfigthis.client.model.AppPostRequest;
import com.konfigthis.client.model.AppPostRequestData;
import com.konfigthis.client.model.AppPostResponse;
import com.konfigthis.client.model.AppsCreateInstallSecretRequest;
import com.konfigthis.client.model.AppsCreateInstallSecretRequestData;
import com.konfigthis.client.model.AppsCreateInstallSecretResponse;
import com.konfigthis.client.model.AppsGetActiveSessionsResponse;
import com.konfigthis.client.model.AppsGetByAppIdResponse;
import com.konfigthis.client.model.AppsGetByClientIdResponse;
import com.konfigthis.client.model.AppsInstallGroupAppRequest;
import com.konfigthis.client.model.AppsInstallGroupAppRequestData;
import com.konfigthis.client.model.AppsInstallGroupAppRequestRelationships;
import com.konfigthis.client.model.AppsInstallGroupAppResponse;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequest;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequestData;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequestRelationships;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgResponse;
import com.konfigthis.client.model.AppsListAppBotsResponse;
import com.konfigthis.client.model.AppsListAppsResponse;
import com.konfigthis.client.model.AppsListGroupAppInstallsResponse;
import com.konfigthis.client.model.AppsListOrgAppsResponse;
import com.konfigthis.client.model.AppsListOrgCreationsResponse;
import com.konfigthis.client.model.AppsListOrgInstallsResponse;
import com.konfigthis.client.model.AppsListUserInstalledAppsResponse;
import com.konfigthis.client.model.AppsManageClientSecretForSnykApp200Response;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppRequest;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppRequest1;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppResponse;
import com.konfigthis.client.model.AppsManageClientSecretsRequest;
import com.konfigthis.client.model.AppsManageClientSecretsResponse;
import com.konfigthis.client.model.AppsUpdateAttributesResponse;
import com.konfigthis.client.model.AppsUpdateCreationAttributesByIdResponse;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byInstallIdCall(String version, UUID orgId, UUID installId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/installs/{install_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byInstallIdValidateBeforeCall(String version, UUID orgId, UUID installId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling byInstallId(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling byInstallId(Async)");
        }

        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling byInstallId(Async)");
        }

        return byInstallIdCall(version, orgId, installId, _callback);

    }


    private ApiResponse<Void> byInstallIdWithHttpInfo(String version, UUID orgId, UUID installId) throws ApiException {
        okhttp3.Call localVarCall = byInstallIdValidateBeforeCall(version, orgId, installId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call byInstallIdAsync(String version, UUID orgId, UUID installId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = byInstallIdValidateBeforeCall(version, orgId, installId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ByInstallIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID installId;

        private ByInstallIdRequestBuilder(String version, UUID orgId, UUID installId) {
            this.version = version;
            this.orgId = orgId;
            this.installId = installId;
        }

        /**
         * Build call for byInstallId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byInstallIdCall(version, orgId, installId, _callback);
        }


        /**
         * Execute byInstallId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            byInstallIdWithHttpInfo(version, orgId, installId);
        }

        /**
         * Execute byInstallId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return byInstallIdWithHttpInfo(version, orgId, installId);
        }

        /**
         * Execute byInstallId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return byInstallIdAsync(version, orgId, installId, _callback);
        }
    }

    /**
     * Revoke app authorization for an Snyk Organization with install ID.
     * Revoke app authorization for an Snyk Organization with install ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param installId Install ID (required)
     * @return ByInstallIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ByInstallIdRequestBuilder byInstallId(String version, UUID orgId, UUID installId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (installId == null) throw new IllegalArgumentException("\"installId\" is required but got null");
            

        return new ByInstallIdRequestBuilder(version, orgId, installId);
    }
    private okhttp3.Call createInstallSecretCall(String version, UUID groupId, UUID installId, AppsCreateInstallSecretRequest appsCreateInstallSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsCreateInstallSecretRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/apps/installs/{install_id}/secrets"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstallSecretValidateBeforeCall(String version, UUID groupId, UUID installId, AppsCreateInstallSecretRequest appsCreateInstallSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createInstallSecret(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createInstallSecret(Async)");
        }

        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling createInstallSecret(Async)");
        }

        return createInstallSecretCall(version, groupId, installId, appsCreateInstallSecretRequest, _callback);

    }


    private ApiResponse<AppsCreateInstallSecretResponse> createInstallSecretWithHttpInfo(String version, UUID groupId, UUID installId, AppsCreateInstallSecretRequest appsCreateInstallSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = createInstallSecretValidateBeforeCall(version, groupId, installId, appsCreateInstallSecretRequest, null);
        Type localVarReturnType = new TypeToken<AppsCreateInstallSecretResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInstallSecretAsync(String version, UUID groupId, UUID installId, AppsCreateInstallSecretRequest appsCreateInstallSecretRequest, final ApiCallback<AppsCreateInstallSecretResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstallSecretValidateBeforeCall(version, groupId, installId, appsCreateInstallSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsCreateInstallSecretResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInstallSecretRequestBuilder {
        private final AppsCreateInstallSecretRequestData data;
        private final String version;
        private final UUID groupId;
        private final UUID installId;

        private CreateInstallSecretRequestBuilder(AppsCreateInstallSecretRequestData data, String version, UUID groupId, UUID installId) {
            this.data = data;
            this.version = version;
            this.groupId = groupId;
            this.installId = installId;
        }

        /**
         * Build call for createInstallSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsCreateInstallSecretRequest appsCreateInstallSecretRequest = buildBodyParams();
            return createInstallSecretCall(version, groupId, installId, appsCreateInstallSecretRequest, _callback);
        }

        private AppsCreateInstallSecretRequest buildBodyParams() {
            AppsCreateInstallSecretRequest appsCreateInstallSecretRequest = new AppsCreateInstallSecretRequest();
            appsCreateInstallSecretRequest.data(this.data);
            return appsCreateInstallSecretRequest;
        }

        /**
         * Execute createInstallSecret request
         * @return AppsCreateInstallSecretResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsCreateInstallSecretResponse execute() throws ApiException {
            AppsCreateInstallSecretRequest appsCreateInstallSecretRequest = buildBodyParams();
            ApiResponse<AppsCreateInstallSecretResponse> localVarResp = createInstallSecretWithHttpInfo(version, groupId, installId, appsCreateInstallSecretRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInstallSecret request with HTTP info returned
         * @return ApiResponse&lt;AppsCreateInstallSecretResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsCreateInstallSecretResponse> executeWithHttpInfo() throws ApiException {
            AppsCreateInstallSecretRequest appsCreateInstallSecretRequest = buildBodyParams();
            return createInstallSecretWithHttpInfo(version, groupId, installId, appsCreateInstallSecretRequest);
        }

        /**
         * Execute createInstallSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsCreateInstallSecretResponse> _callback) throws ApiException {
            AppsCreateInstallSecretRequest appsCreateInstallSecretRequest = buildBodyParams();
            return createInstallSecretAsync(version, groupId, installId, appsCreateInstallSecretRequest, _callback);
        }
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     * Manage client secret for non-interactive Snyk App installations.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Group ID (required)
     * @param installId Install ID (required)
     * @return CreateInstallSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateInstallSecretRequestBuilder createInstallSecret(AppsCreateInstallSecretRequestData data, String version, UUID groupId, UUID installId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (installId == null) throw new IllegalArgumentException("\"installId\" is required but got null");
            

        return new CreateInstallSecretRequestBuilder(data, version, groupId, installId);
    }
    private okhttp3.Call createNewAppForOrganizationCall(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPostRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAppForOrganizationValidateBeforeCall(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createNewAppForOrganization(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewAppForOrganization(Async)");
        }

        return createNewAppForOrganizationCall(version, orgId, appPostRequest, _callback);

    }


    private ApiResponse<AppPostResponse> createNewAppForOrganizationWithHttpInfo(String version, UUID orgId, AppPostRequest appPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAppForOrganizationValidateBeforeCall(version, orgId, appPostRequest, null);
        Type localVarReturnType = new TypeToken<AppPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAppForOrganizationAsync(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback<AppPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAppForOrganizationValidateBeforeCall(version, orgId, appPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AppPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAppForOrganizationRequestBuilder {
        private final AppPostRequestData data;
        private final String version;
        private final UUID orgId;

        private CreateNewAppForOrganizationRequestBuilder(AppPostRequestData data, String version, UUID orgId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for createNewAppForOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createNewAppForOrganizationCall(version, orgId, appPostRequest, _callback);
        }

        private AppPostRequest buildBodyParams() {
            AppPostRequest appPostRequest = new AppPostRequest();
            appPostRequest.data(this.data);
            return appPostRequest;
        }

        /**
         * Execute createNewAppForOrganization request
         * @return AppPostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppPostResponse execute() throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            ApiResponse<AppPostResponse> localVarResp = createNewAppForOrganizationWithHttpInfo(version, orgId, appPostRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAppForOrganization request with HTTP info returned
         * @return ApiResponse&lt;AppPostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppPostResponse> executeWithHttpInfo() throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createNewAppForOrganizationWithHttpInfo(version, orgId, appPostRequest);
        }

        /**
         * Execute createNewAppForOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppPostResponse> _callback) throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createNewAppForOrganizationAsync(version, orgId, appPostRequest, _callback);
        }
    }

    /**
     * Create a new Snyk App for an organization.
     * Create a new Snyk App for an organization.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return CreateNewAppForOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Snyk App successfully. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateNewAppForOrganizationRequestBuilder createNewAppForOrganization(AppPostRequestData data, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewAppForOrganizationRequestBuilder(data, version, orgId);
    }
    private okhttp3.Call createOrganizationAppCall(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPostRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationAppValidateBeforeCall(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createOrganizationApp(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createOrganizationApp(Async)");
        }

        return createOrganizationAppCall(version, orgId, appPostRequest, _callback);

    }


    private ApiResponse<AppPostResponse> createOrganizationAppWithHttpInfo(String version, UUID orgId, AppPostRequest appPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationAppValidateBeforeCall(version, orgId, appPostRequest, null);
        Type localVarReturnType = new TypeToken<AppPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrganizationAppAsync(String version, UUID orgId, AppPostRequest appPostRequest, final ApiCallback<AppPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationAppValidateBeforeCall(version, orgId, appPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AppPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrganizationAppRequestBuilder {
        private final AppPostRequestData data;
        private final String version;
        private final UUID orgId;

        private CreateOrganizationAppRequestBuilder(AppPostRequestData data, String version, UUID orgId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for createOrganizationApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createOrganizationAppCall(version, orgId, appPostRequest, _callback);
        }

        private AppPostRequest buildBodyParams() {
            AppPostRequest appPostRequest = new AppPostRequest();
            appPostRequest.data(this.data);
            return appPostRequest;
        }

        /**
         * Execute createOrganizationApp request
         * @return AppPostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppPostResponse execute() throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            ApiResponse<AppPostResponse> localVarResp = createOrganizationAppWithHttpInfo(version, orgId, appPostRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrganizationApp request with HTTP info returned
         * @return ApiResponse&lt;AppPostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppPostResponse> executeWithHttpInfo() throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createOrganizationAppWithHttpInfo(version, orgId, appPostRequest);
        }

        /**
         * Execute createOrganizationApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created Snyk App successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppPostResponse> _callback) throws ApiException {
            AppPostRequest appPostRequest = buildBodyParams();
            return createOrganizationAppAsync(version, orgId, appPostRequest, _callback);
        }
    }

    /**
     * Create a new app for an organization.
     * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return CreateOrganizationAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Snyk App successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateOrganizationAppRequestBuilder createOrganizationApp(AppPostRequestData data, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateOrganizationAppRequestBuilder(data, version, orgId);
    }
    private okhttp3.Call deleteAppByIdCall(String version, UUID orgId, UUID clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/{client_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppByIdValidateBeforeCall(String version, UUID orgId, UUID clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteAppById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteAppById(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteAppById(Async)");
        }

        return deleteAppByIdCall(version, orgId, clientId, _callback);

    }


    private ApiResponse<Void> deleteAppByIdWithHttpInfo(String version, UUID orgId, UUID clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteAppByIdValidateBeforeCall(version, orgId, clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAppByIdAsync(String version, UUID orgId, UUID clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppByIdValidateBeforeCall(version, orgId, clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAppByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID clientId;

        private DeleteAppByIdRequestBuilder(String version, UUID orgId, UUID clientId) {
            this.version = version;
            this.orgId = orgId;
            this.clientId = clientId;
        }

        /**
         * Build call for deleteAppById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAppByIdCall(version, orgId, clientId, _callback);
        }


        /**
         * Execute deleteAppById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            deleteAppByIdWithHttpInfo(version, orgId, clientId);
        }

        /**
         * Execute deleteAppById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAppByIdWithHttpInfo(version, orgId, clientId);
        }

        /**
         * Execute deleteAppById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAppByIdAsync(version, orgId, clientId, _callback);
        }
    }

    /**
     * Delete an app
     * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param clientId Client ID (required)
     * @return DeleteAppByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeleteAppByIdRequestBuilder deleteAppById(String version, UUID orgId, UUID clientId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new DeleteAppByIdRequestBuilder(version, orgId, clientId);
    }
    private okhttp3.Call deleteByAppIdCall(UUID orgId, UUID appId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations/{app_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByAppIdValidateBeforeCall(UUID orgId, UUID appId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteByAppId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteByAppId(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteByAppId(Async)");
        }

        return deleteByAppIdCall(orgId, appId, version, _callback);

    }


    private ApiResponse<Void> deleteByAppIdWithHttpInfo(UUID orgId, UUID appId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteByAppIdValidateBeforeCall(orgId, appId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByAppIdAsync(UUID orgId, UUID appId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByAppIdValidateBeforeCall(orgId, appId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByAppIdRequestBuilder {
        private final UUID orgId;
        private final UUID appId;
        private final String version;

        private DeleteByAppIdRequestBuilder(UUID orgId, UUID appId, String version) {
            this.orgId = orgId;
            this.appId = appId;
            this.version = version;
        }

        /**
         * Build call for deleteByAppId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByAppIdCall(orgId, appId, version, _callback);
        }


        /**
         * Execute deleteByAppId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByAppIdWithHttpInfo(orgId, appId, version);
        }

        /**
         * Execute deleteByAppId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByAppIdWithHttpInfo(orgId, appId, version);
        }

        /**
         * Execute deleteByAppId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByAppIdAsync(orgId, appId, version, _callback);
        }
    }

    /**
     * Delete an app by its App ID.
     * Delete an app by its App ID.
     * @param orgId Org ID (required)
     * @param appId App ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return DeleteByAppIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app has been deleted </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public DeleteByAppIdRequestBuilder deleteByAppId(UUID orgId, UUID appId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new DeleteByAppIdRequestBuilder(orgId, appId, version);
    }
    private okhttp3.Call getActiveSessionsCall(String version, UUID appId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps/{app_id}/sessions"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveSessionsValidateBeforeCall(String version, UUID appId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getActiveSessions(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getActiveSessions(Async)");
        }

        return getActiveSessionsCall(version, appId, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsGetActiveSessionsResponse> getActiveSessionsWithHttpInfo(String version, UUID appId, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getActiveSessionsValidateBeforeCall(version, appId, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsGetActiveSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActiveSessionsAsync(String version, UUID appId, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsGetActiveSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveSessionsValidateBeforeCall(version, appId, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsGetActiveSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActiveSessionsRequestBuilder {
        private final String version;
        private final UUID appId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private GetActiveSessionsRequestBuilder(String version, UUID appId) {
            this.version = version;
            this.appId = appId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return GetActiveSessionsRequestBuilder
         */
        public GetActiveSessionsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return GetActiveSessionsRequestBuilder
         */
        public GetActiveSessionsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return GetActiveSessionsRequestBuilder
         */
        public GetActiveSessionsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getActiveSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of active OAuth sessions for the app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActiveSessionsCall(version, appId, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute getActiveSessions request
         * @return AppsGetActiveSessionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of active OAuth sessions for the app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsGetActiveSessionsResponse execute() throws ApiException {
            ApiResponse<AppsGetActiveSessionsResponse> localVarResp = getActiveSessionsWithHttpInfo(version, appId, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActiveSessions request with HTTP info returned
         * @return ApiResponse&lt;AppsGetActiveSessionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of active OAuth sessions for the app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsGetActiveSessionsResponse> executeWithHttpInfo() throws ApiException {
            return getActiveSessionsWithHttpInfo(version, appId, startingAfter, endingBefore, limit);
        }

        /**
         * Execute getActiveSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of active OAuth sessions for the app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsGetActiveSessionsResponse> _callback) throws ApiException {
            return getActiveSessionsAsync(version, appId, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of active OAuth sessions for the app.
     * Get a list of active OAuth sessions for the app.
     * @param version The requested version of the endpoint to process the request (required)
     * @param appId App ID (required)
     * @return GetActiveSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of active OAuth sessions for the app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetActiveSessionsRequestBuilder getActiveSessions(String version, UUID appId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetActiveSessionsRequestBuilder(version, appId);
    }
    private okhttp3.Call getByAppIdCall(UUID orgId, UUID appId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations/{app_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByAppIdValidateBeforeCall(UUID orgId, UUID appId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByAppId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getByAppId(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getByAppId(Async)");
        }

        return getByAppIdCall(orgId, appId, version, _callback);

    }


    private ApiResponse<AppsGetByAppIdResponse> getByAppIdWithHttpInfo(UUID orgId, UUID appId, String version) throws ApiException {
        okhttp3.Call localVarCall = getByAppIdValidateBeforeCall(orgId, appId, version, null);
        Type localVarReturnType = new TypeToken<AppsGetByAppIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByAppIdAsync(UUID orgId, UUID appId, String version, final ApiCallback<AppsGetByAppIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByAppIdValidateBeforeCall(orgId, appId, version, _callback);
        Type localVarReturnType = new TypeToken<AppsGetByAppIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByAppIdRequestBuilder {
        private final UUID orgId;
        private final UUID appId;
        private final String version;

        private GetByAppIdRequestBuilder(UUID orgId, UUID appId, String version) {
            this.orgId = orgId;
            this.appId = appId;
            this.version = version;
        }

        /**
         * Build call for getByAppId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByAppIdCall(orgId, appId, version, _callback);
        }


        /**
         * Execute getByAppId request
         * @return AppsGetByAppIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsGetByAppIdResponse execute() throws ApiException {
            ApiResponse<AppsGetByAppIdResponse> localVarResp = getByAppIdWithHttpInfo(orgId, appId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByAppId request with HTTP info returned
         * @return ApiResponse&lt;AppsGetByAppIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsGetByAppIdResponse> executeWithHttpInfo() throws ApiException {
            return getByAppIdWithHttpInfo(orgId, appId, version);
        }

        /**
         * Execute getByAppId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsGetByAppIdResponse> _callback) throws ApiException {
            return getByAppIdAsync(orgId, appId, version, _callback);
        }
    }

    /**
     * Get a Snyk App by its App ID.
     * Get a Snyk App by its App ID.
     * @param orgId Org ID (required)
     * @param appId App ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return GetByAppIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByAppIdRequestBuilder getByAppId(UUID orgId, UUID appId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new GetByAppIdRequestBuilder(orgId, appId, version);
    }
    private okhttp3.Call getByClientIdCall(UUID orgId, UUID clientId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/{client_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByClientIdValidateBeforeCall(UUID orgId, UUID clientId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByClientId(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getByClientId(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getByClientId(Async)");
        }

        return getByClientIdCall(orgId, clientId, version, _callback);

    }


    private ApiResponse<AppsGetByClientIdResponse> getByClientIdWithHttpInfo(UUID orgId, UUID clientId, String version) throws ApiException {
        okhttp3.Call localVarCall = getByClientIdValidateBeforeCall(orgId, clientId, version, null);
        Type localVarReturnType = new TypeToken<AppsGetByClientIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByClientIdAsync(UUID orgId, UUID clientId, String version, final ApiCallback<AppsGetByClientIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByClientIdValidateBeforeCall(orgId, clientId, version, _callback);
        Type localVarReturnType = new TypeToken<AppsGetByClientIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByClientIdRequestBuilder {
        private final UUID orgId;
        private final UUID clientId;
        private final String version;

        private GetByClientIdRequestBuilder(UUID orgId, UUID clientId, String version) {
            this.orgId = orgId;
            this.clientId = clientId;
            this.version = version;
        }

        /**
         * Build call for getByClientId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByClientIdCall(orgId, clientId, version, _callback);
        }


        /**
         * Execute getByClientId request
         * @return AppsGetByClientIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppsGetByClientIdResponse execute() throws ApiException {
            ApiResponse<AppsGetByClientIdResponse> localVarResp = getByClientIdWithHttpInfo(orgId, clientId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByClientId request with HTTP info returned
         * @return ApiResponse&lt;AppsGetByClientIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppsGetByClientIdResponse> executeWithHttpInfo() throws ApiException {
            return getByClientIdWithHttpInfo(orgId, clientId, version);
        }

        /**
         * Execute getByClientId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppsGetByClientIdResponse> _callback) throws ApiException {
            return getByClientIdAsync(orgId, clientId, version, _callback);
        }
    }

    /**
     * Get an app by client id
     * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @param orgId Org ID (required)
     * @param clientId Client ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return GetByClientIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested app </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetByClientIdRequestBuilder getByClientId(UUID orgId, UUID clientId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new GetByClientIdRequestBuilder(orgId, clientId, version);
    }
    private okhttp3.Call installGroupAppCall(String version, UUID groupId, AppsInstallGroupAppRequest appsInstallGroupAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsInstallGroupAppRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/apps/installs"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installGroupAppValidateBeforeCall(String version, UUID groupId, AppsInstallGroupAppRequest appsInstallGroupAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling installGroupApp(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling installGroupApp(Async)");
        }

        return installGroupAppCall(version, groupId, appsInstallGroupAppRequest, _callback);

    }


    private ApiResponse<AppsInstallGroupAppResponse> installGroupAppWithHttpInfo(String version, UUID groupId, AppsInstallGroupAppRequest appsInstallGroupAppRequest) throws ApiException {
        okhttp3.Call localVarCall = installGroupAppValidateBeforeCall(version, groupId, appsInstallGroupAppRequest, null);
        Type localVarReturnType = new TypeToken<AppsInstallGroupAppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call installGroupAppAsync(String version, UUID groupId, AppsInstallGroupAppRequest appsInstallGroupAppRequest, final ApiCallback<AppsInstallGroupAppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = installGroupAppValidateBeforeCall(version, groupId, appsInstallGroupAppRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsInstallGroupAppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InstallGroupAppRequestBuilder {
        private final AppsInstallGroupAppRequestData data;
        private final AppsInstallGroupAppRequestRelationships relationships;
        private final String version;
        private final UUID groupId;

        private InstallGroupAppRequestBuilder(AppsInstallGroupAppRequestData data, AppsInstallGroupAppRequestRelationships relationships, String version, UUID groupId) {
            this.data = data;
            this.relationships = relationships;
            this.version = version;
            this.groupId = groupId;
        }

        /**
         * Build call for installGroupApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsInstallGroupAppRequest appsInstallGroupAppRequest = buildBodyParams();
            return installGroupAppCall(version, groupId, appsInstallGroupAppRequest, _callback);
        }

        private AppsInstallGroupAppRequest buildBodyParams() {
            AppsInstallGroupAppRequest appsInstallGroupAppRequest = new AppsInstallGroupAppRequest();
            appsInstallGroupAppRequest.data(this.data);
            appsInstallGroupAppRequest.relationships(this.relationships);
            return appsInstallGroupAppRequest;
        }

        /**
         * Execute installGroupApp request
         * @return AppsInstallGroupAppResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsInstallGroupAppResponse execute() throws ApiException {
            AppsInstallGroupAppRequest appsInstallGroupAppRequest = buildBodyParams();
            ApiResponse<AppsInstallGroupAppResponse> localVarResp = installGroupAppWithHttpInfo(version, groupId, appsInstallGroupAppRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute installGroupApp request with HTTP info returned
         * @return ApiResponse&lt;AppsInstallGroupAppResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsInstallGroupAppResponse> executeWithHttpInfo() throws ApiException {
            AppsInstallGroupAppRequest appsInstallGroupAppRequest = buildBodyParams();
            return installGroupAppWithHttpInfo(version, groupId, appsInstallGroupAppRequest);
        }

        /**
         * Execute installGroupApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsInstallGroupAppResponse> _callback) throws ApiException {
            AppsInstallGroupAppRequest appsInstallGroupAppRequest = buildBodyParams();
            return installGroupAppAsync(version, groupId, appsInstallGroupAppRequest, _callback);
        }
    }

    /**
     * Install a Snyk Apps to this group.
     * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Group ID (required)
     * @return InstallGroupAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public InstallGroupAppRequestBuilder installGroupApp(AppsInstallGroupAppRequestData data, AppsInstallGroupAppRequestRelationships relationships, String version, UUID groupId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (relationships == null) throw new IllegalArgumentException("\"relationships\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new InstallGroupAppRequestBuilder(data, relationships, version, groupId);
    }
    private okhttp3.Call installSnykAppToOrgCall(String version, UUID orgId, AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsInstallSnykAppToOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/installs"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installSnykAppToOrgValidateBeforeCall(String version, UUID orgId, AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling installSnykAppToOrg(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling installSnykAppToOrg(Async)");
        }

        return installSnykAppToOrgCall(version, orgId, appsInstallSnykAppToOrgRequest, _callback);

    }


    private ApiResponse<AppsInstallSnykAppToOrgResponse> installSnykAppToOrgWithHttpInfo(String version, UUID orgId, AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = installSnykAppToOrgValidateBeforeCall(version, orgId, appsInstallSnykAppToOrgRequest, null);
        Type localVarReturnType = new TypeToken<AppsInstallSnykAppToOrgResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call installSnykAppToOrgAsync(String version, UUID orgId, AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest, final ApiCallback<AppsInstallSnykAppToOrgResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = installSnykAppToOrgValidateBeforeCall(version, orgId, appsInstallSnykAppToOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsInstallSnykAppToOrgResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InstallSnykAppToOrgRequestBuilder {
        private final AppsInstallSnykAppToOrgRequestData data;
        private final AppsInstallSnykAppToOrgRequestRelationships relationships;
        private final String version;
        private final UUID orgId;

        private InstallSnykAppToOrgRequestBuilder(AppsInstallSnykAppToOrgRequestData data, AppsInstallSnykAppToOrgRequestRelationships relationships, String version, UUID orgId) {
            this.data = data;
            this.relationships = relationships;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for installSnykAppToOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest = buildBodyParams();
            return installSnykAppToOrgCall(version, orgId, appsInstallSnykAppToOrgRequest, _callback);
        }

        private AppsInstallSnykAppToOrgRequest buildBodyParams() {
            AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest = new AppsInstallSnykAppToOrgRequest();
            appsInstallSnykAppToOrgRequest.data(this.data);
            appsInstallSnykAppToOrgRequest.relationships(this.relationships);
            return appsInstallSnykAppToOrgRequest;
        }

        /**
         * Execute installSnykAppToOrg request
         * @return AppsInstallSnykAppToOrgResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsInstallSnykAppToOrgResponse execute() throws ApiException {
            AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest = buildBodyParams();
            ApiResponse<AppsInstallSnykAppToOrgResponse> localVarResp = installSnykAppToOrgWithHttpInfo(version, orgId, appsInstallSnykAppToOrgRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute installSnykAppToOrg request with HTTP info returned
         * @return ApiResponse&lt;AppsInstallSnykAppToOrgResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsInstallSnykAppToOrgResponse> executeWithHttpInfo() throws ApiException {
            AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest = buildBodyParams();
            return installSnykAppToOrgWithHttpInfo(version, orgId, appsInstallSnykAppToOrgRequest);
        }

        /**
         * Execute installSnykAppToOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsInstallSnykAppToOrgResponse> _callback) throws ApiException {
            AppsInstallSnykAppToOrgRequest appsInstallSnykAppToOrgRequest = buildBodyParams();
            return installSnykAppToOrgAsync(version, orgId, appsInstallSnykAppToOrgRequest, _callback);
        }
    }

    /**
     * Install a Snyk Apps to this organization.
     * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return InstallSnykAppToOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created app install. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public InstallSnykAppToOrgRequestBuilder installSnykAppToOrg(AppsInstallSnykAppToOrgRequestData data, AppsInstallSnykAppToOrgRequestRelationships relationships, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (relationships == null) throw new IllegalArgumentException("\"relationships\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new InstallSnykAppToOrgRequestBuilder(data, relationships, version, orgId);
    }
    private okhttp3.Call listAppBotsCall(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/app_bots"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppBotsValidateBeforeCall(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listAppBots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAppBots(Async)");
        }

        return listAppBotsCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListAppBotsResponse> listAppBotsWithHttpInfo(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAppBotsValidateBeforeCall(orgId, version, expand, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListAppBotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAppBotsAsync(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListAppBotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppBotsValidateBeforeCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListAppBotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAppBotsRequestBuilder {
        private final UUID orgId;
        private final String version;
        private List<String> expand;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListAppBotsRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return ListAppBotsRequestBuilder
         */
        public ListAppBotsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListAppBotsRequestBuilder
         */
        public ListAppBotsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListAppBotsRequestBuilder
         */
        public ListAppBotsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListAppBotsRequestBuilder
         */
        public ListAppBotsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listAppBots
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of app bots authorized to the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAppBotsCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listAppBots request
         * @return AppsListAppBotsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of app bots authorized to the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppsListAppBotsResponse execute() throws ApiException {
            ApiResponse<AppsListAppBotsResponse> localVarResp = listAppBotsWithHttpInfo(orgId, version, expand, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAppBots request with HTTP info returned
         * @return ApiResponse&lt;AppsListAppBotsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of app bots authorized to the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppsListAppBotsResponse> executeWithHttpInfo() throws ApiException {
            return listAppBotsWithHttpInfo(orgId, version, expand, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listAppBots request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of app bots authorized to the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppsListAppBotsResponse> _callback) throws ApiException {
            return listAppBotsAsync(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of app bots authorized to an organization.
     * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
     * @param orgId Org ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListAppBotsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of app bots authorized to the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAppBotsRequestBuilder listAppBots(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListAppBotsRequestBuilder(orgId, version);
    }
    private okhttp3.Call listAppsCall(String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppsValidateBeforeCall(String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listApps(Async)");
        }

        return listAppsCall(version, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListAppsResponse> listAppsWithHttpInfo(String version, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listAppsValidateBeforeCall(version, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListAppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAppsAsync(String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListAppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppsValidateBeforeCall(version, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListAppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAppsRequestBuilder {
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListAppsRequestBuilder(String version) {
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListAppsRequestBuilder
         */
        public ListAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps install that can act on your behalf </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAppsCall(version, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listApps request
         * @return AppsListAppsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps install that can act on your behalf </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsListAppsResponse execute() throws ApiException {
            ApiResponse<AppsListAppsResponse> localVarResp = listAppsWithHttpInfo(version, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listApps request with HTTP info returned
         * @return ApiResponse&lt;AppsListAppsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps install that can act on your behalf </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsListAppsResponse> executeWithHttpInfo() throws ApiException {
            return listAppsWithHttpInfo(version, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps install that can act on your behalf </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListAppsResponse> _callback) throws ApiException {
            return listAppsAsync(version, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps that can act on your behalf.
     * Get a list of apps that can act on your behalf.
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps install that can act on your behalf </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListAppsRequestBuilder listApps(String version) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListAppsRequestBuilder(version);
    }
    private okhttp3.Call listGroupAppInstallsCall(UUID groupId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/apps/installs"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupAppInstallsValidateBeforeCall(UUID groupId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listGroupAppInstalls(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listGroupAppInstalls(Async)");
        }

        return listGroupAppInstallsCall(groupId, version, expand, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListGroupAppInstallsResponse> listGroupAppInstallsWithHttpInfo(UUID groupId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGroupAppInstallsValidateBeforeCall(groupId, version, expand, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListGroupAppInstallsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupAppInstallsAsync(UUID groupId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListGroupAppInstallsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupAppInstallsValidateBeforeCall(groupId, version, expand, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListGroupAppInstallsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupAppInstallsRequestBuilder {
        private final UUID groupId;
        private final String version;
        private List<String> expand;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListGroupAppInstallsRequestBuilder(UUID groupId, String version) {
            this.groupId = groupId;
            this.version = version;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return ListGroupAppInstallsRequestBuilder
         */
        public ListGroupAppInstallsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListGroupAppInstallsRequestBuilder
         */
        public ListGroupAppInstallsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListGroupAppInstallsRequestBuilder
         */
        public ListGroupAppInstallsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListGroupAppInstallsRequestBuilder
         */
        public ListGroupAppInstallsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGroupAppInstalls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupAppInstallsCall(groupId, version, expand, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listGroupAppInstalls request
         * @return AppsListGroupAppInstallsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsListGroupAppInstallsResponse execute() throws ApiException {
            ApiResponse<AppsListGroupAppInstallsResponse> localVarResp = listGroupAppInstallsWithHttpInfo(groupId, version, expand, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroupAppInstalls request with HTTP info returned
         * @return ApiResponse&lt;AppsListGroupAppInstallsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsListGroupAppInstallsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupAppInstallsWithHttpInfo(groupId, version, expand, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listGroupAppInstalls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListGroupAppInstallsResponse> _callback) throws ApiException {
            return listGroupAppInstallsAsync(groupId, version, expand, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps installed for a group.
     * Get a list of apps installed for a group.
     * @param groupId Group ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListGroupAppInstallsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps installed for the specified group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListGroupAppInstallsRequestBuilder listGroupAppInstalls(UUID groupId, String version) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListGroupAppInstallsRequestBuilder(groupId, version);
    }
    private okhttp3.Call listOrgAppsCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrgAppsValidateBeforeCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOrgApps(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listOrgApps(Async)");
        }

        return listOrgAppsCall(orgId, version, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListOrgAppsResponse> listOrgAppsWithHttpInfo(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrgAppsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListOrgAppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOrgAppsAsync(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListOrgAppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrgAppsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListOrgAppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOrgAppsRequestBuilder {
        private final UUID orgId;
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListOrgAppsRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListOrgAppsRequestBuilder
         */
        public ListOrgAppsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListOrgAppsRequestBuilder
         */
        public ListOrgAppsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListOrgAppsRequestBuilder
         */
        public ListOrgAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listOrgApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrgAppsCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listOrgApps request
         * @return AppsListOrgAppsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppsListOrgAppsResponse execute() throws ApiException {
            ApiResponse<AppsListOrgAppsResponse> localVarResp = listOrgAppsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOrgApps request with HTTP info returned
         * @return ApiResponse&lt;AppsListOrgAppsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppsListOrgAppsResponse> executeWithHttpInfo() throws ApiException {
            return listOrgAppsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listOrgApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppsListOrgAppsResponse> _callback) throws ApiException {
            return listOrgAppsAsync(orgId, version, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps created by an organization.
     * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     * @param orgId Org ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListOrgAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListOrgAppsRequestBuilder listOrgApps(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListOrgAppsRequestBuilder(orgId, version);
    }
    private okhttp3.Call listOrgCreationsCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrgCreationsValidateBeforeCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOrgCreations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listOrgCreations(Async)");
        }

        return listOrgCreationsCall(orgId, version, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListOrgCreationsResponse> listOrgCreationsWithHttpInfo(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrgCreationsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListOrgCreationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOrgCreationsAsync(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListOrgCreationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrgCreationsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListOrgCreationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOrgCreationsRequestBuilder {
        private final UUID orgId;
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListOrgCreationsRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListOrgCreationsRequestBuilder
         */
        public ListOrgCreationsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListOrgCreationsRequestBuilder
         */
        public ListOrgCreationsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListOrgCreationsRequestBuilder
         */
        public ListOrgCreationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listOrgCreations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrgCreationsCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listOrgCreations request
         * @return AppsListOrgCreationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsListOrgCreationsResponse execute() throws ApiException {
            ApiResponse<AppsListOrgCreationsResponse> localVarResp = listOrgCreationsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOrgCreations request with HTTP info returned
         * @return ApiResponse&lt;AppsListOrgCreationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsListOrgCreationsResponse> executeWithHttpInfo() throws ApiException {
            return listOrgCreationsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listOrgCreations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListOrgCreationsResponse> _callback) throws ApiException {
            return listOrgCreationsAsync(orgId, version, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps created by an organization.
     * Get a list of apps created by an organization.
     * @param orgId Org ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListOrgCreationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps created by the specified organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListOrgCreationsRequestBuilder listOrgCreations(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListOrgCreationsRequestBuilder(orgId, version);
    }
    private okhttp3.Call listOrgInstallsCall(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/installs"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrgInstallsValidateBeforeCall(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOrgInstalls(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listOrgInstalls(Async)");
        }

        return listOrgInstallsCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListOrgInstallsResponse> listOrgInstallsWithHttpInfo(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrgInstallsValidateBeforeCall(orgId, version, expand, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListOrgInstallsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOrgInstallsAsync(UUID orgId, String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListOrgInstallsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrgInstallsValidateBeforeCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListOrgInstallsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOrgInstallsRequestBuilder {
        private final UUID orgId;
        private final String version;
        private List<String> expand;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListOrgInstallsRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return ListOrgInstallsRequestBuilder
         */
        public ListOrgInstallsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListOrgInstallsRequestBuilder
         */
        public ListOrgInstallsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListOrgInstallsRequestBuilder
         */
        public ListOrgInstallsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListOrgInstallsRequestBuilder
         */
        public ListOrgInstallsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listOrgInstalls
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrgInstallsCall(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listOrgInstalls request
         * @return AppsListOrgInstallsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsListOrgInstallsResponse execute() throws ApiException {
            ApiResponse<AppsListOrgInstallsResponse> localVarResp = listOrgInstallsWithHttpInfo(orgId, version, expand, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOrgInstalls request with HTTP info returned
         * @return ApiResponse&lt;AppsListOrgInstallsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsListOrgInstallsResponse> executeWithHttpInfo() throws ApiException {
            return listOrgInstallsWithHttpInfo(orgId, version, expand, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listOrgInstalls request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListOrgInstallsResponse> _callback) throws ApiException {
            return listOrgInstallsAsync(orgId, version, expand, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps installed for an organization.
     * Get a list of apps installed for an organization.
     * @param orgId Org ID (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListOrgInstallsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListOrgInstallsRequestBuilder listOrgInstalls(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListOrgInstallsRequestBuilder(orgId, version);
    }
    private okhttp3.Call listUserInstalledAppsCall(String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps/installs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserInstalledAppsValidateBeforeCall(String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listUserInstalledApps(Async)");
        }

        return listUserInstalledAppsCall(version, expand, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<AppsListUserInstalledAppsResponse> listUserInstalledAppsWithHttpInfo(String version, List<String> expand, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listUserInstalledAppsValidateBeforeCall(version, expand, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<AppsListUserInstalledAppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserInstalledAppsAsync(String version, List<String> expand, String startingAfter, String endingBefore, Integer limit, final ApiCallback<AppsListUserInstalledAppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserInstalledAppsValidateBeforeCall(version, expand, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<AppsListUserInstalledAppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserInstalledAppsRequestBuilder {
        private final String version;
        private List<String> expand;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListUserInstalledAppsRequestBuilder(String version) {
            this.version = version;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return ListUserInstalledAppsRequestBuilder
         */
        public ListUserInstalledAppsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListUserInstalledAppsRequestBuilder
         */
        public ListUserInstalledAppsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListUserInstalledAppsRequestBuilder
         */
        public ListUserInstalledAppsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListUserInstalledAppsRequestBuilder
         */
        public ListUserInstalledAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listUserInstalledApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserInstalledAppsCall(version, expand, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listUserInstalledApps request
         * @return AppsListUserInstalledAppsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsListUserInstalledAppsResponse execute() throws ApiException {
            ApiResponse<AppsListUserInstalledAppsResponse> localVarResp = listUserInstalledAppsWithHttpInfo(version, expand, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserInstalledApps request with HTTP info returned
         * @return ApiResponse&lt;AppsListUserInstalledAppsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsListUserInstalledAppsResponse> executeWithHttpInfo() throws ApiException {
            return listUserInstalledAppsWithHttpInfo(version, expand, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listUserInstalledApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsListUserInstalledAppsResponse> _callback) throws ApiException {
            return listUserInstalledAppsAsync(version, expand, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of apps installed for an user.
     * Get a list of apps installed for an user.
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListUserInstalledAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of apps installed for the specified organization. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListUserInstalledAppsRequestBuilder listUserInstalledApps(String version) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListUserInstalledAppsRequestBuilder(version);
    }
    private okhttp3.Call manageClientSecretForSnykAppCall(String version, UUID orgId, UUID appId, AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsManageClientSecretForSnykAppRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations/{app_id}/secrets"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageClientSecretForSnykAppValidateBeforeCall(String version, UUID orgId, UUID appId, AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling manageClientSecretForSnykApp(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling manageClientSecretForSnykApp(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling manageClientSecretForSnykApp(Async)");
        }

        return manageClientSecretForSnykAppCall(version, orgId, appId, appsManageClientSecretForSnykAppRequest, _callback);

    }


    private ApiResponse<AppsManageClientSecretForSnykAppResponse> manageClientSecretForSnykAppWithHttpInfo(String version, UUID orgId, UUID appId, AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest) throws ApiException {
        okhttp3.Call localVarCall = manageClientSecretForSnykAppValidateBeforeCall(version, orgId, appId, appsManageClientSecretForSnykAppRequest, null);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretForSnykAppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageClientSecretForSnykAppAsync(String version, UUID orgId, UUID appId, AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest, final ApiCallback<AppsManageClientSecretForSnykAppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageClientSecretForSnykAppValidateBeforeCall(version, orgId, appId, appsManageClientSecretForSnykAppRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretForSnykAppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageClientSecretForSnykAppRequestBuilder {
        private final AppsCreateInstallSecretRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID appId;

        private ManageClientSecretForSnykAppRequestBuilder(AppsCreateInstallSecretRequestData data, String version, UUID orgId, UUID appId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.appId = appId;
        }

        /**
         * Build call for manageClientSecretForSnykApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest = buildBodyParams();
            return manageClientSecretForSnykAppCall(version, orgId, appId, appsManageClientSecretForSnykAppRequest, _callback);
        }

        private AppsManageClientSecretForSnykAppRequest buildBodyParams() {
            AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest = new AppsManageClientSecretForSnykAppRequest();
            appsManageClientSecretForSnykAppRequest.data(this.data);
            return appsManageClientSecretForSnykAppRequest;
        }

        /**
         * Execute manageClientSecretForSnykApp request
         * @return AppsManageClientSecretForSnykAppResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsManageClientSecretForSnykAppResponse execute() throws ApiException {
            AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest = buildBodyParams();
            ApiResponse<AppsManageClientSecretForSnykAppResponse> localVarResp = manageClientSecretForSnykAppWithHttpInfo(version, orgId, appId, appsManageClientSecretForSnykAppRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageClientSecretForSnykApp request with HTTP info returned
         * @return ApiResponse&lt;AppsManageClientSecretForSnykAppResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsManageClientSecretForSnykAppResponse> executeWithHttpInfo() throws ApiException {
            AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest = buildBodyParams();
            return manageClientSecretForSnykAppWithHttpInfo(version, orgId, appId, appsManageClientSecretForSnykAppRequest);
        }

        /**
         * Execute manageClientSecretForSnykApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsManageClientSecretForSnykAppResponse> _callback) throws ApiException {
            AppsManageClientSecretForSnykAppRequest appsManageClientSecretForSnykAppRequest = buildBodyParams();
            return manageClientSecretForSnykAppAsync(version, orgId, appId, appsManageClientSecretForSnykAppRequest, _callback);
        }
    }

    /**
     * Manage client secret for the Snyk App.
     * Manage client secret for the Snyk App.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param appId App ID (required)
     * @return ManageClientSecretForSnykAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ManageClientSecretForSnykAppRequestBuilder manageClientSecretForSnykApp(AppsCreateInstallSecretRequestData data, String version, UUID orgId, UUID appId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new ManageClientSecretForSnykAppRequestBuilder(data, version, orgId, appId);
    }
    private okhttp3.Call manageClientSecretForSnykApp_0Call(String version, UUID orgId, UUID installId, AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsManageClientSecretForSnykAppRequest1;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/installs/{install_id}/secrets"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageClientSecretForSnykApp_0ValidateBeforeCall(String version, UUID orgId, UUID installId, AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling manageClientSecretForSnykApp_0(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling manageClientSecretForSnykApp_0(Async)");
        }

        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling manageClientSecretForSnykApp_0(Async)");
        }

        return manageClientSecretForSnykApp_0Call(version, orgId, installId, appsManageClientSecretForSnykAppRequest1, _callback);

    }


    private ApiResponse<AppsManageClientSecretForSnykApp200Response> manageClientSecretForSnykApp_0WithHttpInfo(String version, UUID orgId, UUID installId, AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1) throws ApiException {
        okhttp3.Call localVarCall = manageClientSecretForSnykApp_0ValidateBeforeCall(version, orgId, installId, appsManageClientSecretForSnykAppRequest1, null);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretForSnykApp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageClientSecretForSnykApp_0Async(String version, UUID orgId, UUID installId, AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1, final ApiCallback<AppsManageClientSecretForSnykApp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageClientSecretForSnykApp_0ValidateBeforeCall(version, orgId, installId, appsManageClientSecretForSnykAppRequest1, _callback);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretForSnykApp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageClientSecretForSnykApp0RequestBuilder {
        private final AppsCreateInstallSecretRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID installId;

        private ManageClientSecretForSnykApp0RequestBuilder(AppsCreateInstallSecretRequestData data, String version, UUID orgId, UUID installId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.installId = installId;
        }

        /**
         * Build call for manageClientSecretForSnykApp_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1 = buildBodyParams();
            return manageClientSecretForSnykApp_0Call(version, orgId, installId, appsManageClientSecretForSnykAppRequest1, _callback);
        }

        private AppsManageClientSecretForSnykAppRequest1 buildBodyParams() {
            AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1 = new AppsManageClientSecretForSnykAppRequest1();
            appsManageClientSecretForSnykAppRequest1.data(this.data);
            return appsManageClientSecretForSnykAppRequest1;
        }

        /**
         * Execute manageClientSecretForSnykApp_0 request
         * @return AppsManageClientSecretForSnykApp200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsManageClientSecretForSnykApp200Response execute() throws ApiException {
            AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1 = buildBodyParams();
            ApiResponse<AppsManageClientSecretForSnykApp200Response> localVarResp = manageClientSecretForSnykApp_0WithHttpInfo(version, orgId, installId, appsManageClientSecretForSnykAppRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageClientSecretForSnykApp_0 request with HTTP info returned
         * @return ApiResponse&lt;AppsManageClientSecretForSnykApp200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsManageClientSecretForSnykApp200Response> executeWithHttpInfo() throws ApiException {
            AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1 = buildBodyParams();
            return manageClientSecretForSnykApp_0WithHttpInfo(version, orgId, installId, appsManageClientSecretForSnykAppRequest1);
        }

        /**
         * Execute manageClientSecretForSnykApp_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsManageClientSecretForSnykApp200Response> _callback) throws ApiException {
            AppsManageClientSecretForSnykAppRequest1 appsManageClientSecretForSnykAppRequest1 = buildBodyParams();
            return manageClientSecretForSnykApp_0Async(version, orgId, installId, appsManageClientSecretForSnykAppRequest1, _callback);
        }
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     * Manage client secret for non-interactive Snyk App installations.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param installId Install ID (required)
     * @return ManageClientSecretForSnykApp0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ManageClientSecretForSnykApp0RequestBuilder manageClientSecretForSnykApp_0(AppsCreateInstallSecretRequestData data, String version, UUID orgId, UUID installId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (installId == null) throw new IllegalArgumentException("\"installId\" is required but got null");
            

        return new ManageClientSecretForSnykApp0RequestBuilder(data, version, orgId, installId);
    }
    private okhttp3.Call manageClientSecretsCall(String version, UUID orgId, UUID clientId, AppsManageClientSecretsRequest appsManageClientSecretsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsManageClientSecretsRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/{client_id}/secrets"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageClientSecretsValidateBeforeCall(String version, UUID orgId, UUID clientId, AppsManageClientSecretsRequest appsManageClientSecretsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling manageClientSecrets(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling manageClientSecrets(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling manageClientSecrets(Async)");
        }

        return manageClientSecretsCall(version, orgId, clientId, appsManageClientSecretsRequest, _callback);

    }


    private ApiResponse<AppsManageClientSecretsResponse> manageClientSecretsWithHttpInfo(String version, UUID orgId, UUID clientId, AppsManageClientSecretsRequest appsManageClientSecretsRequest) throws ApiException {
        okhttp3.Call localVarCall = manageClientSecretsValidateBeforeCall(version, orgId, clientId, appsManageClientSecretsRequest, null);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageClientSecretsAsync(String version, UUID orgId, UUID clientId, AppsManageClientSecretsRequest appsManageClientSecretsRequest, final ApiCallback<AppsManageClientSecretsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageClientSecretsValidateBeforeCall(version, orgId, clientId, appsManageClientSecretsRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsManageClientSecretsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageClientSecretsRequestBuilder {
        private final String mode;
        private final String version;
        private final UUID orgId;
        private final UUID clientId;
        private String secret;

        private ManageClientSecretsRequestBuilder(String mode, String version, UUID orgId, UUID clientId) {
            this.mode = mode;
            this.version = version;
            this.orgId = orgId;
            this.clientId = clientId;
        }

        /**
         * Set secret
         * @param secret Secret to delete when using &#x60;delete&#x60; mode (optional)
         * @return ManageClientSecretsRequestBuilder
         */
        public ManageClientSecretsRequestBuilder secret(String secret) {
            this.secret = secret;
            return this;
        }
        
        /**
         * Build call for manageClientSecrets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secrets have been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsManageClientSecretsRequest appsManageClientSecretsRequest = buildBodyParams();
            return manageClientSecretsCall(version, orgId, clientId, appsManageClientSecretsRequest, _callback);
        }

        private AppsManageClientSecretsRequest buildBodyParams() {
            AppsManageClientSecretsRequest appsManageClientSecretsRequest = new AppsManageClientSecretsRequest();
            if (this.mode != null)
            appsManageClientSecretsRequest.mode(AppsManageClientSecretsRequest.ModeEnum.fromValue(this.mode));
            appsManageClientSecretsRequest.secret(this.secret);
            return appsManageClientSecretsRequest;
        }

        /**
         * Execute manageClientSecrets request
         * @return AppsManageClientSecretsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secrets have been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppsManageClientSecretsResponse execute() throws ApiException {
            AppsManageClientSecretsRequest appsManageClientSecretsRequest = buildBodyParams();
            ApiResponse<AppsManageClientSecretsResponse> localVarResp = manageClientSecretsWithHttpInfo(version, orgId, clientId, appsManageClientSecretsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageClientSecrets request with HTTP info returned
         * @return ApiResponse&lt;AppsManageClientSecretsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secrets have been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppsManageClientSecretsResponse> executeWithHttpInfo() throws ApiException {
            AppsManageClientSecretsRequest appsManageClientSecretsRequest = buildBodyParams();
            return manageClientSecretsWithHttpInfo(version, orgId, clientId, appsManageClientSecretsRequest);
        }

        /**
         * Execute manageClientSecrets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Secrets have been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppsManageClientSecretsResponse> _callback) throws ApiException {
            AppsManageClientSecretsRequest appsManageClientSecretsRequest = buildBodyParams();
            return manageClientSecretsAsync(version, orgId, clientId, appsManageClientSecretsRequest, _callback);
        }
    }

    /**
     * Manage client secrets for an app.
     * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param clientId Client ID (required)
     * @return ManageClientSecretsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Secrets have been updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ManageClientSecretsRequestBuilder manageClientSecrets(String mode, String version, UUID orgId, UUID clientId) throws IllegalArgumentException {
        if (mode == null) throw new IllegalArgumentException("\"mode\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new ManageClientSecretsRequestBuilder(mode, version, orgId, clientId);
    }
    private okhttp3.Call revokeAppByIdCall(String version, UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAppByIdValidateBeforeCall(String version, UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling revokeAppById(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling revokeAppById(Async)");
        }

        return revokeAppByIdCall(version, appId, _callback);

    }


    private ApiResponse<Void> revokeAppByIdWithHttpInfo(String version, UUID appId) throws ApiException {
        okhttp3.Call localVarCall = revokeAppByIdValidateBeforeCall(version, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAppByIdAsync(String version, UUID appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAppByIdValidateBeforeCall(version, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAppByIdRequestBuilder {
        private final String version;
        private final UUID appId;

        private RevokeAppByIdRequestBuilder(String version, UUID appId) {
            this.version = version;
            this.appId = appId;
        }

        /**
         * Build call for revokeAppById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been revoked </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAppByIdCall(version, appId, _callback);
        }


        /**
         * Execute revokeAppById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been revoked </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeAppByIdWithHttpInfo(version, appId);
        }

        /**
         * Execute revokeAppById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been revoked </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeAppByIdWithHttpInfo(version, appId);
        }

        /**
         * Execute revokeAppById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app has been revoked </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeAppByIdAsync(version, appId, _callback);
        }
    }

    /**
     * Revoke an app
     * Revoke access for an app by app id
     * @param version The requested version of the endpoint to process the request (required)
     * @param appId App ID (required)
     * @return RevokeAppByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app has been revoked </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RevokeAppByIdRequestBuilder revokeAppById(String version, UUID appId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new RevokeAppByIdRequestBuilder(version, appId);
    }
    private okhttp3.Call revokeBotAuthorizationCall(UUID botId, String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/app_bots/{bot_id}"
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeBotAuthorizationValidateBeforeCall(UUID botId, String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling revokeBotAuthorization(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling revokeBotAuthorization(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling revokeBotAuthorization(Async)");
        }

        return revokeBotAuthorizationCall(botId, version, orgId, _callback);

    }


    private ApiResponse<Void> revokeBotAuthorizationWithHttpInfo(UUID botId, String version, UUID orgId) throws ApiException {
        okhttp3.Call localVarCall = revokeBotAuthorizationValidateBeforeCall(botId, version, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeBotAuthorizationAsync(UUID botId, String version, UUID orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeBotAuthorizationValidateBeforeCall(botId, version, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeBotAuthorizationRequestBuilder {
        private final UUID botId;
        private final String version;
        private final UUID orgId;

        private RevokeBotAuthorizationRequestBuilder(UUID botId, String version, UUID orgId) {
            this.botId = botId;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for revokeBotAuthorization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app bot has been deauthorized </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeBotAuthorizationCall(botId, version, orgId, _callback);
        }


        /**
         * Execute revokeBotAuthorization request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app bot has been deauthorized </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public void execute() throws ApiException {
            revokeBotAuthorizationWithHttpInfo(botId, version, orgId);
        }

        /**
         * Execute revokeBotAuthorization request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app bot has been deauthorized </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeBotAuthorizationWithHttpInfo(botId, version, orgId);
        }

        /**
         * Execute revokeBotAuthorization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app bot has been deauthorized </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeBotAuthorizationAsync(botId, version, orgId, _callback);
        }
    }

    /**
     * Revoke app bot authorization
     * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
     * @param botId The ID of the app bot (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return RevokeBotAuthorizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app bot has been deauthorized </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RevokeBotAuthorizationRequestBuilder revokeBotAuthorization(UUID botId, String version, UUID orgId) throws IllegalArgumentException {
        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RevokeBotAuthorizationRequestBuilder(botId, version, orgId);
    }
    private okhttp3.Call revokeByInstallIdCall(String version, UUID installId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps/installs/{install_id}"
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeByInstallIdValidateBeforeCall(String version, UUID installId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling revokeByInstallId(Async)");
        }

        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling revokeByInstallId(Async)");
        }

        return revokeByInstallIdCall(version, installId, _callback);

    }


    private ApiResponse<Void> revokeByInstallIdWithHttpInfo(String version, UUID installId) throws ApiException {
        okhttp3.Call localVarCall = revokeByInstallIdValidateBeforeCall(version, installId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeByInstallIdAsync(String version, UUID installId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeByInstallIdValidateBeforeCall(version, installId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeByInstallIdRequestBuilder {
        private final String version;
        private final UUID installId;

        private RevokeByInstallIdRequestBuilder(String version, UUID installId) {
            this.version = version;
            this.installId = installId;
        }

        /**
         * Build call for revokeByInstallId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeByInstallIdCall(version, installId, _callback);
        }


        /**
         * Execute revokeByInstallId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeByInstallIdWithHttpInfo(version, installId);
        }

        /**
         * Execute revokeByInstallId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeByInstallIdWithHttpInfo(version, installId);
        }

        /**
         * Execute revokeByInstallId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeByInstallIdAsync(version, installId, _callback);
        }
    }

    /**
     * Revoke access for an app by install ID.
     * Revoke access for an app by install ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param installId Install ID (required)
     * @return RevokeByInstallIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app install has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RevokeByInstallIdRequestBuilder revokeByInstallId(String version, UUID installId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (installId == null) throw new IllegalArgumentException("\"installId\" is required but got null");
            

        return new RevokeByInstallIdRequestBuilder(version, installId);
    }
    private okhttp3.Call revokeGroupAppInstallCall(String version, UUID groupId, UUID installId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/apps/installs/{install_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeGroupAppInstallValidateBeforeCall(String version, UUID groupId, UUID installId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling revokeGroupAppInstall(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling revokeGroupAppInstall(Async)");
        }

        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling revokeGroupAppInstall(Async)");
        }

        return revokeGroupAppInstallCall(version, groupId, installId, _callback);

    }


    private ApiResponse<Void> revokeGroupAppInstallWithHttpInfo(String version, UUID groupId, UUID installId) throws ApiException {
        okhttp3.Call localVarCall = revokeGroupAppInstallValidateBeforeCall(version, groupId, installId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeGroupAppInstallAsync(String version, UUID groupId, UUID installId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeGroupAppInstallValidateBeforeCall(version, groupId, installId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeGroupAppInstallRequestBuilder {
        private final String version;
        private final UUID groupId;
        private final UUID installId;

        private RevokeGroupAppInstallRequestBuilder(String version, UUID groupId, UUID installId) {
            this.version = version;
            this.groupId = groupId;
            this.installId = installId;
        }

        /**
         * Build call for revokeGroupAppInstall
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been de-authorized. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeGroupAppInstallCall(version, groupId, installId, _callback);
        }


        /**
         * Execute revokeGroupAppInstall request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been de-authorized. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeGroupAppInstallWithHttpInfo(version, groupId, installId);
        }

        /**
         * Execute revokeGroupAppInstall request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been de-authorized. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeGroupAppInstallWithHttpInfo(version, groupId, installId);
        }

        /**
         * Execute revokeGroupAppInstall request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The app install has been de-authorized. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeGroupAppInstallAsync(version, groupId, installId, _callback);
        }
    }

    /**
     * Revoke app authorization for an Snyk Group with install ID.
     * Revoke app authorization for an Snyk Group with install ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Group ID (required)
     * @param installId Install ID (required)
     * @return RevokeGroupAppInstallRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The app install has been de-authorized. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RevokeGroupAppInstallRequestBuilder revokeGroupAppInstall(String version, UUID groupId, UUID installId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (installId == null) throw new IllegalArgumentException("\"installId\" is required but got null");
            

        return new RevokeGroupAppInstallRequestBuilder(version, groupId, installId);
    }
    private okhttp3.Call revokeUserAppSessionCall(String version, UUID appId, UUID sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/apps/{app_id}/sessions/{session_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "session_id" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeUserAppSessionValidateBeforeCall(String version, UUID appId, UUID sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling revokeUserAppSession(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling revokeUserAppSession(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling revokeUserAppSession(Async)");
        }

        return revokeUserAppSessionCall(version, appId, sessionId, _callback);

    }


    private ApiResponse<Void> revokeUserAppSessionWithHttpInfo(String version, UUID appId, UUID sessionId) throws ApiException {
        okhttp3.Call localVarCall = revokeUserAppSessionValidateBeforeCall(version, appId, sessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeUserAppSessionAsync(String version, UUID appId, UUID sessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeUserAppSessionValidateBeforeCall(version, appId, sessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeUserAppSessionRequestBuilder {
        private final String version;
        private final UUID appId;
        private final UUID sessionId;

        private RevokeUserAppSessionRequestBuilder(String version, UUID appId, UUID sessionId) {
            this.version = version;
            this.appId = appId;
            this.sessionId = sessionId;
        }

        /**
         * Build call for revokeUserAppSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user app sessions has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeUserAppSessionCall(version, appId, sessionId, _callback);
        }


        /**
         * Execute revokeUserAppSession request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user app sessions has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeUserAppSessionWithHttpInfo(version, appId, sessionId);
        }

        /**
         * Execute revokeUserAppSession request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user app sessions has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeUserAppSessionWithHttpInfo(version, appId, sessionId);
        }

        /**
         * Execute revokeUserAppSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The user app sessions has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeUserAppSessionAsync(version, appId, sessionId, _callback);
        }
    }

    /**
     * Revoke an active user app session.
     * Revoke an active user app session.
     * @param version The requested version of the endpoint to process the request (required)
     * @param appId App ID (required)
     * @param sessionId Session ID (required)
     * @return RevokeUserAppSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user app sessions has been revoked. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RevokeUserAppSessionRequestBuilder revokeUserAppSession(String version, UUID appId, UUID sessionId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
            

        return new RevokeUserAppSessionRequestBuilder(version, appId, sessionId);
    }
    private okhttp3.Call updateAttributesCall(String version, UUID orgId, UUID clientId, AppPatchRequest appPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPatchRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/{client_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "client_id" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(String version, UUID orgId, UUID clientId, AppPatchRequest appPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(version, orgId, clientId, appPatchRequest, _callback);

    }


    private ApiResponse<AppsUpdateAttributesResponse> updateAttributesWithHttpInfo(String version, UUID orgId, UUID clientId, AppPatchRequest appPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(version, orgId, clientId, appPatchRequest, null);
        Type localVarReturnType = new TypeToken<AppsUpdateAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(String version, UUID orgId, UUID clientId, AppPatchRequest appPatchRequest, final ApiCallback<AppsUpdateAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(version, orgId, clientId, appPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsUpdateAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final AppPatchRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID clientId;

        private UpdateAttributesRequestBuilder(AppPatchRequestData data, String version, UUID orgId, UUID clientId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.clientId = clientId;
        }

        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateAttributesCall(version, orgId, clientId, appPatchRequest, _callback);
        }

        private AppPatchRequest buildBodyParams() {
            AppPatchRequest appPatchRequest = new AppPatchRequest();
            appPatchRequest.data(this.data);
            return appPatchRequest;
        }

        /**
         * Execute updateAttributes request
         * @return AppsUpdateAttributesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public AppsUpdateAttributesResponse execute() throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            ApiResponse<AppsUpdateAttributesResponse> localVarResp = updateAttributesWithHttpInfo(version, orgId, clientId, appPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;AppsUpdateAttributesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<AppsUpdateAttributesResponse> executeWithHttpInfo() throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(version, orgId, clientId, appPatchRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<AppsUpdateAttributesResponse> _callback) throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateAttributesAsync(version, orgId, clientId, appPatchRequest, _callback);
        }
    }

    /**
     * Update app attributes that are name, redirect URIs, and access token time to live
     * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param clientId Client ID (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateAttributesRequestBuilder updateAttributes(AppPatchRequestData data, String version, UUID orgId, UUID clientId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        return new UpdateAttributesRequestBuilder(data, version, orgId, clientId);
    }
    private okhttp3.Call updateCreationAttributesByIdCall(String version, UUID orgId, UUID appId, AppPatchRequest appPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPatchRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/apps/creations/{app_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCreationAttributesByIdValidateBeforeCall(String version, UUID orgId, UUID appId, AppPatchRequest appPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateCreationAttributesById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateCreationAttributesById(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateCreationAttributesById(Async)");
        }

        return updateCreationAttributesByIdCall(version, orgId, appId, appPatchRequest, _callback);

    }


    private ApiResponse<AppsUpdateCreationAttributesByIdResponse> updateCreationAttributesByIdWithHttpInfo(String version, UUID orgId, UUID appId, AppPatchRequest appPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCreationAttributesByIdValidateBeforeCall(version, orgId, appId, appPatchRequest, null);
        Type localVarReturnType = new TypeToken<AppsUpdateCreationAttributesByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCreationAttributesByIdAsync(String version, UUID orgId, UUID appId, AppPatchRequest appPatchRequest, final ApiCallback<AppsUpdateCreationAttributesByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCreationAttributesByIdValidateBeforeCall(version, orgId, appId, appPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsUpdateCreationAttributesByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCreationAttributesByIdRequestBuilder {
        private final AppPatchRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID appId;

        private UpdateCreationAttributesByIdRequestBuilder(AppPatchRequestData data, String version, UUID orgId, UUID appId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.appId = appId;
        }

        /**
         * Build call for updateCreationAttributesById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateCreationAttributesByIdCall(version, orgId, appId, appPatchRequest, _callback);
        }

        private AppPatchRequest buildBodyParams() {
            AppPatchRequest appPatchRequest = new AppPatchRequest();
            appPatchRequest.data(this.data);
            return appPatchRequest;
        }

        /**
         * Execute updateCreationAttributesById request
         * @return AppsUpdateCreationAttributesByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public AppsUpdateCreationAttributesByIdResponse execute() throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            ApiResponse<AppsUpdateCreationAttributesByIdResponse> localVarResp = updateCreationAttributesByIdWithHttpInfo(version, orgId, appId, appPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCreationAttributesById request with HTTP info returned
         * @return ApiResponse&lt;AppsUpdateCreationAttributesByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<AppsUpdateCreationAttributesByIdResponse> executeWithHttpInfo() throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateCreationAttributesByIdWithHttpInfo(version, orgId, appId, appPatchRequest);
        }

        /**
         * Execute updateCreationAttributesById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsUpdateCreationAttributesByIdResponse> _callback) throws ApiException {
            AppPatchRequest appPatchRequest = buildBodyParams();
            return updateCreationAttributesByIdAsync(version, orgId, appId, appPatchRequest, _callback);
        }
    }

    /**
     * Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
     * Update app creation attributes with App ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param appId App ID (required)
     * @return UpdateCreationAttributesByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The update app. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateCreationAttributesByIdRequestBuilder updateCreationAttributesById(AppPatchRequestData data, String version, UUID orgId, UUID appId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new UpdateCreationAttributesByIdRequestBuilder(data, version, orgId, appId);
    }
}

/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CollectionCreateNewResponse;
import com.konfigthis.client.model.CollectionEditCollectionResponse;
import com.konfigthis.client.model.CollectionGetByIdResponse;
import com.konfigthis.client.model.CollectionGetListResponse;
import com.konfigthis.client.model.CreateCollectionRequest;
import com.konfigthis.client.model.CreateCollectionRequestData;
import com.konfigthis.client.model.DeleteProjectsFromCollectionRequest;
import com.konfigthis.client.model.DeleteProjectsFromCollectionRequestDataInner;
import com.konfigthis.client.model.GetProjectsOfCollectionResponse;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.konfigthis.client.model.UpdateCollectionRequest;
import com.konfigthis.client.model.UpdateCollectionRequestData;
import com.konfigthis.client.model.UpdateCollectionWithProjectsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CollectionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CollectionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addProjectsToCall(String version, UUID orgId, UUID collectionId, UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCollectionWithProjectsRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}/relationships/projects"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectsToValidateBeforeCall(String version, UUID orgId, UUID collectionId, UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addProjectsTo(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling addProjectsTo(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling addProjectsTo(Async)");
        }

        return addProjectsToCall(version, orgId, collectionId, updateCollectionWithProjectsRequest, _callback);

    }


    private ApiResponse<Void> addProjectsToWithHttpInfo(String version, UUID orgId, UUID collectionId, UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = addProjectsToValidateBeforeCall(version, orgId, collectionId, updateCollectionWithProjectsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addProjectsToAsync(String version, UUID orgId, UUID collectionId, UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectsToValidateBeforeCall(version, orgId, collectionId, updateCollectionWithProjectsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddProjectsToRequestBuilder {
        private final List<DeleteProjectsFromCollectionRequestDataInner> data;
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;

        private AddProjectsToRequestBuilder(List<DeleteProjectsFromCollectionRequestDataInner> data, String version, UUID orgId, UUID collectionId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for addProjectsTo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully adding projects to a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest = buildBodyParams();
            return addProjectsToCall(version, orgId, collectionId, updateCollectionWithProjectsRequest, _callback);
        }

        private UpdateCollectionWithProjectsRequest buildBodyParams() {
            UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest = new UpdateCollectionWithProjectsRequest();
            updateCollectionWithProjectsRequest.data(this.data);
            return updateCollectionWithProjectsRequest;
        }

        /**
         * Execute addProjectsTo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully adding projects to a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest = buildBodyParams();
            addProjectsToWithHttpInfo(version, orgId, collectionId, updateCollectionWithProjectsRequest);
        }

        /**
         * Execute addProjectsTo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully adding projects to a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest = buildBodyParams();
            return addProjectsToWithHttpInfo(version, orgId, collectionId, updateCollectionWithProjectsRequest);
        }

        /**
         * Execute addProjectsTo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully adding projects to a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateCollectionWithProjectsRequest updateCollectionWithProjectsRequest = buildBodyParams();
            return addProjectsToAsync(version, orgId, collectionId, updateCollectionWithProjectsRequest, _callback);
        }
    }

    /**
     * Add projects to a collection
     * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won&#39;t be updated when the target changes)
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return AddProjectsToRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully adding projects to a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public AddProjectsToRequestBuilder addProjectsTo(List<DeleteProjectsFromCollectionRequestDataInner> data, String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new AddProjectsToRequestBuilder(data, version, orgId, collectionId);
    }
    private okhttp3.Call createNewCall(String version, UUID orgId, CreateCollectionRequest createCollectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCollectionRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(String version, UUID orgId, CreateCollectionRequest createCollectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createNew(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNew(Async)");
        }

        return createNewCall(version, orgId, createCollectionRequest, _callback);

    }


    private ApiResponse<CollectionCreateNewResponse> createNewWithHttpInfo(String version, UUID orgId, CreateCollectionRequest createCollectionRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(version, orgId, createCollectionRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateNewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(String version, UUID orgId, CreateCollectionRequest createCollectionRequest, final ApiCallback<CollectionCreateNewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(version, orgId, createCollectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateNewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final CreateCollectionRequestData data;
        private final String version;
        private final UUID orgId;

        private CreateNewRequestBuilder(CreateCollectionRequestData data, String version, UUID orgId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCollectionRequest createCollectionRequest = buildBodyParams();
            return createNewCall(version, orgId, createCollectionRequest, _callback);
        }

        private CreateCollectionRequest buildBodyParams() {
            CreateCollectionRequest createCollectionRequest = new CreateCollectionRequest();
            createCollectionRequest.data(this.data);
            return createCollectionRequest;
        }

        /**
         * Execute createNew request
         * @return CollectionCreateNewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CollectionCreateNewResponse execute() throws ApiException {
            CreateCollectionRequest createCollectionRequest = buildBodyParams();
            ApiResponse<CollectionCreateNewResponse> localVarResp = createNewWithHttpInfo(version, orgId, createCollectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;CollectionCreateNewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CollectionCreateNewResponse> executeWithHttpInfo() throws ApiException {
            CreateCollectionRequest createCollectionRequest = buildBodyParams();
            return createNewWithHttpInfo(version, orgId, createCollectionRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionCreateNewResponse> _callback) throws ApiException {
            CreateCollectionRequest createCollectionRequest = buildBodyParams();
            return createNewAsync(version, orgId, createCollectionRequest, _callback);
        }
    }

    /**
     * Create a collection
     * Create a collection
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(CreateCollectionRequestData data, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewRequestBuilder(data, version, orgId);
    }
    private okhttp3.Call editCollectionCall(String version, UUID orgId, UUID collectionId, UpdateCollectionRequest updateCollectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCollectionRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCollectionValidateBeforeCall(String version, UUID orgId, UUID collectionId, UpdateCollectionRequest updateCollectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling editCollection(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling editCollection(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling editCollection(Async)");
        }

        return editCollectionCall(version, orgId, collectionId, updateCollectionRequest, _callback);

    }


    private ApiResponse<CollectionEditCollectionResponse> editCollectionWithHttpInfo(String version, UUID orgId, UUID collectionId, UpdateCollectionRequest updateCollectionRequest) throws ApiException {
        okhttp3.Call localVarCall = editCollectionValidateBeforeCall(version, orgId, collectionId, updateCollectionRequest, null);
        Type localVarReturnType = new TypeToken<CollectionEditCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editCollectionAsync(String version, UUID orgId, UUID collectionId, UpdateCollectionRequest updateCollectionRequest, final ApiCallback<CollectionEditCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCollectionValidateBeforeCall(version, orgId, collectionId, updateCollectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionEditCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditCollectionRequestBuilder {
        private final UpdateCollectionRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;

        private EditCollectionRequestBuilder(UpdateCollectionRequestData data, String version, UUID orgId, UUID collectionId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for editCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCollectionRequest updateCollectionRequest = buildBodyParams();
            return editCollectionCall(version, orgId, collectionId, updateCollectionRequest, _callback);
        }

        private UpdateCollectionRequest buildBodyParams() {
            UpdateCollectionRequest updateCollectionRequest = new UpdateCollectionRequest();
            updateCollectionRequest.data(this.data);
            return updateCollectionRequest;
        }

        /**
         * Execute editCollection request
         * @return CollectionEditCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CollectionEditCollectionResponse execute() throws ApiException {
            UpdateCollectionRequest updateCollectionRequest = buildBodyParams();
            ApiResponse<CollectionEditCollectionResponse> localVarResp = editCollectionWithHttpInfo(version, orgId, collectionId, updateCollectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editCollection request with HTTP info returned
         * @return ApiResponse&lt;CollectionEditCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CollectionEditCollectionResponse> executeWithHttpInfo() throws ApiException {
            UpdateCollectionRequest updateCollectionRequest = buildBodyParams();
            return editCollectionWithHttpInfo(version, orgId, collectionId, updateCollectionRequest);
        }

        /**
         * Execute editCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionEditCollectionResponse> _callback) throws ApiException {
            UpdateCollectionRequest updateCollectionRequest = buildBodyParams();
            return editCollectionAsync(version, orgId, collectionId, updateCollectionRequest, _callback);
        }
    }

    /**
     * Edit a collection
     * Edit a collection
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return EditCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public EditCollectionRequestBuilder editCollection(UpdateCollectionRequestData data, String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new EditCollectionRequestBuilder(data, version, orgId, collectionId);
    }
    private okhttp3.Call getByIdCall(String version, UUID orgId, UUID collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String version, UUID orgId, UUID collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getById(Async)");
        }

        return getByIdCall(version, orgId, collectionId, _callback);

    }


    private ApiResponse<CollectionGetByIdResponse> getByIdWithHttpInfo(String version, UUID orgId, UUID collectionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, collectionId, null);
        Type localVarReturnType = new TypeToken<CollectionGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String version, UUID orgId, UUID collectionId, final ApiCallback<CollectionGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<CollectionGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;

        private GetByIdRequestBuilder(String version, UUID orgId, UUID collectionId) {
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(version, orgId, collectionId, _callback);
        }


        /**
         * Execute getById request
         * @return CollectionGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CollectionGetByIdResponse execute() throws ApiException {
            ApiResponse<CollectionGetByIdResponse> localVarResp = getByIdWithHttpInfo(version, orgId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CollectionGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CollectionGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(version, orgId, collectionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(version, orgId, collectionId, _callback);
        }
    }

    /**
     * Get a collection
     * Get a collection
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new GetByIdRequestBuilder(version, orgId, collectionId);
    }
    private okhttp3.Call getListCall(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, String name, Boolean isGenerated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (isGenerated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_generated", isGenerated));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, String name, Boolean isGenerated, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getList(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getList(Async)");
        }

        return getListCall(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated, _callback);

    }


    private ApiResponse<CollectionGetListResponse> getListWithHttpInfo(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, String name, Boolean isGenerated) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated, null);
        Type localVarReturnType = new TypeToken<CollectionGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, String name, Boolean isGenerated, final ApiCallback<CollectionGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated, _callback);
        Type localVarReturnType = new TypeToken<CollectionGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String version;
        private final UUID orgId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private String sort;
        private String direction;
        private String name;
        private Boolean isGenerated;

        private GetListRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Return collections sorted by the specified attributes (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set direction
         * @param direction Return collections sorted in the specified direction (optional, default to DESC)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set name
         * @param name Return collections which names include the provided string (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isGenerated
         * @param isGenerated Return collections where is_generated matches the provided boolean (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder isGenerated(Boolean isGenerated) {
            this.isGenerated = isGenerated;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of collections </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated, _callback);
        }


        /**
         * Execute getList request
         * @return CollectionGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of collections </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CollectionGetListResponse execute() throws ApiException {
            ApiResponse<CollectionGetListResponse> localVarResp = getListWithHttpInfo(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;CollectionGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of collections </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CollectionGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of collections </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionGetListResponse> _callback) throws ApiException {
            return getListAsync(version, orgId, startingAfter, endingBefore, limit, sort, direction, name, isGenerated, _callback);
        }
    }

    /**
     * Get collections
     * Return a list of organization&#39;s collections with issues counts  and projects count.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of collections </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetListRequestBuilder(version, orgId);
    }
    private okhttp3.Call getProjectsCall(String version, UUID orgId, UUID collectionId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, List<UUID> targetId, List<String> show, List<String> integration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}/relationships/projects"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (targetId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target_id", targetId));
        }

        if (show != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "show", show));
        }

        if (integration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "integration", integration));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(String version, UUID orgId, UUID collectionId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, List<UUID> targetId, List<String> show, List<String> integration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getProjects(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getProjects(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getProjects(Async)");
        }

        return getProjectsCall(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration, _callback);

    }


    private ApiResponse<GetProjectsOfCollectionResponse> getProjectsWithHttpInfo(String version, UUID orgId, UUID collectionId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, List<UUID> targetId, List<String> show, List<String> integration) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration, null);
        Type localVarReturnType = new TypeToken<GetProjectsOfCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectsAsync(String version, UUID orgId, UUID collectionId, String startingAfter, String endingBefore, Integer limit, String sort, String direction, List<UUID> targetId, List<String> show, List<String> integration, final ApiCallback<GetProjectsOfCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration, _callback);
        Type localVarReturnType = new TypeToken<GetProjectsOfCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectsRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private String sort;
        private String direction;
        private List<UUID> targetId;
        private List<String> show;
        private List<String> integration;

        private GetProjectsRequestBuilder(String version, UUID orgId, UUID collectionId) {
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Return projects sorted by the specified attributes (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set direction
         * @param direction Return projects sorted in the specified direction (optional, default to DESC)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder direction(String direction) {
            this.direction = direction;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Return projects that belong to the provided targets (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder targetId(List<UUID> targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set show
         * @param show Return projects that are with or without issues (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder show(List<String> show) {
            this.show = show;
            return this;
        }
        
        /**
         * Set integration
         * @param integration Return projects that match the provided integration types (optional)
         * @return GetProjectsRequestBuilder
         */
        public GetProjectsRequestBuilder integration(List<String> integration) {
            this.integration = integration;
            return this;
        }
        
        /**
         * Build call for getProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of projects from the specified collection </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectsCall(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration, _callback);
        }


        /**
         * Execute getProjects request
         * @return GetProjectsOfCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of projects from the specified collection </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public GetProjectsOfCollectionResponse execute() throws ApiException {
            ApiResponse<GetProjectsOfCollectionResponse> localVarResp = getProjectsWithHttpInfo(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjects request with HTTP info returned
         * @return ApiResponse&lt;GetProjectsOfCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of projects from the specified collection </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<GetProjectsOfCollectionResponse> executeWithHttpInfo() throws ApiException {
            return getProjectsWithHttpInfo(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration);
        }

        /**
         * Execute getProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of projects from the specified collection </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProjectsOfCollectionResponse> _callback) throws ApiException {
            return getProjectsAsync(version, orgId, collectionId, startingAfter, endingBefore, limit, sort, direction, targetId, show, integration, _callback);
        }
    }

    /**
     * Get projects from the specified collection
     * Return a list of organization&#39;s projects that are from the specified collection.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return GetProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of projects from the specified collection </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetProjectsRequestBuilder getProjects(String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new GetProjectsRequestBuilder(version, orgId, collectionId);
    }
    private okhttp3.Call removeByIdCall(String version, UUID orgId, UUID collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String version, UUID orgId, UUID collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling removeById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling removeById(Async)");
        }

        return removeByIdCall(version, orgId, collectionId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String version, UUID orgId, UUID collectionId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(version, orgId, collectionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String version, UUID orgId, UUID collectionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(version, orgId, collectionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;

        private RemoveByIdRequestBuilder(String version, UUID orgId, UUID collectionId) {
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Collection was deleted successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(version, orgId, collectionId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Collection was deleted successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(version, orgId, collectionId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Collection was deleted successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(version, orgId, collectionId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Collection was deleted successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(version, orgId, collectionId, _callback);
        }
    }

    /**
     * Delete a collection
     * Delete a collection
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Collection was deleted successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(version, orgId, collectionId);
    }
    private okhttp3.Call removeProjectsCall(String version, UUID orgId, UUID collectionId, DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteProjectsFromCollectionRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/collections/{collection_id}/relationships/projects"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectsValidateBeforeCall(String version, UUID orgId, UUID collectionId, DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling removeProjects(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeProjects(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling removeProjects(Async)");
        }

        return removeProjectsCall(version, orgId, collectionId, deleteProjectsFromCollectionRequest, _callback);

    }


    private ApiResponse<Void> removeProjectsWithHttpInfo(String version, UUID orgId, UUID collectionId, DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest) throws ApiException {
        okhttp3.Call localVarCall = removeProjectsValidateBeforeCall(version, orgId, collectionId, deleteProjectsFromCollectionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeProjectsAsync(String version, UUID orgId, UUID collectionId, DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectsValidateBeforeCall(version, orgId, collectionId, deleteProjectsFromCollectionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveProjectsRequestBuilder {
        private final List<DeleteProjectsFromCollectionRequestDataInner> data;
        private final String version;
        private final UUID orgId;
        private final UUID collectionId;

        private RemoveProjectsRequestBuilder(List<DeleteProjectsFromCollectionRequestDataInner> data, String version, UUID orgId, UUID collectionId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for removeProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully removing projects from a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest = buildBodyParams();
            return removeProjectsCall(version, orgId, collectionId, deleteProjectsFromCollectionRequest, _callback);
        }

        private DeleteProjectsFromCollectionRequest buildBodyParams() {
            DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest = new DeleteProjectsFromCollectionRequest();
            deleteProjectsFromCollectionRequest.data(this.data);
            return deleteProjectsFromCollectionRequest;
        }

        /**
         * Execute removeProjects request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully removing projects from a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest = buildBodyParams();
            removeProjectsWithHttpInfo(version, orgId, collectionId, deleteProjectsFromCollectionRequest);
        }

        /**
         * Execute removeProjects request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully removing projects from a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest = buildBodyParams();
            return removeProjectsWithHttpInfo(version, orgId, collectionId, deleteProjectsFromCollectionRequest);
        }

        /**
         * Execute removeProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successfully removing projects from a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DeleteProjectsFromCollectionRequest deleteProjectsFromCollectionRequest = buildBodyParams();
            return removeProjectsAsync(version, orgId, collectionId, deleteProjectsFromCollectionRequest, _callback);
        }
    }

    /**
     * Remove projects from a collection
     * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param collectionId Unique identifier for a collection (required)
     * @return RemoveProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successfully removing projects from a collection </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RemoveProjectsRequestBuilder removeProjects(List<DeleteProjectsFromCollectionRequestDataInner> data, String version, UUID orgId, UUID collectionId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new RemoveProjectsRequestBuilder(data, version, orgId, collectionId);
    }
}

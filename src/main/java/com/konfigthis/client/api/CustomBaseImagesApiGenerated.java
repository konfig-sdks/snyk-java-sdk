/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomBaseImageCollectionResponse;
import com.konfigthis.client.model.CustomBaseImagePatchRequest;
import com.konfigthis.client.model.CustomBaseImagePatchRequestData;
import com.konfigthis.client.model.CustomBaseImagePostRequest;
import com.konfigthis.client.model.CustomBaseImagePostRequestData;
import com.konfigthis.client.model.CustomBaseImageResponse;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomBaseImagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomBaseImagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomBaseImagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String version, UUID custombaseimageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_base_images/{custombaseimage_id}"
            .replace("{" + "custombaseimage_id" + "}", localVarApiClient.escapeString(custombaseimageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String version, UUID custombaseimageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getById(Async)");
        }

        // verify the required parameter 'custombaseimageId' is set
        if (custombaseimageId == null) {
            throw new ApiException("Missing the required parameter 'custombaseimageId' when calling getById(Async)");
        }

        return getByIdCall(version, custombaseimageId, _callback);

    }


    private ApiResponse<CustomBaseImageResponse> getByIdWithHttpInfo(String version, UUID custombaseimageId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, custombaseimageId, null);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String version, UUID custombaseimageId, final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, custombaseimageId, _callback);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String version;
        private final UUID custombaseimageId;

        private GetByIdRequestBuilder(String version, UUID custombaseimageId) {
            this.version = version;
            this.custombaseimageId = custombaseimageId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(version, custombaseimageId, _callback);
        }


        /**
         * Execute getById request
         * @return CustomBaseImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CustomBaseImageResponse execute() throws ApiException {
            ApiResponse<CustomBaseImageResponse> localVarResp = getByIdWithHttpInfo(version, custombaseimageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CustomBaseImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CustomBaseImageResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(version, custombaseimageId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {
            return getByIdAsync(version, custombaseimageId, _callback);
        }
    }

    /**
     * Get a custom base image
     * Get a custom base image
     * @param version The requested version of the endpoint to process the request (required)
     * @param custombaseimageId Unique identifier for custom base image (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String version, UUID custombaseimageId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (custombaseimageId == null) throw new IllegalArgumentException("\"custombaseimageId\" is required but got null");
            

        return new GetByIdRequestBuilder(version, custombaseimageId);
    }
    private okhttp3.Call listCall(String version, String startingAfter, String endingBefore, Integer limit, UUID projectId, UUID orgId, UUID groupId, String repository, String tag, Boolean includeInRecommendations, String sortBy, String sortDirection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_base_images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (orgId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org_id", orgId));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (repository != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository", repository));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (includeInRecommendations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_in_recommendations", includeInRecommendations));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String version, String startingAfter, String endingBefore, Integer limit, UUID projectId, UUID orgId, UUID groupId, String repository, String tag, Boolean includeInRecommendations, String sortBy, String sortDirection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling list(Async)");
        }

        return listCall(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection, _callback);

    }


    private ApiResponse<CustomBaseImageCollectionResponse> listWithHttpInfo(String version, String startingAfter, String endingBefore, Integer limit, UUID projectId, UUID orgId, UUID groupId, String repository, String tag, Boolean includeInRecommendations, String sortBy, String sortDirection) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection, null);
        Type localVarReturnType = new TypeToken<CustomBaseImageCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String version, String startingAfter, String endingBefore, Integer limit, UUID projectId, UUID orgId, UUID groupId, String repository, String tag, Boolean includeInRecommendations, String sortBy, String sortDirection, final ApiCallback<CustomBaseImageCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection, _callback);
        Type localVarReturnType = new TypeToken<CustomBaseImageCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private UUID projectId;
        private UUID orgId;
        private UUID groupId;
        private String repository;
        private String tag;
        private Boolean includeInRecommendations;
        private String sortBy;
        private String sortDirection;

        private ListRequestBuilder(String version) {
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId The ID of the container project that the custom base image is based off of. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder projectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId The organization ID of the custom base image (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orgId(UUID orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The group ID of the custom base image (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder groupId(UUID groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set repository
         * @param repository The image repository (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder repository(String repository) {
            this.repository = repository;
            return this;
        }
        
        /**
         * Set tag
         * @param tag The image tag (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set includeInRecommendations
         * @param includeInRecommendations Whether this image should be recommended as a base image upgrade (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeInRecommendations(Boolean includeInRecommendations) {
            this.includeInRecommendations = includeInRecommendations;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Which column to sort by.  If sorting by version, the versioning schema is used.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortDirection
         * @param sortDirection Which direction to sort (optional, default to ASC)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortDirection(String sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns custom base images </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection, _callback);
        }


        /**
         * Execute list request
         * @return CustomBaseImageCollectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns custom base images </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CustomBaseImageCollectionResponse execute() throws ApiException {
            ApiResponse<CustomBaseImageCollectionResponse> localVarResp = listWithHttpInfo(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CustomBaseImageCollectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns custom base images </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CustomBaseImageCollectionResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns custom base images </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomBaseImageCollectionResponse> _callback) throws ApiException {
            return listAsync(version, startingAfter, endingBefore, limit, projectId, orgId, groupId, repository, tag, includeInRecommendations, sortBy, sortDirection, _callback);
        }
    }

    /**
     * Get a custom base image collection
     * Get a list of custom base images with support for ordering and filtering. Either the org_id or group_id parameters must be set to authorize successfully. If sorting by version, the repository filter is required. 
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns custom base images </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String version) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListRequestBuilder(version);
    }
    private okhttp3.Call markImageAsCustomBaseCall(String version, CustomBaseImagePostRequest customBaseImagePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customBaseImagePostRequest;

        // create path and map variables
        String localVarPath = "/custom_base_images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markImageAsCustomBaseValidateBeforeCall(String version, CustomBaseImagePostRequest customBaseImagePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling markImageAsCustomBase(Async)");
        }

        return markImageAsCustomBaseCall(version, customBaseImagePostRequest, _callback);

    }


    private ApiResponse<CustomBaseImageResponse> markImageAsCustomBaseWithHttpInfo(String version, CustomBaseImagePostRequest customBaseImagePostRequest) throws ApiException {
        okhttp3.Call localVarCall = markImageAsCustomBaseValidateBeforeCall(version, customBaseImagePostRequest, null);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markImageAsCustomBaseAsync(String version, CustomBaseImagePostRequest customBaseImagePostRequest, final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markImageAsCustomBaseValidateBeforeCall(version, customBaseImagePostRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkImageAsCustomBaseRequestBuilder {
        private final CustomBaseImagePostRequestData data;
        private final String version;

        private MarkImageAsCustomBaseRequestBuilder(CustomBaseImagePostRequestData data, String version) {
            this.data = data;
            this.version = version;
        }

        /**
         * Build call for markImageAsCustomBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a custom base image </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomBaseImagePostRequest customBaseImagePostRequest = buildBodyParams();
            return markImageAsCustomBaseCall(version, customBaseImagePostRequest, _callback);
        }

        private CustomBaseImagePostRequest buildBodyParams() {
            CustomBaseImagePostRequest customBaseImagePostRequest = new CustomBaseImagePostRequest();
            customBaseImagePostRequest.data(this.data);
            return customBaseImagePostRequest;
        }

        /**
         * Execute markImageAsCustomBase request
         * @return CustomBaseImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a custom base image </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CustomBaseImageResponse execute() throws ApiException {
            CustomBaseImagePostRequest customBaseImagePostRequest = buildBodyParams();
            ApiResponse<CustomBaseImageResponse> localVarResp = markImageAsCustomBaseWithHttpInfo(version, customBaseImagePostRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markImageAsCustomBase request with HTTP info returned
         * @return ApiResponse&lt;CustomBaseImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a custom base image </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CustomBaseImageResponse> executeWithHttpInfo() throws ApiException {
            CustomBaseImagePostRequest customBaseImagePostRequest = buildBodyParams();
            return markImageAsCustomBaseWithHttpInfo(version, customBaseImagePostRequest);
        }

        /**
         * Execute markImageAsCustomBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a custom base image </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {
            CustomBaseImagePostRequest customBaseImagePostRequest = buildBodyParams();
            return markImageAsCustomBaseAsync(version, customBaseImagePostRequest, _callback);
        }
    }

    /**
     * Create a Custom Base Image from an existing container project
     * In order to create a custom base image, you first need to import your base images into Snyk. You can do this through the CLI, UI, or API.  This endpoint marks an image as a custom base image. This means that the image will get added to the pool of images from which Snyk can recommend base image upgrades.  Note, after the first image in a repository gets added, a versioning schema cannot be passed in this endpoint. To update the versioning schema, the PATCH endpoint must be used. 
     * @param version The requested version of the endpoint to process the request (required)
     * @return MarkImageAsCustomBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a custom base image </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public MarkImageAsCustomBaseRequestBuilder markImageAsCustomBase(CustomBaseImagePostRequestData data, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new MarkImageAsCustomBaseRequestBuilder(data, version);
    }
    private okhttp3.Call removeCustomBaseImageCall(String version, UUID custombaseimageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/custom_base_images/{custombaseimage_id}"
            .replace("{" + "custombaseimage_id" + "}", localVarApiClient.escapeString(custombaseimageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomBaseImageValidateBeforeCall(String version, UUID custombaseimageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling removeCustomBaseImage(Async)");
        }

        // verify the required parameter 'custombaseimageId' is set
        if (custombaseimageId == null) {
            throw new ApiException("Missing the required parameter 'custombaseimageId' when calling removeCustomBaseImage(Async)");
        }

        return removeCustomBaseImageCall(version, custombaseimageId, _callback);

    }


    private ApiResponse<Void> removeCustomBaseImageWithHttpInfo(String version, UUID custombaseimageId) throws ApiException {
        okhttp3.Call localVarCall = removeCustomBaseImageValidateBeforeCall(version, custombaseimageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCustomBaseImageAsync(String version, UUID custombaseimageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomBaseImageValidateBeforeCall(version, custombaseimageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCustomBaseImageRequestBuilder {
        private final String version;
        private final UUID custombaseimageId;

        private RemoveCustomBaseImageRequestBuilder(String version, UUID custombaseimageId) {
            this.version = version;
            this.custombaseimageId = custombaseimageId;
        }

        /**
         * Build call for removeCustomBaseImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted the custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCustomBaseImageCall(version, custombaseimageId, _callback);
        }


        /**
         * Execute removeCustomBaseImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted the custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCustomBaseImageWithHttpInfo(version, custombaseimageId);
        }

        /**
         * Execute removeCustomBaseImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted the custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCustomBaseImageWithHttpInfo(version, custombaseimageId);
        }

        /**
         * Execute removeCustomBaseImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted the custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCustomBaseImageAsync(version, custombaseimageId, _callback);
        }
    }

    /**
     * Delete a custom base image
     * Delete a custom base image resource. (the related container project is unaffected)
     * @param version The requested version of the endpoint to process the request (required)
     * @param custombaseimageId Unique identifier for custom base image (required)
     * @return RemoveCustomBaseImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RemoveCustomBaseImageRequestBuilder removeCustomBaseImage(String version, UUID custombaseimageId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (custombaseimageId == null) throw new IllegalArgumentException("\"custombaseimageId\" is required but got null");
            

        return new RemoveCustomBaseImageRequestBuilder(version, custombaseimageId);
    }
    private okhttp3.Call updateAttributesCall(String version, UUID custombaseimageId, CustomBaseImagePatchRequest customBaseImagePatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customBaseImagePatchRequest;

        // create path and map variables
        String localVarPath = "/custom_base_images/{custombaseimage_id}"
            .replace("{" + "custombaseimage_id" + "}", localVarApiClient.escapeString(custombaseimageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributesValidateBeforeCall(String version, UUID custombaseimageId, CustomBaseImagePatchRequest customBaseImagePatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateAttributes(Async)");
        }

        // verify the required parameter 'custombaseimageId' is set
        if (custombaseimageId == null) {
            throw new ApiException("Missing the required parameter 'custombaseimageId' when calling updateAttributes(Async)");
        }

        return updateAttributesCall(version, custombaseimageId, customBaseImagePatchRequest, _callback);

    }


    private ApiResponse<CustomBaseImageResponse> updateAttributesWithHttpInfo(String version, UUID custombaseimageId, CustomBaseImagePatchRequest customBaseImagePatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(version, custombaseimageId, customBaseImagePatchRequest, null);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttributesAsync(String version, UUID custombaseimageId, CustomBaseImagePatchRequest customBaseImagePatchRequest, final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributesValidateBeforeCall(version, custombaseimageId, customBaseImagePatchRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomBaseImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttributesRequestBuilder {
        private final CustomBaseImagePatchRequestData data;
        private final String version;
        private final UUID custombaseimageId;

        private UpdateAttributesRequestBuilder(CustomBaseImagePatchRequestData data, String version, UUID custombaseimageId) {
            this.data = data;
            this.version = version;
            this.custombaseimageId = custombaseimageId;
        }

        /**
         * Build call for updateAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomBaseImagePatchRequest customBaseImagePatchRequest = buildBodyParams();
            return updateAttributesCall(version, custombaseimageId, customBaseImagePatchRequest, _callback);
        }

        private CustomBaseImagePatchRequest buildBodyParams() {
            CustomBaseImagePatchRequest customBaseImagePatchRequest = new CustomBaseImagePatchRequest();
            customBaseImagePatchRequest.data(this.data);
            return customBaseImagePatchRequest;
        }

        /**
         * Execute updateAttributes request
         * @return CustomBaseImageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public CustomBaseImageResponse execute() throws ApiException {
            CustomBaseImagePatchRequest customBaseImagePatchRequest = buildBodyParams();
            ApiResponse<CustomBaseImageResponse> localVarResp = updateAttributesWithHttpInfo(version, custombaseimageId, customBaseImagePatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttributes request with HTTP info returned
         * @return ApiResponse&lt;CustomBaseImageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<CustomBaseImageResponse> executeWithHttpInfo() throws ApiException {
            CustomBaseImagePatchRequest customBaseImagePatchRequest = buildBodyParams();
            return updateAttributesWithHttpInfo(version, custombaseimageId, customBaseImagePatchRequest);
        }

        /**
         * Execute updateAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the updated custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomBaseImageResponse> _callback) throws ApiException {
            CustomBaseImagePatchRequest customBaseImagePatchRequest = buildBodyParams();
            return updateAttributesAsync(version, custombaseimageId, customBaseImagePatchRequest, _callback);
        }
    }

    /**
     * Update a custom base image
     * Updates a custom base image&#39;s attributes
     * @param version The requested version of the endpoint to process the request (required)
     * @param custombaseimageId Unique identifier for custom base image (required)
     * @return UpdateAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated custom base image </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateAttributesRequestBuilder updateAttributes(CustomBaseImagePatchRequestData data, String version, UUID custombaseimageId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (custombaseimageId == null) throw new IllegalArgumentException("\"custombaseimageId\" is required but got null");
            

        return new UpdateAttributesRequestBuilder(data, version, custombaseimageId);
    }
}

/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GroupIacSettingsRequest;
import com.konfigthis.client.model.IacSettingsGetForGroupResponse;
import com.konfigthis.client.model.IacSettingsGetForOrgIacResponse;
import com.konfigthis.client.model.IacSettingsUpdateForGroupRequest;
import com.konfigthis.client.model.IacSettingsUpdateForGroupResponse;
import com.konfigthis.client.model.IacSettingsUpdateForOrgRequest;
import com.konfigthis.client.model.IacSettingsUpdateForOrgResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrgIacSettingsRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IacSettingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IacSettingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IacSettingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getForGroupCall(String version, UUID groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/settings/iac"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForGroupValidateBeforeCall(String version, UUID groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getForGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getForGroup(Async)");
        }

        return getForGroupCall(version, groupId, _callback);

    }


    private ApiResponse<IacSettingsGetForGroupResponse> getForGroupWithHttpInfo(String version, UUID groupId) throws ApiException {
        okhttp3.Call localVarCall = getForGroupValidateBeforeCall(version, groupId, null);
        Type localVarReturnType = new TypeToken<IacSettingsGetForGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForGroupAsync(String version, UUID groupId, final ApiCallback<IacSettingsGetForGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForGroupValidateBeforeCall(version, groupId, _callback);
        Type localVarReturnType = new TypeToken<IacSettingsGetForGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForGroupRequestBuilder {
        private final String version;
        private final UUID groupId;

        private GetForGroupRequestBuilder(String version, UUID groupId) {
            this.version = version;
            this.groupId = groupId;
        }

        /**
         * Build call for getForGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForGroupCall(version, groupId, _callback);
        }


        /**
         * Execute getForGroup request
         * @return IacSettingsGetForGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IacSettingsGetForGroupResponse execute() throws ApiException {
            ApiResponse<IacSettingsGetForGroupResponse> localVarResp = getForGroupWithHttpInfo(version, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForGroup request with HTTP info returned
         * @return ApiResponse&lt;IacSettingsGetForGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IacSettingsGetForGroupResponse> executeWithHttpInfo() throws ApiException {
            return getForGroupWithHttpInfo(version, groupId);
        }

        /**
         * Execute getForGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IacSettingsGetForGroupResponse> _callback) throws ApiException {
            return getForGroupAsync(version, groupId, _callback);
        }
    }

    /**
     * Get the Infrastructure as Code Settings for a group
     * Get the Infrastructure as Code Settings for a group.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId The id of the group whose Infrastructure as Code settings are requested (required)
     * @return GetForGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetForGroupRequestBuilder getForGroup(String version, UUID groupId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetForGroupRequestBuilder(version, groupId);
    }
    private okhttp3.Call getForOrgIacCall(String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/settings/iac"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForOrgIacValidateBeforeCall(String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getForOrgIac(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getForOrgIac(Async)");
        }

        return getForOrgIacCall(version, orgId, _callback);

    }


    private ApiResponse<IacSettingsGetForOrgIacResponse> getForOrgIacWithHttpInfo(String version, UUID orgId) throws ApiException {
        okhttp3.Call localVarCall = getForOrgIacValidateBeforeCall(version, orgId, null);
        Type localVarReturnType = new TypeToken<IacSettingsGetForOrgIacResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForOrgIacAsync(String version, UUID orgId, final ApiCallback<IacSettingsGetForOrgIacResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForOrgIacValidateBeforeCall(version, orgId, _callback);
        Type localVarReturnType = new TypeToken<IacSettingsGetForOrgIacResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetForOrgIacRequestBuilder {
        private final String version;
        private final UUID orgId;

        private GetForOrgIacRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for getForOrgIac
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForOrgIacCall(version, orgId, _callback);
        }


        /**
         * Execute getForOrgIac request
         * @return IacSettingsGetForOrgIacResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IacSettingsGetForOrgIacResponse execute() throws ApiException {
            ApiResponse<IacSettingsGetForOrgIacResponse> localVarResp = getForOrgIacWithHttpInfo(version, orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getForOrgIac request with HTTP info returned
         * @return ApiResponse&lt;IacSettingsGetForOrgIacResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IacSettingsGetForOrgIacResponse> executeWithHttpInfo() throws ApiException {
            return getForOrgIacWithHttpInfo(version, orgId);
        }

        /**
         * Execute getForOrgIac request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IacSettingsGetForOrgIacResponse> _callback) throws ApiException {
            return getForOrgIacAsync(version, orgId, _callback);
        }
    }

    /**
     * Get the Infrastructure as Code Settings for an org.
     * Get the Infrastructure as Code Settings for an org.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The id of the org whose Infrastructure as Code settings are requested. (required)
     * @return GetForOrgIacRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetForOrgIacRequestBuilder getForOrgIac(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetForOrgIacRequestBuilder(version, orgId);
    }
    private okhttp3.Call updateForGroupCall(String version, UUID groupId, IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iacSettingsUpdateForGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/settings/iac"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateForGroupValidateBeforeCall(String version, UUID groupId, IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateForGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateForGroup(Async)");
        }

        return updateForGroupCall(version, groupId, iacSettingsUpdateForGroupRequest, _callback);

    }


    private ApiResponse<IacSettingsUpdateForGroupResponse> updateForGroupWithHttpInfo(String version, UUID groupId, IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateForGroupValidateBeforeCall(version, groupId, iacSettingsUpdateForGroupRequest, null);
        Type localVarReturnType = new TypeToken<IacSettingsUpdateForGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateForGroupAsync(String version, UUID groupId, IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest, final ApiCallback<IacSettingsUpdateForGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateForGroupValidateBeforeCall(version, groupId, iacSettingsUpdateForGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<IacSettingsUpdateForGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateForGroupRequestBuilder {
        private final String version;
        private final UUID groupId;
        private GroupIacSettingsRequest data;

        private UpdateForGroupRequestBuilder(String version, UUID groupId) {
            this.version = version;
            this.groupId = groupId;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateForGroupRequestBuilder
         */
        public UpdateForGroupRequestBuilder data(GroupIacSettingsRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for updateForGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest = buildBodyParams();
            return updateForGroupCall(version, groupId, iacSettingsUpdateForGroupRequest, _callback);
        }

        private IacSettingsUpdateForGroupRequest buildBodyParams() {
            IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest = new IacSettingsUpdateForGroupRequest();
            iacSettingsUpdateForGroupRequest.data(this.data);
            return iacSettingsUpdateForGroupRequest;
        }

        /**
         * Execute updateForGroup request
         * @return IacSettingsUpdateForGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IacSettingsUpdateForGroupResponse execute() throws ApiException {
            IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest = buildBodyParams();
            ApiResponse<IacSettingsUpdateForGroupResponse> localVarResp = updateForGroupWithHttpInfo(version, groupId, iacSettingsUpdateForGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateForGroup request with HTTP info returned
         * @return ApiResponse&lt;IacSettingsUpdateForGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IacSettingsUpdateForGroupResponse> executeWithHttpInfo() throws ApiException {
            IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest = buildBodyParams();
            return updateForGroupWithHttpInfo(version, groupId, iacSettingsUpdateForGroupRequest);
        }

        /**
         * Execute updateForGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IacSettingsUpdateForGroupResponse> _callback) throws ApiException {
            IacSettingsUpdateForGroupRequest iacSettingsUpdateForGroupRequest = buildBodyParams();
            return updateForGroupAsync(version, groupId, iacSettingsUpdateForGroupRequest, _callback);
        }
    }

    /**
     * Update the Infrastructure as Code Settings for a group
     * Update the Infrastructure as Code Settings for a group.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId The id of the group whose Infrastructure as Code settings are getting updated (required)
     * @return UpdateForGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Infrastructure as Code Settings of the group were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateForGroupRequestBuilder updateForGroup(String version, UUID groupId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateForGroupRequestBuilder(version, groupId);
    }
    private okhttp3.Call updateForOrgCall(String version, UUID orgId, IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = iacSettingsUpdateForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/settings/iac"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateForOrgValidateBeforeCall(String version, UUID orgId, IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateForOrg(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateForOrg(Async)");
        }

        return updateForOrgCall(version, orgId, iacSettingsUpdateForOrgRequest, _callback);

    }


    private ApiResponse<IacSettingsUpdateForOrgResponse> updateForOrgWithHttpInfo(String version, UUID orgId, IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = updateForOrgValidateBeforeCall(version, orgId, iacSettingsUpdateForOrgRequest, null);
        Type localVarReturnType = new TypeToken<IacSettingsUpdateForOrgResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateForOrgAsync(String version, UUID orgId, IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest, final ApiCallback<IacSettingsUpdateForOrgResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateForOrgValidateBeforeCall(version, orgId, iacSettingsUpdateForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<IacSettingsUpdateForOrgResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateForOrgRequestBuilder {
        private final String version;
        private final UUID orgId;
        private OrgIacSettingsRequest data;

        private UpdateForOrgRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateForOrgRequestBuilder
         */
        public UpdateForOrgRequestBuilder data(OrgIacSettingsRequest data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for updateForOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest = buildBodyParams();
            return updateForOrgCall(version, orgId, iacSettingsUpdateForOrgRequest, _callback);
        }

        private IacSettingsUpdateForOrgRequest buildBodyParams() {
            IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest = new IacSettingsUpdateForOrgRequest();
            iacSettingsUpdateForOrgRequest.data(this.data);
            return iacSettingsUpdateForOrgRequest;
        }

        /**
         * Execute updateForOrg request
         * @return IacSettingsUpdateForOrgResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IacSettingsUpdateForOrgResponse execute() throws ApiException {
            IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest = buildBodyParams();
            ApiResponse<IacSettingsUpdateForOrgResponse> localVarResp = updateForOrgWithHttpInfo(version, orgId, iacSettingsUpdateForOrgRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateForOrg request with HTTP info returned
         * @return ApiResponse&lt;IacSettingsUpdateForOrgResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IacSettingsUpdateForOrgResponse> executeWithHttpInfo() throws ApiException {
            IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest = buildBodyParams();
            return updateForOrgWithHttpInfo(version, orgId, iacSettingsUpdateForOrgRequest);
        }

        /**
         * Execute updateForOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IacSettingsUpdateForOrgResponse> _callback) throws ApiException {
            IacSettingsUpdateForOrgRequest iacSettingsUpdateForOrgRequest = buildBodyParams();
            return updateForOrgAsync(version, orgId, iacSettingsUpdateForOrgRequest, _callback);
        }
    }

    /**
     * Update the Infrastructure as Code Settings for an org
     * Update the Infrastructure as Code Settings for an org.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The id of the org whose Infrastructure as Code settings are getting updated (required)
     * @return UpdateForOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Infrastructure as Code Settings of the org were updated. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateForOrgRequestBuilder updateForOrg(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateForOrgRequestBuilder(version, orgId);
    }
}

/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkPackageUrlsRequestBody;
import com.konfigthis.client.model.BulkPackageUrlsRequestBodyData;
import com.konfigthis.client.model.IssuesByGroupIdResponse;
import com.konfigthis.client.model.IssuesGetByIssueIdResponse;
import com.konfigthis.client.model.IssuesResponse;
import com.konfigthis.client.model.IssuesWithPurlsResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ScanItemType;
import com.konfigthis.client.model.TypeDef;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IssuesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IssuesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byGroupIdCall(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/issues"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (scanItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scan_item.id", scanItemId));
        }

        if (scanItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scan_item.type", scanItemType));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (updatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_before", updatedBefore));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_after", updatedAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (effectiveSeverityLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "effective_severity_level", effectiveSeverityLevel));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (ignored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignored", ignored));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byGroupIdValidateBeforeCall(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling byGroupId(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling byGroupId(Async)");
        }

        return byGroupIdCall(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);

    }


    private ApiResponse<IssuesByGroupIdResponse> byGroupIdWithHttpInfo(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored) throws ApiException {
        okhttp3.Call localVarCall = byGroupIdValidateBeforeCall(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, null);
        Type localVarReturnType = new TypeToken<IssuesByGroupIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byGroupIdAsync(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback<IssuesByGroupIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = byGroupIdValidateBeforeCall(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        Type localVarReturnType = new TypeToken<IssuesByGroupIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByGroupIdRequestBuilder {
        private final String version;
        private final UUID groupId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private UUID scanItemId;
        private ScanItemType scanItemType;
        private TypeDef type;
        private OffsetDateTime updatedBefore;
        private OffsetDateTime updatedAfter;
        private OffsetDateTime createdBefore;
        private OffsetDateTime createdAfter;
        private List<String> effectiveSeverityLevel;
        private List<String> status;
        private Boolean ignored;

        private ByGroupIdRequestBuilder(String version, UUID groupId) {
            this.version = version;
            this.groupId = groupId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set scanItemId
         * @param scanItemId A scan item id to filter issues through their scan item relationship. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder scanItemId(UUID scanItemId) {
            this.scanItemId = scanItemId;
            return this;
        }
        
        /**
         * Set scanItemType
         * @param scanItemType A scan item types to filter issues through their scan item relationship. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder scanItemType(ScanItemType scanItemType) {
            this.scanItemType = scanItemType;
            return this;
        }
        
        /**
         * Set type
         * @param type An issue type to filter issues. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder type(TypeDef type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set updatedBefore
         * @param updatedBefore A filter to select issues updated before this date. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder updatedBefore(OffsetDateTime updatedBefore) {
            this.updatedBefore = updatedBefore;
            return this;
        }
        
        /**
         * Set updatedAfter
         * @param updatedAfter A filter to select issues updated after this date. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder updatedAfter(OffsetDateTime updatedAfter) {
            this.updatedAfter = updatedAfter;
            return this;
        }
        
        /**
         * Set createdBefore
         * @param createdBefore A filter to select issues created before this date. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }
        
        /**
         * Set createdAfter
         * @param createdAfter A filter to select issues created after this date. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }
        
        /**
         * Set effectiveSeverityLevel
         * @param effectiveSeverityLevel One or more effective severity levels to filter issues. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder effectiveSeverityLevel(List<String> effectiveSeverityLevel) {
            this.effectiveSeverityLevel = effectiveSeverityLevel;
            return this;
        }
        
        /**
         * Set status
         * @param status An issue&#39;s status (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder status(List<String> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set ignored
         * @param ignored Whether an issue is ignored or not. (optional)
         * @return ByGroupIdRequestBuilder
         */
        public ByGroupIdRequestBuilder ignored(Boolean ignored) {
            this.ignored = ignored;
            return this;
        }
        
        /**
         * Build call for byGroupId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byGroupIdCall(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        }


        /**
         * Execute byGroupId request
         * @return IssuesByGroupIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesByGroupIdResponse execute() throws ApiException {
            ApiResponse<IssuesByGroupIdResponse> localVarResp = byGroupIdWithHttpInfo(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byGroupId request with HTTP info returned
         * @return ApiResponse&lt;IssuesByGroupIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesByGroupIdResponse> executeWithHttpInfo() throws ApiException {
            return byGroupIdWithHttpInfo(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored);
        }

        /**
         * Execute byGroupId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesByGroupIdResponse> _callback) throws ApiException {
            return byGroupIdAsync(version, groupId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        }
    }

    /**
     * Get issues by group ID
     * Get a list of a group&#39;s issues.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Group ID (required)
     * @return ByGroupIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ByGroupIdRequestBuilder byGroupId(String version, UUID groupId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new ByGroupIdRequestBuilder(version, groupId);
    }
    private okhttp3.Call getByIdCall(String version, UUID orgId, UUID issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/issues/{issue_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String version, UUID orgId, UUID issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getById(Async)");
        }

        return getByIdCall(version, orgId, issueId, _callback);

    }


    private ApiResponse<IssuesGetByIssueIdResponse> getByIdWithHttpInfo(String version, UUID orgId, UUID issueId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, issueId, null);
        Type localVarReturnType = new TypeToken<IssuesGetByIssueIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String version, UUID orgId, UUID issueId, final ApiCallback<IssuesGetByIssueIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, issueId, _callback);
        Type localVarReturnType = new TypeToken<IssuesGetByIssueIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID issueId;

        private GetByIdRequestBuilder(String version, UUID orgId, UUID issueId) {
            this.version = version;
            this.orgId = orgId;
            this.issueId = issueId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(version, orgId, issueId, _callback);
        }


        /**
         * Execute getById request
         * @return IssuesGetByIssueIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesGetByIssueIdResponse execute() throws ApiException {
            ApiResponse<IssuesGetByIssueIdResponse> localVarResp = getByIdWithHttpInfo(version, orgId, issueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;IssuesGetByIssueIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesGetByIssueIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(version, orgId, issueId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesGetByIssueIdResponse> _callback) throws ApiException {
            return getByIdAsync(version, orgId, issueId, _callback);
        }
    }

    /**
     * Get an issue
     * Get an issue
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param issueId Issue ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String version, UUID orgId, UUID issueId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (issueId == null) throw new IllegalArgumentException("\"issueId\" is required but got null");
            

        return new GetByIdRequestBuilder(version, orgId, issueId);
    }
    private okhttp3.Call getByIssueIdCall(String version, UUID groupId, UUID issueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/issues/{issue_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "issue_id" + "}", localVarApiClient.escapeString(issueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIssueIdValidateBeforeCall(String version, UUID groupId, UUID issueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getByIssueId(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getByIssueId(Async)");
        }

        // verify the required parameter 'issueId' is set
        if (issueId == null) {
            throw new ApiException("Missing the required parameter 'issueId' when calling getByIssueId(Async)");
        }

        return getByIssueIdCall(version, groupId, issueId, _callback);

    }


    private ApiResponse<IssuesGetByIssueIdResponse> getByIssueIdWithHttpInfo(String version, UUID groupId, UUID issueId) throws ApiException {
        okhttp3.Call localVarCall = getByIssueIdValidateBeforeCall(version, groupId, issueId, null);
        Type localVarReturnType = new TypeToken<IssuesGetByIssueIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIssueIdAsync(String version, UUID groupId, UUID issueId, final ApiCallback<IssuesGetByIssueIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIssueIdValidateBeforeCall(version, groupId, issueId, _callback);
        Type localVarReturnType = new TypeToken<IssuesGetByIssueIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIssueIdRequestBuilder {
        private final String version;
        private final UUID groupId;
        private final UUID issueId;

        private GetByIssueIdRequestBuilder(String version, UUID groupId, UUID issueId) {
            this.version = version;
            this.groupId = groupId;
            this.issueId = issueId;
        }

        /**
         * Build call for getByIssueId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIssueIdCall(version, groupId, issueId, _callback);
        }


        /**
         * Execute getByIssueId request
         * @return IssuesGetByIssueIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesGetByIssueIdResponse execute() throws ApiException {
            ApiResponse<IssuesGetByIssueIdResponse> localVarResp = getByIssueIdWithHttpInfo(version, groupId, issueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIssueId request with HTTP info returned
         * @return ApiResponse&lt;IssuesGetByIssueIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesGetByIssueIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIssueIdWithHttpInfo(version, groupId, issueId);
        }

        /**
         * Execute getByIssueId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesGetByIssueIdResponse> _callback) throws ApiException {
            return getByIssueIdAsync(version, groupId, issueId, _callback);
        }
    }

    /**
     * Get an issue
     * Get an issue
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Group ID (required)
     * @param issueId Issue ID (required)
     * @return GetByIssueIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an instance of an issue </td><td>  * deprecation -  <br>  * location - A header providing a URL for the location of a resource  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByIssueIdRequestBuilder getByIssueId(String version, UUID groupId, UUID issueId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (issueId == null) throw new IllegalArgumentException("\"issueId\" is required but got null");
            

        return new GetByIssueIdRequestBuilder(version, groupId, issueId);
    }
    private okhttp3.Call listByOrgIdCall(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/issues"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (scanItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scan_item.id", scanItemId));
        }

        if (scanItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scan_item.type", scanItemType));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (updatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_before", updatedBefore));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_after", updatedAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_before", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_after", createdAfter));
        }

        if (effectiveSeverityLevel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "effective_severity_level", effectiveSeverityLevel));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (ignored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignored", ignored));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByOrgIdValidateBeforeCall(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listByOrgId(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listByOrgId(Async)");
        }

        return listByOrgIdCall(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);

    }


    private ApiResponse<IssuesByGroupIdResponse> listByOrgIdWithHttpInfo(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored) throws ApiException {
        okhttp3.Call localVarCall = listByOrgIdValidateBeforeCall(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, null);
        Type localVarReturnType = new TypeToken<IssuesByGroupIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByOrgIdAsync(String version, UUID orgId, String startingAfter, String endingBefore, Integer limit, UUID scanItemId, ScanItemType scanItemType, TypeDef type, OffsetDateTime updatedBefore, OffsetDateTime updatedAfter, OffsetDateTime createdBefore, OffsetDateTime createdAfter, List<String> effectiveSeverityLevel, List<String> status, Boolean ignored, final ApiCallback<IssuesByGroupIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByOrgIdValidateBeforeCall(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        Type localVarReturnType = new TypeToken<IssuesByGroupIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByOrgIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private UUID scanItemId;
        private ScanItemType scanItemType;
        private TypeDef type;
        private OffsetDateTime updatedBefore;
        private OffsetDateTime updatedAfter;
        private OffsetDateTime createdBefore;
        private OffsetDateTime createdAfter;
        private List<String> effectiveSeverityLevel;
        private List<String> status;
        private Boolean ignored;

        private ListByOrgIdRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set scanItemId
         * @param scanItemId A scan item id to filter issues through their scan item relationship. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder scanItemId(UUID scanItemId) {
            this.scanItemId = scanItemId;
            return this;
        }
        
        /**
         * Set scanItemType
         * @param scanItemType A scan item types to filter issues through their scan item relationship. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder scanItemType(ScanItemType scanItemType) {
            this.scanItemType = scanItemType;
            return this;
        }
        
        /**
         * Set type
         * @param type An issue type to filter issues. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder type(TypeDef type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set updatedBefore
         * @param updatedBefore A filter to select issues updated before this date. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder updatedBefore(OffsetDateTime updatedBefore) {
            this.updatedBefore = updatedBefore;
            return this;
        }
        
        /**
         * Set updatedAfter
         * @param updatedAfter A filter to select issues updated after this date. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder updatedAfter(OffsetDateTime updatedAfter) {
            this.updatedAfter = updatedAfter;
            return this;
        }
        
        /**
         * Set createdBefore
         * @param createdBefore A filter to select issues created before this date. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder createdBefore(OffsetDateTime createdBefore) {
            this.createdBefore = createdBefore;
            return this;
        }
        
        /**
         * Set createdAfter
         * @param createdAfter A filter to select issues created after this date. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder createdAfter(OffsetDateTime createdAfter) {
            this.createdAfter = createdAfter;
            return this;
        }
        
        /**
         * Set effectiveSeverityLevel
         * @param effectiveSeverityLevel One or more effective severity levels to filter issues. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder effectiveSeverityLevel(List<String> effectiveSeverityLevel) {
            this.effectiveSeverityLevel = effectiveSeverityLevel;
            return this;
        }
        
        /**
         * Set status
         * @param status An issue&#39;s status (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder status(List<String> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set ignored
         * @param ignored Whether an issue is ignored or not. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder ignored(Boolean ignored) {
            this.ignored = ignored;
            return this;
        }
        
        /**
         * Build call for listByOrgId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByOrgIdCall(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        }


        /**
         * Execute listByOrgId request
         * @return IssuesByGroupIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesByGroupIdResponse execute() throws ApiException {
            ApiResponse<IssuesByGroupIdResponse> localVarResp = listByOrgIdWithHttpInfo(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByOrgId request with HTTP info returned
         * @return ApiResponse&lt;IssuesByGroupIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesByGroupIdResponse> executeWithHttpInfo() throws ApiException {
            return listByOrgIdWithHttpInfo(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored);
        }

        /**
         * Execute listByOrgId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesByGroupIdResponse> _callback) throws ApiException {
            return listByOrgIdAsync(version, orgId, startingAfter, endingBefore, limit, scanItemId, scanItemType, type, updatedBefore, updatedAfter, createdBefore, createdAfter, effectiveSeverityLevel, status, ignored, _callback);
        }
    }

    /**
     * Get issues by org ID
     * Get a list of an organization&#39;s issues.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @return ListByOrgIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of issues. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListByOrgIdRequestBuilder listByOrgId(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListByOrgIdRequestBuilder(version, orgId);
    }
    private okhttp3.Call listByPackageCall(String version, String purl, UUID orgId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/packages/{purl}/issues"
            .replace("{" + "purl" + "}", localVarApiClient.escapeString(purl.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByPackageValidateBeforeCall(String version, String purl, UUID orgId, Double offset, Double limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listByPackage(Async)");
        }

        // verify the required parameter 'purl' is set
        if (purl == null) {
            throw new ApiException("Missing the required parameter 'purl' when calling listByPackage(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listByPackage(Async)");
        }

        return listByPackageCall(version, purl, orgId, offset, limit, _callback);

    }


    private ApiResponse<IssuesResponse> listByPackageWithHttpInfo(String version, String purl, UUID orgId, Double offset, Double limit) throws ApiException {
        okhttp3.Call localVarCall = listByPackageValidateBeforeCall(version, purl, orgId, offset, limit, null);
        Type localVarReturnType = new TypeToken<IssuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByPackageAsync(String version, String purl, UUID orgId, Double offset, Double limit, final ApiCallback<IssuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByPackageValidateBeforeCall(version, purl, orgId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<IssuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByPackageRequestBuilder {
        private final String version;
        private final String purl;
        private final UUID orgId;
        private Double offset;
        private Double limit;

        private ListByPackageRequestBuilder(String version, String purl, UUID orgId) {
            this.version = version;
            this.purl = purl;
            this.orgId = orgId;
        }

        /**
         * Set offset
         * @param offset Specify the number of results to skip before returning results. Must be greater than or equal to 0. Default is 0. (optional)
         * @return ListByPackageRequestBuilder
         */
        public ListByPackageRequestBuilder offset(Double offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Specify the number of results to return. Must be greater than 0 and less than 1000. Default is 1000. (optional)
         * @return ListByPackageRequestBuilder
         */
        public ListByPackageRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listByPackage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByPackageCall(version, purl, orgId, offset, limit, _callback);
        }


        /**
         * Execute listByPackage request
         * @return IssuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesResponse execute() throws ApiException {
            ApiResponse<IssuesResponse> localVarResp = listByPackageWithHttpInfo(version, purl, orgId, offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByPackage request with HTTP info returned
         * @return ApiResponse&lt;IssuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesResponse> executeWithHttpInfo() throws ApiException {
            return listByPackageWithHttpInfo(version, purl, orgId, offset, limit);
        }

        /**
         * Execute listByPackage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesResponse> _callback) throws ApiException {
            return listByPackageAsync(version, purl, orgId, offset, limit, _callback);
        }
    }

    /**
     * List issues for a package
     * Query issues for a specific package version identified by Package URL (purl). Snyk returns only direct vulnerabilities. Transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
     * @param version The requested version of the endpoint to process the request (required)
     * @param purl A URI-encoded Package URL (purl). Supported purl types are apk, cargo, cocoapods, composer, deb, gem, generic, golang, hex, maven, npm, nuget, pub, pypi, rpm, and swift. A version for the package is also required. (required)
     * @param orgId Unique identifier for an organization (required)
     * @return ListByPackageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of issues </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListByPackageRequestBuilder listByPackage(String version, String purl, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (purl == null) throw new IllegalArgumentException("\"purl\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListByPackageRequestBuilder(version, purl, orgId);
    }
    private okhttp3.Call queryForPackagesCall(String version, UUID orgId, BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkPackageUrlsRequestBody;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/packages/issues"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryForPackagesValidateBeforeCall(String version, UUID orgId, BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling queryForPackages(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling queryForPackages(Async)");
        }

        // verify the required parameter 'bulkPackageUrlsRequestBody' is set
        if (bulkPackageUrlsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'bulkPackageUrlsRequestBody' when calling queryForPackages(Async)");
        }

        return queryForPackagesCall(version, orgId, bulkPackageUrlsRequestBody, _callback);

    }


    private ApiResponse<IssuesWithPurlsResponse> queryForPackagesWithHttpInfo(String version, UUID orgId, BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = queryForPackagesValidateBeforeCall(version, orgId, bulkPackageUrlsRequestBody, null);
        Type localVarReturnType = new TypeToken<IssuesWithPurlsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryForPackagesAsync(String version, UUID orgId, BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody, final ApiCallback<IssuesWithPurlsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryForPackagesValidateBeforeCall(version, orgId, bulkPackageUrlsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<IssuesWithPurlsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryForPackagesRequestBuilder {
        private final BulkPackageUrlsRequestBodyData data;
        private final String version;
        private final UUID orgId;

        private QueryForPackagesRequestBuilder(BulkPackageUrlsRequestBodyData data, String version, UUID orgId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for queryForPackages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues with the purl identifier of the package that caused them </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody = buildBodyParams();
            return queryForPackagesCall(version, orgId, bulkPackageUrlsRequestBody, _callback);
        }

        private BulkPackageUrlsRequestBody buildBodyParams() {
            BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody = new BulkPackageUrlsRequestBody();
            bulkPackageUrlsRequestBody.data(this.data);
            return bulkPackageUrlsRequestBody;
        }

        /**
         * Execute queryForPackages request
         * @return IssuesWithPurlsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues with the purl identifier of the package that caused them </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public IssuesWithPurlsResponse execute() throws ApiException {
            BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody = buildBodyParams();
            ApiResponse<IssuesWithPurlsResponse> localVarResp = queryForPackagesWithHttpInfo(version, orgId, bulkPackageUrlsRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryForPackages request with HTTP info returned
         * @return ApiResponse&lt;IssuesWithPurlsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues with the purl identifier of the package that caused them </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<IssuesWithPurlsResponse> executeWithHttpInfo() throws ApiException {
            BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody = buildBodyParams();
            return queryForPackagesWithHttpInfo(version, orgId, bulkPackageUrlsRequestBody);
        }

        /**
         * Execute queryForPackages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an array of issues with the purl identifier of the package that caused them </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IssuesWithPurlsResponse> _callback) throws ApiException {
            BulkPackageUrlsRequestBody bulkPackageUrlsRequestBody = buildBodyParams();
            return queryForPackagesAsync(version, orgId, bulkPackageUrlsRequestBody, _callback);
        }
    }

    /**
     * List issues for a given set of packages  (Currently not available to all customers)
     * This endpoint is not available to all customers. If you are interested please contact support. Query issues for a batch of packages identified by Package URL (purl). Only direct vulnerabilities are returned, transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Unique identifier for an organization (required)
     * @param bulkPackageUrlsRequestBody  (required)
     * @return QueryForPackagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of issues with the purl identifier of the package that caused them </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public QueryForPackagesRequestBuilder queryForPackages(BulkPackageUrlsRequestBodyData data, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new QueryForPackagesRequestBuilder(data, version, orgId);
    }
}

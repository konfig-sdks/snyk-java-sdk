/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrgsGetDetailsResponse;
import com.konfigthis.client.model.OrgsListAccessibleOrganizationsResponse;
import com.konfigthis.client.model.OrgsListGroupOrgsResponse;
import com.konfigthis.client.model.OrgsUpdateDetailsRequest;
import com.konfigthis.client.model.OrgsUpdateDetailsRequestData;
import com.konfigthis.client.model.OrgsUpdateDetailsResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailsCall(String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String version, UUID orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDetails(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDetails(Async)");
        }

        return getDetailsCall(version, orgId, _callback);

    }


    private ApiResponse<OrgsGetDetailsResponse> getDetailsWithHttpInfo(String version, UUID orgId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(version, orgId, null);
        Type localVarReturnType = new TypeToken<OrgsGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String version, UUID orgId, final ApiCallback<OrgsGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(version, orgId, _callback);
        Type localVarReturnType = new TypeToken<OrgsGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String version;
        private final UUID orgId;

        private GetDetailsRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(version, orgId, _callback);
        }


        /**
         * Execute getDetails request
         * @return OrgsGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public OrgsGetDetailsResponse execute() throws ApiException {
            ApiResponse<OrgsGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(version, orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;OrgsGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<OrgsGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(version, orgId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an instance of an organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgsGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(version, orgId, _callback);
        }
    }

    /**
     * Get organization
     * Get the full details of an organization.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Unique identifier for org (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an instance of an organization </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetDetailsRequestBuilder(version, orgId);
    }
    private okhttp3.Call listAccessibleOrganizationsCall(String version, String startingAfter, String endingBefore, Integer limit, UUID groupId, Boolean isPersonal, String slug, String name, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (isPersonal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_personal", isPersonal));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessibleOrganizationsValidateBeforeCall(String version, String startingAfter, String endingBefore, Integer limit, UUID groupId, Boolean isPersonal, String slug, String name, List<String> expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listAccessibleOrganizations(Async)");
        }

        return listAccessibleOrganizationsCall(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand, _callback);

    }


    private ApiResponse<OrgsListAccessibleOrganizationsResponse> listAccessibleOrganizationsWithHttpInfo(String version, String startingAfter, String endingBefore, Integer limit, UUID groupId, Boolean isPersonal, String slug, String name, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = listAccessibleOrganizationsValidateBeforeCall(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand, null);
        Type localVarReturnType = new TypeToken<OrgsListAccessibleOrganizationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccessibleOrganizationsAsync(String version, String startingAfter, String endingBefore, Integer limit, UUID groupId, Boolean isPersonal, String slug, String name, List<String> expand, final ApiCallback<OrgsListAccessibleOrganizationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessibleOrganizationsValidateBeforeCall(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand, _callback);
        Type localVarReturnType = new TypeToken<OrgsListAccessibleOrganizationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccessibleOrganizationsRequestBuilder {
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private UUID groupId;
        private Boolean isPersonal;
        private String slug;
        private String name;
        private List<String> expand;

        private ListAccessibleOrganizationsRequestBuilder(String version) {
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId If set, only return organizations within the specified group (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder groupId(UUID groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set isPersonal
         * @param isPersonal If true, only return organizations that are not part of a group. (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder isPersonal(Boolean isPersonal) {
            this.isPersonal = isPersonal;
            return this;
        }
        
        /**
         * Set slug
         * @param slug Only return orgs whose slug exactly matches this value. (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set name
         * @param name Only return orgs whose name contains this value. (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand the specified related resources in the response to include their attributes. (optional)
         * @return ListAccessibleOrganizationsRequestBuilder
         */
        public ListAccessibleOrganizationsRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listAccessibleOrganizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations you have access to. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccessibleOrganizationsCall(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand, _callback);
        }


        /**
         * Execute listAccessibleOrganizations request
         * @return OrgsListAccessibleOrganizationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations you have access to. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public OrgsListAccessibleOrganizationsResponse execute() throws ApiException {
            ApiResponse<OrgsListAccessibleOrganizationsResponse> localVarResp = listAccessibleOrganizationsWithHttpInfo(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccessibleOrganizations request with HTTP info returned
         * @return ApiResponse&lt;OrgsListAccessibleOrganizationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations you have access to. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<OrgsListAccessibleOrganizationsResponse> executeWithHttpInfo() throws ApiException {
            return listAccessibleOrganizationsWithHttpInfo(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand);
        }

        /**
         * Execute listAccessibleOrganizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations you have access to. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgsListAccessibleOrganizationsResponse> _callback) throws ApiException {
            return listAccessibleOrganizationsAsync(version, startingAfter, endingBefore, limit, groupId, isPersonal, slug, name, expand, _callback);
        }
    }

    /**
     * List accessible organizations
     * Get a paginated list of organizations you have access to.
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListAccessibleOrganizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organizations you have access to. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListAccessibleOrganizationsRequestBuilder listAccessibleOrganizations(String version) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListAccessibleOrganizationsRequestBuilder(version);
    }
    private okhttp3.Call listGroupOrgsCall(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, String name, String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/orgs"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupOrgsValidateBeforeCall(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, String name, String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listGroupOrgs(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listGroupOrgs(Async)");
        }

        return listGroupOrgsCall(version, groupId, startingAfter, endingBefore, limit, name, slug, _callback);

    }


    private ApiResponse<OrgsListGroupOrgsResponse> listGroupOrgsWithHttpInfo(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, String name, String slug) throws ApiException {
        okhttp3.Call localVarCall = listGroupOrgsValidateBeforeCall(version, groupId, startingAfter, endingBefore, limit, name, slug, null);
        Type localVarReturnType = new TypeToken<OrgsListGroupOrgsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupOrgsAsync(String version, UUID groupId, String startingAfter, String endingBefore, Integer limit, String name, String slug, final ApiCallback<OrgsListGroupOrgsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupOrgsValidateBeforeCall(version, groupId, startingAfter, endingBefore, limit, name, slug, _callback);
        Type localVarReturnType = new TypeToken<OrgsListGroupOrgsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupOrgsRequestBuilder {
        private final String version;
        private final UUID groupId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;
        private String name;
        private String slug;

        private ListGroupOrgsRequestBuilder(String version, UUID groupId) {
            this.version = version;
            this.groupId = groupId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListGroupOrgsRequestBuilder
         */
        public ListGroupOrgsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListGroupOrgsRequestBuilder
         */
        public ListGroupOrgsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListGroupOrgsRequestBuilder
         */
        public ListGroupOrgsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set name
         * @param name Only return organizations whose name contains this value. Case insensitive. (optional)
         * @return ListGroupOrgsRequestBuilder
         */
        public ListGroupOrgsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set slug
         * @param slug Only return organizations whose slug exactly matches this value. Case sensitive. (optional)
         * @return ListGroupOrgsRequestBuilder
         */
        public ListGroupOrgsRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Build call for listGroupOrgs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations in the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupOrgsCall(version, groupId, startingAfter, endingBefore, limit, name, slug, _callback);
        }


        /**
         * Execute listGroupOrgs request
         * @return OrgsListGroupOrgsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations in the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public OrgsListGroupOrgsResponse execute() throws ApiException {
            ApiResponse<OrgsListGroupOrgsResponse> localVarResp = listGroupOrgsWithHttpInfo(version, groupId, startingAfter, endingBefore, limit, name, slug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroupOrgs request with HTTP info returned
         * @return ApiResponse&lt;OrgsListGroupOrgsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations in the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<OrgsListGroupOrgsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupOrgsWithHttpInfo(version, groupId, startingAfter, endingBefore, limit, name, slug);
        }

        /**
         * Execute listGroupOrgs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of organizations in the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgsListGroupOrgsResponse> _callback) throws ApiException {
            return listGroupOrgsAsync(version, groupId, startingAfter, endingBefore, limit, name, slug, _callback);
        }
    }

    /**
     * List all organizations in group
     * Get a paginated list of all the organizations belonging to the group. By default, this endpoint returns the organizations in alphabetical order of their name.
     * @param version The requested version of the endpoint to process the request (required)
     * @param groupId Unique identifier for group (required)
     * @return ListGroupOrgsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of organizations in the group. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListGroupOrgsRequestBuilder listGroupOrgs(String version, UUID groupId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new ListGroupOrgsRequestBuilder(version, groupId);
    }
    private okhttp3.Call updateDetailsCall(String version, UUID orgId, OrgsUpdateDetailsRequest orgsUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgsUpdateDetailsRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String version, UUID orgId, OrgsUpdateDetailsRequest orgsUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateDetails(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(version, orgId, orgsUpdateDetailsRequest, _callback);

    }


    private ApiResponse<OrgsUpdateDetailsResponse> updateDetailsWithHttpInfo(String version, UUID orgId, OrgsUpdateDetailsRequest orgsUpdateDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(version, orgId, orgsUpdateDetailsRequest, null);
        Type localVarReturnType = new TypeToken<OrgsUpdateDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String version, UUID orgId, OrgsUpdateDetailsRequest orgsUpdateDetailsRequest, final ApiCallback<OrgsUpdateDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(version, orgId, orgsUpdateDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<OrgsUpdateDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final OrgsUpdateDetailsRequestData data;
        private final String version;
        private final UUID orgId;

        private UpdateDetailsRequestBuilder(OrgsUpdateDetailsRequestData data, String version, UUID orgId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instance of org is updated </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
            <tr><td> 204 </td><td> The operation completed successfully with no content </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrgsUpdateDetailsRequest orgsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsCall(version, orgId, orgsUpdateDetailsRequest, _callback);
        }

        private OrgsUpdateDetailsRequest buildBodyParams() {
            OrgsUpdateDetailsRequest orgsUpdateDetailsRequest = new OrgsUpdateDetailsRequest();
            orgsUpdateDetailsRequest.data(this.data);
            return orgsUpdateDetailsRequest;
        }

        /**
         * Execute updateDetails request
         * @return OrgsUpdateDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instance of org is updated </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
            <tr><td> 204 </td><td> The operation completed successfully with no content </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public OrgsUpdateDetailsResponse execute() throws ApiException {
            OrgsUpdateDetailsRequest orgsUpdateDetailsRequest = buildBodyParams();
            ApiResponse<OrgsUpdateDetailsResponse> localVarResp = updateDetailsWithHttpInfo(version, orgId, orgsUpdateDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;OrgsUpdateDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instance of org is updated </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
            <tr><td> 204 </td><td> The operation completed successfully with no content </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<OrgsUpdateDetailsResponse> executeWithHttpInfo() throws ApiException {
            OrgsUpdateDetailsRequest orgsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(version, orgId, orgsUpdateDetailsRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Instance of org is updated </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
            <tr><td> 204 </td><td> The operation completed successfully with no content </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgsUpdateDetailsResponse> _callback) throws ApiException {
            OrgsUpdateDetailsRequest orgsUpdateDetailsRequest = buildBodyParams();
            return updateDetailsAsync(version, orgId, orgsUpdateDetailsRequest, _callback);
        }
    }

    /**
     * Update organization
     * Update the details of an organization
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Unique identifier for org (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Instance of org is updated </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
        <tr><td> 204 </td><td> The operation completed successfully with no content </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(OrgsUpdateDetailsRequestData data, String version, UUID orgId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(data, version, orgId);
    }
}

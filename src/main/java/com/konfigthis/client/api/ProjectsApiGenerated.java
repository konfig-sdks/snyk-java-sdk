/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PatchProjectRequest;
import com.konfigthis.client.model.PatchProjectRequestData;
import com.konfigthis.client.model.ProjectsGetByProjectIdResponse;
import com.konfigthis.client.model.ProjectsListForOrgResponse;
import com.konfigthis.client.model.ProjectsUpdateByProjectIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteByProjectIdCall(UUID orgId, UUID projectId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByProjectIdValidateBeforeCall(UUID orgId, UUID projectId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteByProjectId(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteByProjectId(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteByProjectId(Async)");
        }

        return deleteByProjectIdCall(orgId, projectId, version, _callback);

    }


    private ApiResponse<Void> deleteByProjectIdWithHttpInfo(UUID orgId, UUID projectId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteByProjectIdValidateBeforeCall(orgId, projectId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByProjectIdAsync(UUID orgId, UUID projectId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByProjectIdValidateBeforeCall(orgId, projectId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByProjectIdRequestBuilder {
        private final UUID orgId;
        private final UUID projectId;
        private final String version;

        private DeleteByProjectIdRequestBuilder(UUID orgId, UUID projectId, String version) {
            this.orgId = orgId;
            this.projectId = projectId;
            this.version = version;
        }

        /**
         * Build call for deleteByProjectId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The project has been deleted </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByProjectIdCall(orgId, projectId, version, _callback);
        }


        /**
         * Execute deleteByProjectId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The project has been deleted </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByProjectIdWithHttpInfo(orgId, projectId, version);
        }

        /**
         * Execute deleteByProjectId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The project has been deleted </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByProjectIdWithHttpInfo(orgId, projectId, version);
        }

        /**
         * Execute deleteByProjectId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The project has been deleted </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByProjectIdAsync(orgId, projectId, version, _callback);
        }
    }

    /**
     * Delete project by project ID.
     * Delete one project in the organization by project ID.
     * @param orgId The ID of the org to which the project belongs to. (required)
     * @param projectId The ID of the project. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return DeleteByProjectIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project has been deleted </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public DeleteByProjectIdRequestBuilder deleteByProjectId(UUID orgId, UUID projectId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new DeleteByProjectIdRequestBuilder(orgId, projectId, version);
    }
    private okhttp3.Call getByProjectIdCall(UUID orgId, UUID projectId, String version, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (metaLatestIssueCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta.latest_issue_counts", metaLatestIssueCounts));
        }

        if (metaLatestDependencyTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta.latest_dependency_total", metaLatestDependencyTotal));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByProjectIdValidateBeforeCall(UUID orgId, UUID projectId, String version, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByProjectId(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getByProjectId(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getByProjectId(Async)");
        }

        return getByProjectIdCall(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal, _callback);

    }


    private ApiResponse<ProjectsGetByProjectIdResponse> getByProjectIdWithHttpInfo(UUID orgId, UUID projectId, String version, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal) throws ApiException {
        okhttp3.Call localVarCall = getByProjectIdValidateBeforeCall(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal, null);
        Type localVarReturnType = new TypeToken<ProjectsGetByProjectIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByProjectIdAsync(UUID orgId, UUID projectId, String version, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, final ApiCallback<ProjectsGetByProjectIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByProjectIdValidateBeforeCall(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetByProjectIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByProjectIdRequestBuilder {
        private final UUID orgId;
        private final UUID projectId;
        private final String version;
        private List<String> expand;
        private Boolean metaLatestIssueCounts;
        private Boolean metaLatestDependencyTotal;

        private GetByProjectIdRequestBuilder(UUID orgId, UUID projectId, String version) {
            this.orgId = orgId;
            this.projectId = projectId;
            this.version = version;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return GetByProjectIdRequestBuilder
         */
        public GetByProjectIdRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set metaLatestIssueCounts
         * @param metaLatestIssueCounts Include a summary count for the issues found in the most recent scan of this project (optional)
         * @return GetByProjectIdRequestBuilder
         */
        public GetByProjectIdRequestBuilder metaLatestIssueCounts(Boolean metaLatestIssueCounts) {
            this.metaLatestIssueCounts = metaLatestIssueCounts;
            return this;
        }
        
        /**
         * Set metaLatestDependencyTotal
         * @param metaLatestDependencyTotal Include the total number of dependencies found in the most recent scan of this project (optional)
         * @return GetByProjectIdRequestBuilder
         */
        public GetByProjectIdRequestBuilder metaLatestDependencyTotal(Boolean metaLatestDependencyTotal) {
            this.metaLatestDependencyTotal = metaLatestDependencyTotal;
            return this;
        }
        
        /**
         * Build call for getByProjectId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByProjectIdCall(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal, _callback);
        }


        /**
         * Execute getByProjectId request
         * @return ProjectsGetByProjectIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ProjectsGetByProjectIdResponse execute() throws ApiException {
            ApiResponse<ProjectsGetByProjectIdResponse> localVarResp = getByProjectIdWithHttpInfo(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByProjectId request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetByProjectIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetByProjectIdResponse> executeWithHttpInfo() throws ApiException {
            return getByProjectIdWithHttpInfo(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal);
        }

        /**
         * Execute getByProjectId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetByProjectIdResponse> _callback) throws ApiException {
            return getByProjectIdAsync(orgId, projectId, version, expand, metaLatestIssueCounts, metaLatestDependencyTotal, _callback);
        }
    }

    /**
     * Get project by project ID.
     * Get one project of the organization by project ID.
     * @param orgId The ID of the org to which the project belongs to. (required)
     * @param projectId The ID of the project. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return GetByProjectIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByProjectIdRequestBuilder getByProjectId(UUID orgId, UUID projectId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new GetByProjectIdRequestBuilder(orgId, projectId, version);
    }
    private okhttp3.Call listForOrgCall(UUID orgId, String version, List<UUID> targetId, String targetReference, String targetFile, String targetRuntime, String metaCount, List<UUID> ids, List<String> names, List<String> namesStartWith, List<String> origins, List<String> types, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, OffsetDateTime cliMonitoredBefore, OffsetDateTime cliMonitoredAfter, List<String> importingUserPublicId, List<String> tags, List<String> businessCriticality, List<String> environment, List<String> lifecycle, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/projects"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target_id", targetId));
        }

        if (targetReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_reference", targetReference));
        }

        if (targetFile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_file", targetFile));
        }

        if (targetRuntime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_runtime", targetRuntime));
        }

        if (metaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_count", metaCount));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "names", names));
        }

        if (namesStartWith != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "names_start_with", namesStartWith));
        }

        if (origins != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "origins", origins));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "types", types));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        if (metaLatestIssueCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta.latest_issue_counts", metaLatestIssueCounts));
        }

        if (metaLatestDependencyTotal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta.latest_dependency_total", metaLatestDependencyTotal));
        }

        if (cliMonitoredBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cli_monitored_before", cliMonitoredBefore));
        }

        if (cliMonitoredAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cli_monitored_after", cliMonitoredAfter));
        }

        if (importingUserPublicId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "importing_user_public_id", importingUserPublicId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        if (businessCriticality != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "business_criticality", businessCriticality));
        }

        if (environment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "environment", environment));
        }

        if (lifecycle != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "lifecycle", lifecycle));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForOrgValidateBeforeCall(UUID orgId, String version, List<UUID> targetId, String targetReference, String targetFile, String targetRuntime, String metaCount, List<UUID> ids, List<String> names, List<String> namesStartWith, List<String> origins, List<String> types, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, OffsetDateTime cliMonitoredBefore, OffsetDateTime cliMonitoredAfter, List<String> importingUserPublicId, List<String> tags, List<String> businessCriticality, List<String> environment, List<String> lifecycle, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listForOrg(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listForOrg(Async)");
        }

        return listForOrgCall(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<ProjectsListForOrgResponse> listForOrgWithHttpInfo(UUID orgId, String version, List<UUID> targetId, String targetReference, String targetFile, String targetRuntime, String metaCount, List<UUID> ids, List<String> names, List<String> namesStartWith, List<String> origins, List<String> types, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, OffsetDateTime cliMonitoredBefore, OffsetDateTime cliMonitoredAfter, List<String> importingUserPublicId, List<String> tags, List<String> businessCriticality, List<String> environment, List<String> lifecycle, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listForOrgValidateBeforeCall(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<ProjectsListForOrgResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForOrgAsync(UUID orgId, String version, List<UUID> targetId, String targetReference, String targetFile, String targetRuntime, String metaCount, List<UUID> ids, List<String> names, List<String> namesStartWith, List<String> origins, List<String> types, List<String> expand, Boolean metaLatestIssueCounts, Boolean metaLatestDependencyTotal, OffsetDateTime cliMonitoredBefore, OffsetDateTime cliMonitoredAfter, List<String> importingUserPublicId, List<String> tags, List<String> businessCriticality, List<String> environment, List<String> lifecycle, String startingAfter, String endingBefore, Integer limit, final ApiCallback<ProjectsListForOrgResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForOrgValidateBeforeCall(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<ProjectsListForOrgResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForOrgRequestBuilder {
        private final UUID orgId;
        private final String version;
        private List<UUID> targetId;
        private String targetReference;
        private String targetFile;
        private String targetRuntime;
        private String metaCount;
        private List<UUID> ids;
        private List<String> names;
        private List<String> namesStartWith;
        private List<String> origins;
        private List<String> types;
        private List<String> expand;
        private Boolean metaLatestIssueCounts;
        private Boolean metaLatestDependencyTotal;
        private OffsetDateTime cliMonitoredBefore;
        private OffsetDateTime cliMonitoredAfter;
        private List<String> importingUserPublicId;
        private List<String> tags;
        private List<String> businessCriticality;
        private List<String> environment;
        private List<String> lifecycle;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListForOrgRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set targetId
         * @param targetId Return projects that belong to the provided targets (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder targetId(List<UUID> targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetReference
         * @param targetReference Return projects that match the provided target reference (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder targetReference(String targetReference) {
            this.targetReference = targetReference;
            return this;
        }
        
        /**
         * Set targetFile
         * @param targetFile Return projects that match the provided target file (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder targetFile(String targetFile) {
            this.targetFile = targetFile;
            return this;
        }
        
        /**
         * Set targetRuntime
         * @param targetRuntime Return projects that match the provided target runtime (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder targetRuntime(String targetRuntime) {
            this.targetRuntime = targetRuntime;
            return this;
        }
        
        /**
         * Set metaCount
         * @param metaCount The collection count. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder metaCount(String metaCount) {
            this.metaCount = metaCount;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Return projects that match the provided IDs. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder ids(List<UUID> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set names
         * @param names Return projects that match the provided names. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder names(List<String> names) {
            this.names = names;
            return this;
        }
        
        /**
         * Set namesStartWith
         * @param namesStartWith Return projects with names starting with the specified prefix. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder namesStartWith(List<String> namesStartWith) {
            this.namesStartWith = namesStartWith;
            return this;
        }
        
        /**
         * Set origins
         * @param origins Return projects that match the provided origins. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder origins(List<String> origins) {
            this.origins = origins;
            return this;
        }
        
        /**
         * Set types
         * @param types Return projects that match the provided types. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder types(List<String> types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set metaLatestIssueCounts
         * @param metaLatestIssueCounts Include a summary count for the issues found in the most recent scan of this project (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder metaLatestIssueCounts(Boolean metaLatestIssueCounts) {
            this.metaLatestIssueCounts = metaLatestIssueCounts;
            return this;
        }
        
        /**
         * Set metaLatestDependencyTotal
         * @param metaLatestDependencyTotal Include the total number of dependencies found in the most recent scan of this project (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder metaLatestDependencyTotal(Boolean metaLatestDependencyTotal) {
            this.metaLatestDependencyTotal = metaLatestDependencyTotal;
            return this;
        }
        
        /**
         * Set cliMonitoredBefore
         * @param cliMonitoredBefore Filter projects uploaded and monitored before this date (encoded value) (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder cliMonitoredBefore(OffsetDateTime cliMonitoredBefore) {
            this.cliMonitoredBefore = cliMonitoredBefore;
            return this;
        }
        
        /**
         * Set cliMonitoredAfter
         * @param cliMonitoredAfter Filter projects uploaded and monitored after this date (encoded value) (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder cliMonitoredAfter(OffsetDateTime cliMonitoredAfter) {
            this.cliMonitoredAfter = cliMonitoredAfter;
            return this;
        }
        
        /**
         * Set importingUserPublicId
         * @param importingUserPublicId Return projects that match the provided importing user public ids. (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder importingUserPublicId(List<String> importingUserPublicId) {
            this.importingUserPublicId = importingUserPublicId;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Return projects that match all the provided tags (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set businessCriticality
         * @param businessCriticality Return projects that match all the provided business_criticality value (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder businessCriticality(List<String> businessCriticality) {
            this.businessCriticality = businessCriticality;
            return this;
        }
        
        /**
         * Set environment
         * @param environment Return projects that match all the provided environment values (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder environment(List<String> environment) {
            this.environment = environment;
            return this;
        }
        
        /**
         * Set lifecycle
         * @param lifecycle Return projects that match all the provided lifecycle values (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder lifecycle(List<String> lifecycle) {
            this.lifecycle = lifecycle;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListForOrgRequestBuilder
         */
        public ListForOrgRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listForOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of projects is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForOrgCall(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listForOrg request
         * @return ProjectsListForOrgResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of projects is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ProjectsListForOrgResponse execute() throws ApiException {
            ApiResponse<ProjectsListForOrgResponse> localVarResp = listForOrgWithHttpInfo(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForOrg request with HTTP info returned
         * @return ApiResponse&lt;ProjectsListForOrgResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of projects is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsListForOrgResponse> executeWithHttpInfo() throws ApiException {
            return listForOrgWithHttpInfo(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listForOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of projects is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsListForOrgResponse> _callback) throws ApiException {
            return listForOrgAsync(orgId, version, targetId, targetReference, targetFile, targetRuntime, metaCount, ids, names, namesStartWith, origins, types, expand, metaLatestIssueCounts, metaLatestDependencyTotal, cliMonitoredBefore, cliMonitoredAfter, importingUserPublicId, tags, businessCriticality, environment, lifecycle, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * List all Projects for an Org with the given Org ID.
     * List all Projects for an Org.
     * @param orgId The ID of the org that the projects belong to. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListForOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of projects is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListForOrgRequestBuilder listForOrg(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListForOrgRequestBuilder(orgId, version);
    }
    private okhttp3.Call updateByProjectIdCall(String version, UUID orgId, UUID projectId, List<String> expand, PatchProjectRequest patchProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchProjectRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "expand", expand));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByProjectIdValidateBeforeCall(String version, UUID orgId, UUID projectId, List<String> expand, PatchProjectRequest patchProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateByProjectId(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateByProjectId(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateByProjectId(Async)");
        }

        return updateByProjectIdCall(version, orgId, projectId, expand, patchProjectRequest, _callback);

    }


    private ApiResponse<ProjectsUpdateByProjectIdResponse> updateByProjectIdWithHttpInfo(String version, UUID orgId, UUID projectId, List<String> expand, PatchProjectRequest patchProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByProjectIdValidateBeforeCall(version, orgId, projectId, expand, patchProjectRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsUpdateByProjectIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByProjectIdAsync(String version, UUID orgId, UUID projectId, List<String> expand, PatchProjectRequest patchProjectRequest, final ApiCallback<ProjectsUpdateByProjectIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByProjectIdValidateBeforeCall(version, orgId, projectId, expand, patchProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsUpdateByProjectIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByProjectIdRequestBuilder {
        private final PatchProjectRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID projectId;
        private List<String> expand;

        private UpdateByProjectIdRequestBuilder(PatchProjectRequestData data, String version, UUID orgId, UUID projectId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.projectId = projectId;
        }

        /**
         * Set expand
         * @param expand Expand relationships. (optional)
         * @return UpdateByProjectIdRequestBuilder
         */
        public UpdateByProjectIdRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for updateByProjectId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is updated for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchProjectRequest patchProjectRequest = buildBodyParams();
            return updateByProjectIdCall(version, orgId, projectId, expand, patchProjectRequest, _callback);
        }

        private PatchProjectRequest buildBodyParams() {
            PatchProjectRequest patchProjectRequest = new PatchProjectRequest();
            patchProjectRequest.data(this.data);
            return patchProjectRequest;
        }

        /**
         * Execute updateByProjectId request
         * @return ProjectsUpdateByProjectIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is updated for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ProjectsUpdateByProjectIdResponse execute() throws ApiException {
            PatchProjectRequest patchProjectRequest = buildBodyParams();
            ApiResponse<ProjectsUpdateByProjectIdResponse> localVarResp = updateByProjectIdWithHttpInfo(version, orgId, projectId, expand, patchProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByProjectId request with HTTP info returned
         * @return ApiResponse&lt;ProjectsUpdateByProjectIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is updated for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsUpdateByProjectIdResponse> executeWithHttpInfo() throws ApiException {
            PatchProjectRequest patchProjectRequest = buildBodyParams();
            return updateByProjectIdWithHttpInfo(version, orgId, projectId, expand, patchProjectRequest);
        }

        /**
         * Execute updateByProjectId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A project is updated for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsUpdateByProjectIdResponse> _callback) throws ApiException {
            PatchProjectRequest patchProjectRequest = buildBodyParams();
            return updateByProjectIdAsync(version, orgId, projectId, expand, patchProjectRequest, _callback);
        }
    }

    /**
     * Updates project by project ID.
     * Updates one project of the organization by project ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The ID of the Org the project belongs to. (required)
     * @param projectId The ID of the project to patch. (required)
     * @return UpdateByProjectIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project is updated for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateByProjectIdRequestBuilder updateByProjectId(PatchProjectRequestData data, String version, UUID orgId, UUID projectId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new UpdateByProjectIdRequestBuilder(data, version, orgId, projectId);
    }
}

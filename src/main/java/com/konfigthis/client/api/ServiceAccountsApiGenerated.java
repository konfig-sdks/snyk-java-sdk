/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationRequest;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationRequestData;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationResponse;
import com.konfigthis.client.model.ServiceAccountsCreateGroupRequest;
import com.konfigthis.client.model.ServiceAccountsCreateGroupRequestData;
import com.konfigthis.client.model.ServiceAccountsCreateGroupResponse;
import com.konfigthis.client.model.ServiceAccountsGetGroupServiceAccountResponse;
import com.konfigthis.client.model.ServiceAccountsGetOrganizationAccountByIdResponse;
import com.konfigthis.client.model.ServiceAccountsListGroupServiceAccountsResponse;
import com.konfigthis.client.model.ServiceAccountsListOrganizationServiceAccountsResponse;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretRequest;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretRequestData;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretResponse;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdRequest;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdRequestData;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdResponse;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameRequest;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameRequestData;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ServiceAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createForOrganizationCall(UUID orgId, String version, ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsCreateForOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createForOrganizationValidateBeforeCall(UUID orgId, String version, ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createForOrganization(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createForOrganization(Async)");
        }

        // verify the required parameter 'serviceAccountsCreateForOrganizationRequest' is set
        if (serviceAccountsCreateForOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsCreateForOrganizationRequest' when calling createForOrganization(Async)");
        }

        return createForOrganizationCall(orgId, version, serviceAccountsCreateForOrganizationRequest, _callback);

    }


    private ApiResponse<ServiceAccountsCreateForOrganizationResponse> createForOrganizationWithHttpInfo(UUID orgId, String version, ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createForOrganizationValidateBeforeCall(orgId, version, serviceAccountsCreateForOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsCreateForOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createForOrganizationAsync(UUID orgId, String version, ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest, final ApiCallback<ServiceAccountsCreateForOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createForOrganizationValidateBeforeCall(orgId, version, serviceAccountsCreateForOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsCreateForOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateForOrganizationRequestBuilder {
        private final ServiceAccountsCreateForOrganizationRequestData data;
        private final UUID orgId;
        private final String version;

        private CreateForOrganizationRequestBuilder(ServiceAccountsCreateForOrganizationRequestData data, UUID orgId, String version) {
            this.data = data;
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Build call for createForOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest = buildBodyParams();
            return createForOrganizationCall(orgId, version, serviceAccountsCreateForOrganizationRequest, _callback);
        }

        private ServiceAccountsCreateForOrganizationRequest buildBodyParams() {
            ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest = new ServiceAccountsCreateForOrganizationRequest();
            serviceAccountsCreateForOrganizationRequest.data(this.data);
            return serviceAccountsCreateForOrganizationRequest;
        }

        /**
         * Execute createForOrganization request
         * @return ServiceAccountsCreateForOrganizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsCreateForOrganizationResponse execute() throws ApiException {
            ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest = buildBodyParams();
            ApiResponse<ServiceAccountsCreateForOrganizationResponse> localVarResp = createForOrganizationWithHttpInfo(orgId, version, serviceAccountsCreateForOrganizationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createForOrganization request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsCreateForOrganizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsCreateForOrganizationResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest = buildBodyParams();
            return createForOrganizationWithHttpInfo(orgId, version, serviceAccountsCreateForOrganizationRequest);
        }

        /**
         * Execute createForOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsCreateForOrganizationResponse> _callback) throws ApiException {
            ServiceAccountsCreateForOrganizationRequest serviceAccountsCreateForOrganizationRequest = buildBodyParams();
            return createForOrganizationAsync(orgId, version, serviceAccountsCreateForOrganizationRequest, _callback);
        }
    }

    /**
     * Create a service account for an organization.
     * Create a service account for an organization. The service account can be used to generate access tokens.
     * @param orgId The ID of the Snyk Organization that is creating and will own the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsCreateForOrganizationRequest  (required)
     * @return CreateForOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateForOrganizationRequestBuilder createForOrganization(ServiceAccountsCreateForOrganizationRequestData data, UUID orgId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new CreateForOrganizationRequestBuilder(data, orgId, version);
    }
    private okhttp3.Call createGroupCall(UUID groupId, String version, ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsCreateGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(UUID groupId, String version, ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createGroup(Async)");
        }

        // verify the required parameter 'serviceAccountsCreateGroupRequest' is set
        if (serviceAccountsCreateGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsCreateGroupRequest' when calling createGroup(Async)");
        }

        return createGroupCall(groupId, version, serviceAccountsCreateGroupRequest, _callback);

    }


    private ApiResponse<ServiceAccountsCreateGroupResponse> createGroupWithHttpInfo(UUID groupId, String version, ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupId, version, serviceAccountsCreateGroupRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsCreateGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGroupAsync(UUID groupId, String version, ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest, final ApiCallback<ServiceAccountsCreateGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupId, version, serviceAccountsCreateGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsCreateGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateGroupRequestBuilder {
        private final ServiceAccountsCreateGroupRequestData data;
        private final UUID groupId;
        private final String version;

        private CreateGroupRequestBuilder(ServiceAccountsCreateGroupRequestData data, UUID groupId, String version) {
            this.data = data;
            this.groupId = groupId;
            this.version = version;
        }

        /**
         * Build call for createGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest = buildBodyParams();
            return createGroupCall(groupId, version, serviceAccountsCreateGroupRequest, _callback);
        }

        private ServiceAccountsCreateGroupRequest buildBodyParams() {
            ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest = new ServiceAccountsCreateGroupRequest();
            serviceAccountsCreateGroupRequest.data(this.data);
            return serviceAccountsCreateGroupRequest;
        }

        /**
         * Execute createGroup request
         * @return ServiceAccountsCreateGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsCreateGroupResponse execute() throws ApiException {
            ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest = buildBodyParams();
            ApiResponse<ServiceAccountsCreateGroupResponse> localVarResp = createGroupWithHttpInfo(groupId, version, serviceAccountsCreateGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createGroup request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsCreateGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsCreateGroupResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest = buildBodyParams();
            return createGroupWithHttpInfo(groupId, version, serviceAccountsCreateGroupRequest);
        }

        /**
         * Execute createGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsCreateGroupResponse> _callback) throws ApiException {
            ServiceAccountsCreateGroupRequest serviceAccountsCreateGroupRequest = buildBodyParams();
            return createGroupAsync(groupId, version, serviceAccountsCreateGroupRequest, _callback);
        }
    }

    /**
     * Create a service account for a group.
     * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
     * @param groupId The ID of the Snyk Group that is creating and owns the service account (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsCreateGroupRequest  (required)
     * @return CreateGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A new service account has been created </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateGroupRequestBuilder createGroup(ServiceAccountsCreateGroupRequestData data, UUID groupId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new CreateGroupRequestBuilder(data, groupId, version);
    }
    private okhttp3.Call deleteGroupServiceAccountCall(UUID groupId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupServiceAccountValidateBeforeCall(UUID groupId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupServiceAccount(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling deleteGroupServiceAccount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteGroupServiceAccount(Async)");
        }

        return deleteGroupServiceAccountCall(groupId, serviceaccountId, version, _callback);

    }


    private ApiResponse<Void> deleteGroupServiceAccountWithHttpInfo(UUID groupId, UUID serviceaccountId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupServiceAccountValidateBeforeCall(groupId, serviceaccountId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteGroupServiceAccountAsync(UUID groupId, UUID serviceaccountId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupServiceAccountValidateBeforeCall(groupId, serviceaccountId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteGroupServiceAccountRequestBuilder {
        private final UUID groupId;
        private final UUID serviceaccountId;
        private final String version;

        private DeleteGroupServiceAccountRequestBuilder(UUID groupId, UUID serviceaccountId, String version) {
            this.groupId = groupId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for deleteGroupServiceAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Service account was successfully deleted. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteGroupServiceAccountCall(groupId, serviceaccountId, version, _callback);
        }


        /**
         * Execute deleteGroupServiceAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Service account was successfully deleted. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteGroupServiceAccountWithHttpInfo(groupId, serviceaccountId, version);
        }

        /**
         * Execute deleteGroupServiceAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Service account was successfully deleted. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteGroupServiceAccountWithHttpInfo(groupId, serviceaccountId, version);
        }

        /**
         * Execute deleteGroupServiceAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Service account was successfully deleted. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteGroupServiceAccountAsync(groupId, serviceaccountId, version, _callback);
        }
    }

    /**
     * Delete a group service account.
     * Permanently delete a group-level service account by its ID.
     * @param groupId The ID of the Snyk Group that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return DeleteGroupServiceAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Service account was successfully deleted. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public DeleteGroupServiceAccountRequestBuilder deleteGroupServiceAccount(UUID groupId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new DeleteGroupServiceAccountRequestBuilder(groupId, serviceaccountId, version);
    }
    private okhttp3.Call deleteOrgServiceAccountCall(UUID orgId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrgServiceAccountValidateBeforeCall(UUID orgId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteOrgServiceAccount(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling deleteOrgServiceAccount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteOrgServiceAccount(Async)");
        }

        return deleteOrgServiceAccountCall(orgId, serviceaccountId, version, _callback);

    }


    private ApiResponse<Void> deleteOrgServiceAccountWithHttpInfo(UUID orgId, UUID serviceaccountId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteOrgServiceAccountValidateBeforeCall(orgId, serviceaccountId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteOrgServiceAccountAsync(UUID orgId, UUID serviceaccountId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrgServiceAccountValidateBeforeCall(orgId, serviceaccountId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteOrgServiceAccountRequestBuilder {
        private final UUID orgId;
        private final UUID serviceaccountId;
        private final String version;

        private DeleteOrgServiceAccountRequestBuilder(UUID orgId, UUID serviceaccountId, String version) {
            this.orgId = orgId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for deleteOrgServiceAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The service account has been deleted. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteOrgServiceAccountCall(orgId, serviceaccountId, version, _callback);
        }


        /**
         * Execute deleteOrgServiceAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The service account has been deleted. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteOrgServiceAccountWithHttpInfo(orgId, serviceaccountId, version);
        }

        /**
         * Execute deleteOrgServiceAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The service account has been deleted. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteOrgServiceAccountWithHttpInfo(orgId, serviceaccountId, version);
        }

        /**
         * Execute deleteOrgServiceAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The service account has been deleted. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteOrgServiceAccountAsync(orgId, serviceaccountId, version, _callback);
        }
    }

    /**
     * Delete a service account in an organization.
     * Delete a service account in an organization.
     * @param orgId The ID of org to which the service account belongs. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return DeleteOrgServiceAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The service account has been deleted. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public DeleteOrgServiceAccountRequestBuilder deleteOrgServiceAccount(UUID orgId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new DeleteOrgServiceAccountRequestBuilder(orgId, serviceaccountId, version);
    }
    private okhttp3.Call getGroupServiceAccountCall(UUID groupId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupServiceAccountValidateBeforeCall(UUID groupId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupServiceAccount(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling getGroupServiceAccount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getGroupServiceAccount(Async)");
        }

        return getGroupServiceAccountCall(groupId, serviceaccountId, version, _callback);

    }


    private ApiResponse<ServiceAccountsGetGroupServiceAccountResponse> getGroupServiceAccountWithHttpInfo(UUID groupId, UUID serviceaccountId, String version) throws ApiException {
        okhttp3.Call localVarCall = getGroupServiceAccountValidateBeforeCall(groupId, serviceaccountId, version, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsGetGroupServiceAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupServiceAccountAsync(UUID groupId, UUID serviceaccountId, String version, final ApiCallback<ServiceAccountsGetGroupServiceAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupServiceAccountValidateBeforeCall(groupId, serviceaccountId, version, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsGetGroupServiceAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupServiceAccountRequestBuilder {
        private final UUID groupId;
        private final UUID serviceaccountId;
        private final String version;

        private GetGroupServiceAccountRequestBuilder(UUID groupId, UUID serviceaccountId, String version) {
            this.groupId = groupId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for getGroupServiceAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupServiceAccountCall(groupId, serviceaccountId, version, _callback);
        }


        /**
         * Execute getGroupServiceAccount request
         * @return ServiceAccountsGetGroupServiceAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsGetGroupServiceAccountResponse execute() throws ApiException {
            ApiResponse<ServiceAccountsGetGroupServiceAccountResponse> localVarResp = getGroupServiceAccountWithHttpInfo(groupId, serviceaccountId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupServiceAccount request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsGetGroupServiceAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsGetGroupServiceAccountResponse> executeWithHttpInfo() throws ApiException {
            return getGroupServiceAccountWithHttpInfo(groupId, serviceaccountId, version);
        }

        /**
         * Execute getGroupServiceAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsGetGroupServiceAccountResponse> _callback) throws ApiException {
            return getGroupServiceAccountAsync(groupId, serviceaccountId, version, _callback);
        }
    }

    /**
     * Get a group service account.
     * Get a group-level service account by its ID.
     * @param groupId The ID of the Snyk Group that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return GetGroupServiceAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetGroupServiceAccountRequestBuilder getGroupServiceAccount(UUID groupId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new GetGroupServiceAccountRequestBuilder(groupId, serviceaccountId, version);
    }
    private okhttp3.Call getOrganizationAccountByIdCall(UUID orgId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationAccountByIdValidateBeforeCall(UUID orgId, UUID serviceaccountId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOrganizationAccountById(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling getOrganizationAccountById(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getOrganizationAccountById(Async)");
        }

        return getOrganizationAccountByIdCall(orgId, serviceaccountId, version, _callback);

    }


    private ApiResponse<ServiceAccountsGetOrganizationAccountByIdResponse> getOrganizationAccountByIdWithHttpInfo(UUID orgId, UUID serviceaccountId, String version) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationAccountByIdValidateBeforeCall(orgId, serviceaccountId, version, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsGetOrganizationAccountByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationAccountByIdAsync(UUID orgId, UUID serviceaccountId, String version, final ApiCallback<ServiceAccountsGetOrganizationAccountByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationAccountByIdValidateBeforeCall(orgId, serviceaccountId, version, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsGetOrganizationAccountByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizationAccountByIdRequestBuilder {
        private final UUID orgId;
        private final UUID serviceaccountId;
        private final String version;

        private GetOrganizationAccountByIdRequestBuilder(UUID orgId, UUID serviceaccountId, String version) {
            this.orgId = orgId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for getOrganizationAccountById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationAccountByIdCall(orgId, serviceaccountId, version, _callback);
        }


        /**
         * Execute getOrganizationAccountById request
         * @return ServiceAccountsGetOrganizationAccountByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsGetOrganizationAccountByIdResponse execute() throws ApiException {
            ApiResponse<ServiceAccountsGetOrganizationAccountByIdResponse> localVarResp = getOrganizationAccountByIdWithHttpInfo(orgId, serviceaccountId, version);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganizationAccountById request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsGetOrganizationAccountByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsGetOrganizationAccountByIdResponse> executeWithHttpInfo() throws ApiException {
            return getOrganizationAccountByIdWithHttpInfo(orgId, serviceaccountId, version);
        }

        /**
         * Execute getOrganizationAccountById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsGetOrganizationAccountByIdResponse> _callback) throws ApiException {
            return getOrganizationAccountByIdAsync(orgId, serviceaccountId, version, _callback);
        }
    }

    /**
     * Get an organization service account.
     * Get an organization-level service account by its ID.
     * @param orgId The ID of the Snyk Organization that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return GetOrganizationAccountByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetOrganizationAccountByIdRequestBuilder getOrganizationAccountById(UUID orgId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new GetOrganizationAccountByIdRequestBuilder(orgId, serviceaccountId, version);
    }
    private okhttp3.Call listGroupServiceAccountsCall(UUID groupId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupServiceAccountsValidateBeforeCall(UUID groupId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling listGroupServiceAccounts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listGroupServiceAccounts(Async)");
        }

        return listGroupServiceAccountsCall(groupId, version, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<ServiceAccountsListGroupServiceAccountsResponse> listGroupServiceAccountsWithHttpInfo(UUID groupId, String version, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGroupServiceAccountsValidateBeforeCall(groupId, version, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsListGroupServiceAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupServiceAccountsAsync(UUID groupId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback<ServiceAccountsListGroupServiceAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupServiceAccountsValidateBeforeCall(groupId, version, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsListGroupServiceAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupServiceAccountsRequestBuilder {
        private final UUID groupId;
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListGroupServiceAccountsRequestBuilder(UUID groupId, String version) {
            this.groupId = groupId;
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListGroupServiceAccountsRequestBuilder
         */
        public ListGroupServiceAccountsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListGroupServiceAccountsRequestBuilder
         */
        public ListGroupServiceAccountsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListGroupServiceAccountsRequestBuilder
         */
        public ListGroupServiceAccountsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGroupServiceAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupServiceAccountsCall(groupId, version, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listGroupServiceAccounts request
         * @return ServiceAccountsListGroupServiceAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsListGroupServiceAccountsResponse execute() throws ApiException {
            ApiResponse<ServiceAccountsListGroupServiceAccountsResponse> localVarResp = listGroupServiceAccountsWithHttpInfo(groupId, version, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroupServiceAccounts request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsListGroupServiceAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsListGroupServiceAccountsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupServiceAccountsWithHttpInfo(groupId, version, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listGroupServiceAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsListGroupServiceAccountsResponse> _callback) throws ApiException {
            return listGroupServiceAccountsAsync(groupId, version, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of group service accounts.
     * Get all service accounts for a group.
     * @param groupId The ID of the Snyk Group that owns the service accounts. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListGroupServiceAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListGroupServiceAccountsRequestBuilder listGroupServiceAccounts(UUID groupId, String version) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListGroupServiceAccountsRequestBuilder(groupId, version);
    }
    private okhttp3.Call listOrganizationServiceAccountsCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationServiceAccountsValidateBeforeCall(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOrganizationServiceAccounts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listOrganizationServiceAccounts(Async)");
        }

        return listOrganizationServiceAccountsCall(orgId, version, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<ServiceAccountsListOrganizationServiceAccountsResponse> listOrganizationServiceAccountsWithHttpInfo(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationServiceAccountsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsListOrganizationServiceAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOrganizationServiceAccountsAsync(UUID orgId, String version, String startingAfter, String endingBefore, Integer limit, final ApiCallback<ServiceAccountsListOrganizationServiceAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationServiceAccountsValidateBeforeCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsListOrganizationServiceAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOrganizationServiceAccountsRequestBuilder {
        private final UUID orgId;
        private final String version;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private ListOrganizationServiceAccountsRequestBuilder(UUID orgId, String version) {
            this.orgId = orgId;
            this.version = version;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListOrganizationServiceAccountsRequestBuilder
         */
        public ListOrganizationServiceAccountsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListOrganizationServiceAccountsRequestBuilder
         */
        public ListOrganizationServiceAccountsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListOrganizationServiceAccountsRequestBuilder
         */
        public ListOrganizationServiceAccountsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listOrganizationServiceAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrganizationServiceAccountsCall(orgId, version, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute listOrganizationServiceAccounts request
         * @return ServiceAccountsListOrganizationServiceAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsListOrganizationServiceAccountsResponse execute() throws ApiException {
            ApiResponse<ServiceAccountsListOrganizationServiceAccountsResponse> localVarResp = listOrganizationServiceAccountsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOrganizationServiceAccounts request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsListOrganizationServiceAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsListOrganizationServiceAccountsResponse> executeWithHttpInfo() throws ApiException {
            return listOrganizationServiceAccountsWithHttpInfo(orgId, version, startingAfter, endingBefore, limit);
        }

        /**
         * Execute listOrganizationServiceAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsListOrganizationServiceAccountsResponse> _callback) throws ApiException {
            return listOrganizationServiceAccountsAsync(orgId, version, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of organization service accounts.
     * Get all service accounts for an organization.
     * @param orgId The ID of the Snyk Organization that owns the service accounts. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @return ListOrganizationServiceAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of service accounts is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListOrganizationServiceAccountsRequestBuilder listOrganizationServiceAccounts(UUID orgId, String version) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ListOrganizationServiceAccountsRequestBuilder(orgId, version);
    }
    private okhttp3.Call manageClientSecretCall(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsManageClientSecretRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts/{serviceaccount_id}/secrets"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageClientSecretValidateBeforeCall(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling manageClientSecret(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling manageClientSecret(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling manageClientSecret(Async)");
        }

        // verify the required parameter 'serviceAccountsManageClientSecretRequest' is set
        if (serviceAccountsManageClientSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsManageClientSecretRequest' when calling manageClientSecret(Async)");
        }

        return manageClientSecretCall(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest, _callback);

    }


    private ApiResponse<ServiceAccountsManageClientSecretResponse> manageClientSecretWithHttpInfo(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = manageClientSecretValidateBeforeCall(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsManageClientSecretResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageClientSecretAsync(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest, final ApiCallback<ServiceAccountsManageClientSecretResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageClientSecretValidateBeforeCall(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsManageClientSecretResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageClientSecretRequestBuilder {
        private final ServiceAccountsManageClientSecretRequestData data;
        private final UUID groupId;
        private final UUID serviceaccountId;
        private final String version;

        private ManageClientSecretRequestBuilder(ServiceAccountsManageClientSecretRequestData data, UUID groupId, UUID serviceaccountId, String version) {
            this.data = data;
            this.groupId = groupId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for manageClientSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest = buildBodyParams();
            return manageClientSecretCall(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest, _callback);
        }

        private ServiceAccountsManageClientSecretRequest buildBodyParams() {
            ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest = new ServiceAccountsManageClientSecretRequest();
            serviceAccountsManageClientSecretRequest.data(this.data);
            return serviceAccountsManageClientSecretRequest;
        }

        /**
         * Execute manageClientSecret request
         * @return ServiceAccountsManageClientSecretResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsManageClientSecretResponse execute() throws ApiException {
            ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest = buildBodyParams();
            ApiResponse<ServiceAccountsManageClientSecretResponse> localVarResp = manageClientSecretWithHttpInfo(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageClientSecret request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsManageClientSecretResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsManageClientSecretResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest = buildBodyParams();
            return manageClientSecretWithHttpInfo(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest);
        }

        /**
         * Execute manageClientSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsManageClientSecretResponse> _callback) throws ApiException {
            ServiceAccountsManageClientSecretRequest serviceAccountsManageClientSecretRequest = buildBodyParams();
            return manageClientSecretAsync(groupId, serviceaccountId, version, serviceAccountsManageClientSecretRequest, _callback);
        }
    }

    /**
     * Manage a group service account&#39;s client secret.
     * Manage the client secret of a group service account by the service account ID.
     * @param groupId The ID of the Snyk Group that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsManageClientSecretRequest  (required)
     * @return ManageClientSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ManageClientSecretRequestBuilder manageClientSecret(ServiceAccountsManageClientSecretRequestData data, UUID groupId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ManageClientSecretRequestBuilder(data, groupId, serviceaccountId, version);
    }
    private okhttp3.Call manageClientSecretForOrganizationServiceAccountCall(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsManageClientSecretForOrganizationServiceAccountRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts/{serviceaccount_id}/secrets"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageClientSecretForOrganizationServiceAccountValidateBeforeCall(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling manageClientSecretForOrganizationServiceAccount(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling manageClientSecretForOrganizationServiceAccount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling manageClientSecretForOrganizationServiceAccount(Async)");
        }

        // verify the required parameter 'serviceAccountsManageClientSecretForOrganizationServiceAccountRequest' is set
        if (serviceAccountsManageClientSecretForOrganizationServiceAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsManageClientSecretForOrganizationServiceAccountRequest' when calling manageClientSecretForOrganizationServiceAccount(Async)");
        }

        return manageClientSecretForOrganizationServiceAccountCall(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, _callback);

    }


    private ApiResponse<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> manageClientSecretForOrganizationServiceAccountWithHttpInfo(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = manageClientSecretForOrganizationServiceAccountValidateBeforeCall(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manageClientSecretForOrganizationServiceAccountAsync(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, final ApiCallback<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageClientSecretForOrganizationServiceAccountValidateBeforeCall(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManageClientSecretForOrganizationServiceAccountRequestBuilder {
        private final ServiceAccountsManageClientSecretRequestData data;
        private final UUID orgId;
        private final UUID serviceaccountId;
        private final String version;

        private ManageClientSecretForOrganizationServiceAccountRequestBuilder(ServiceAccountsManageClientSecretRequestData data, UUID orgId, UUID serviceaccountId, String version) {
            this.data = data;
            this.orgId = orgId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for manageClientSecretForOrganizationServiceAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest = buildBodyParams();
            return manageClientSecretForOrganizationServiceAccountCall(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, _callback);
        }

        private ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest buildBodyParams() {
            ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest = new ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest();
            serviceAccountsManageClientSecretForOrganizationServiceAccountRequest.data(this.data);
            return serviceAccountsManageClientSecretForOrganizationServiceAccountRequest;
        }

        /**
         * Execute manageClientSecretForOrganizationServiceAccount request
         * @return ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse execute() throws ApiException {
            ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest = buildBodyParams();
            ApiResponse<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> localVarResp = manageClientSecretForOrganizationServiceAccountWithHttpInfo(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manageClientSecretForOrganizationServiceAccount request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest = buildBodyParams();
            return manageClientSecretForOrganizationServiceAccountWithHttpInfo(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest);
        }

        /**
         * Execute manageClientSecretForOrganizationServiceAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> _callback) throws ApiException {
            ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest serviceAccountsManageClientSecretForOrganizationServiceAccountRequest = buildBodyParams();
            return manageClientSecretForOrganizationServiceAccountAsync(orgId, serviceaccountId, version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, _callback);
        }
    }

    /**
     * Manage an organization service account&#39;s client secret.
     * Manage the client secret of an organization-level service account by the service account ID.
     * @param orgId The ID of the Snyk Organization that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsManageClientSecretForOrganizationServiceAccountRequest  (required)
     * @return ManageClientSecretForOrganizationServiceAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account client secret has been updated. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ManageClientSecretForOrganizationServiceAccountRequestBuilder manageClientSecretForOrganizationServiceAccount(ServiceAccountsManageClientSecretRequestData data, UUID orgId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new ManageClientSecretForOrganizationServiceAccountRequestBuilder(data, orgId, serviceaccountId, version);
    }
    private okhttp3.Call updateGroupNameByIdCall(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsUpdateGroupNameByIdRequest;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupNameByIdValidateBeforeCall(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupNameById(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling updateGroupNameById(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateGroupNameById(Async)");
        }

        // verify the required parameter 'serviceAccountsUpdateGroupNameByIdRequest' is set
        if (serviceAccountsUpdateGroupNameByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsUpdateGroupNameByIdRequest' when calling updateGroupNameById(Async)");
        }

        return updateGroupNameByIdCall(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest, _callback);

    }


    private ApiResponse<ServiceAccountsUpdateGroupNameByIdResponse> updateGroupNameByIdWithHttpInfo(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupNameByIdValidateBeforeCall(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsUpdateGroupNameByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGroupNameByIdAsync(UUID groupId, UUID serviceaccountId, String version, ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest, final ApiCallback<ServiceAccountsUpdateGroupNameByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupNameByIdValidateBeforeCall(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsUpdateGroupNameByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGroupNameByIdRequestBuilder {
        private final ServiceAccountsUpdateGroupNameByIdRequestData data;
        private final UUID groupId;
        private final UUID serviceaccountId;
        private final String version;

        private UpdateGroupNameByIdRequestBuilder(ServiceAccountsUpdateGroupNameByIdRequestData data, UUID groupId, UUID serviceaccountId, String version) {
            this.data = data;
            this.groupId = groupId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for updateGroupNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest = buildBodyParams();
            return updateGroupNameByIdCall(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest, _callback);
        }

        private ServiceAccountsUpdateGroupNameByIdRequest buildBodyParams() {
            ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest = new ServiceAccountsUpdateGroupNameByIdRequest();
            serviceAccountsUpdateGroupNameByIdRequest.data(this.data);
            return serviceAccountsUpdateGroupNameByIdRequest;
        }

        /**
         * Execute updateGroupNameById request
         * @return ServiceAccountsUpdateGroupNameByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsUpdateGroupNameByIdResponse execute() throws ApiException {
            ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest = buildBodyParams();
            ApiResponse<ServiceAccountsUpdateGroupNameByIdResponse> localVarResp = updateGroupNameByIdWithHttpInfo(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGroupNameById request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsUpdateGroupNameByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsUpdateGroupNameByIdResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest = buildBodyParams();
            return updateGroupNameByIdWithHttpInfo(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest);
        }

        /**
         * Execute updateGroupNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsUpdateGroupNameByIdResponse> _callback) throws ApiException {
            ServiceAccountsUpdateGroupNameByIdRequest serviceAccountsUpdateGroupNameByIdRequest = buildBodyParams();
            return updateGroupNameByIdAsync(groupId, serviceaccountId, version, serviceAccountsUpdateGroupNameByIdRequest, _callback);
        }
    }

    /**
     * Update a group service account.
     * Update the name of a group&#39;s service account by its ID.
     * @param groupId The ID of the Snyk Group that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsUpdateGroupNameByIdRequest  (required)
     * @return UpdateGroupNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateGroupNameByIdRequestBuilder updateGroupNameById(ServiceAccountsUpdateGroupNameByIdRequestData data, UUID groupId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new UpdateGroupNameByIdRequestBuilder(data, groupId, serviceaccountId, version);
    }
    private okhttp3.Call updateOrganizationServiceAccountNameCall(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceAccountsUpdateOrganizationServiceAccountNameRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/service_accounts/{serviceaccount_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "serviceaccount_id" + "}", localVarApiClient.escapeString(serviceaccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationServiceAccountNameValidateBeforeCall(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateOrganizationServiceAccountName(Async)");
        }

        // verify the required parameter 'serviceaccountId' is set
        if (serviceaccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceaccountId' when calling updateOrganizationServiceAccountName(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateOrganizationServiceAccountName(Async)");
        }

        // verify the required parameter 'serviceAccountsUpdateOrganizationServiceAccountNameRequest' is set
        if (serviceAccountsUpdateOrganizationServiceAccountNameRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountsUpdateOrganizationServiceAccountNameRequest' when calling updateOrganizationServiceAccountName(Async)");
        }

        return updateOrganizationServiceAccountNameCall(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, _callback);

    }


    private ApiResponse<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> updateOrganizationServiceAccountNameWithHttpInfo(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationServiceAccountNameValidateBeforeCall(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccountsUpdateOrganizationServiceAccountNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrganizationServiceAccountNameAsync(UUID orgId, UUID serviceaccountId, String version, ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest, final ApiCallback<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationServiceAccountNameValidateBeforeCall(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccountsUpdateOrganizationServiceAccountNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrganizationServiceAccountNameRequestBuilder {
        private final ServiceAccountsUpdateOrganizationServiceAccountNameRequestData data;
        private final UUID orgId;
        private final UUID serviceaccountId;
        private final String version;

        private UpdateOrganizationServiceAccountNameRequestBuilder(ServiceAccountsUpdateOrganizationServiceAccountNameRequestData data, UUID orgId, UUID serviceaccountId, String version) {
            this.data = data;
            this.orgId = orgId;
            this.serviceaccountId = serviceaccountId;
            this.version = version;
        }

        /**
         * Build call for updateOrganizationServiceAccountName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest = buildBodyParams();
            return updateOrganizationServiceAccountNameCall(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, _callback);
        }

        private ServiceAccountsUpdateOrganizationServiceAccountNameRequest buildBodyParams() {
            ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest = new ServiceAccountsUpdateOrganizationServiceAccountNameRequest();
            serviceAccountsUpdateOrganizationServiceAccountNameRequest.data(this.data);
            return serviceAccountsUpdateOrganizationServiceAccountNameRequest;
        }

        /**
         * Execute updateOrganizationServiceAccountName request
         * @return ServiceAccountsUpdateOrganizationServiceAccountNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ServiceAccountsUpdateOrganizationServiceAccountNameResponse execute() throws ApiException {
            ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest = buildBodyParams();
            ApiResponse<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> localVarResp = updateOrganizationServiceAccountNameWithHttpInfo(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrganizationServiceAccountName request with HTTP info returned
         * @return ApiResponse&lt;ServiceAccountsUpdateOrganizationServiceAccountNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> executeWithHttpInfo() throws ApiException {
            ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest = buildBodyParams();
            return updateOrganizationServiceAccountNameWithHttpInfo(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest);
        }

        /**
         * Execute updateOrganizationServiceAccountName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> _callback) throws ApiException {
            ServiceAccountsUpdateOrganizationServiceAccountNameRequest serviceAccountsUpdateOrganizationServiceAccountNameRequest = buildBodyParams();
            return updateOrganizationServiceAccountNameAsync(orgId, serviceaccountId, version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, _callback);
        }
    }

    /**
     * Update an organization service account.
     * Update the name of an organization-level service account by its ID.
     * @param orgId The ID of the Snyk Organization that owns the service account. (required)
     * @param serviceaccountId The ID of the service account. (required)
     * @param version The requested version of the endpoint to process the request (required)
     * @param serviceAccountsUpdateOrganizationServiceAccountNameRequest  (required)
     * @return UpdateOrganizationServiceAccountNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account is returned. </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateOrganizationServiceAccountNameRequestBuilder updateOrganizationServiceAccountName(ServiceAccountsUpdateOrganizationServiceAccountNameRequestData data, UUID orgId, UUID serviceaccountId, String version) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (serviceaccountId == null) throw new IllegalArgumentException("\"serviceaccountId\" is required but got null");
            

        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        return new UpdateOrganizationServiceAccountNameRequestBuilder(data, orgId, serviceaccountId, version);
    }
}

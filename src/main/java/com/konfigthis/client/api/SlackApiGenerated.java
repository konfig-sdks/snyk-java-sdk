/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.SlackGetChannelNameByIdResponse;
import com.konfigthis.client.model.SlackGetChannelsResponse;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SlackApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SlackApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SlackApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getChannelNameByIdCall(String version, UUID orgId, URI channelId, UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{tenant_id}/channels/{channel_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelNameByIdValidateBeforeCall(String version, UUID orgId, URI channelId, UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getChannelNameById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getChannelNameById(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelNameById(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getChannelNameById(Async)");
        }

        return getChannelNameByIdCall(version, orgId, channelId, tenantId, _callback);

    }


    private ApiResponse<SlackGetChannelNameByIdResponse> getChannelNameByIdWithHttpInfo(String version, UUID orgId, URI channelId, UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = getChannelNameByIdValidateBeforeCall(version, orgId, channelId, tenantId, null);
        Type localVarReturnType = new TypeToken<SlackGetChannelNameByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChannelNameByIdAsync(String version, UUID orgId, URI channelId, UUID tenantId, final ApiCallback<SlackGetChannelNameByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelNameByIdValidateBeforeCall(version, orgId, channelId, tenantId, _callback);
        Type localVarReturnType = new TypeToken<SlackGetChannelNameByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChannelNameByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final URI channelId;
        private final UUID tenantId;

        private GetChannelNameByIdRequestBuilder(String version, UUID orgId, URI channelId, UUID tenantId) {
            this.version = version;
            this.orgId = orgId;
            this.channelId = channelId;
            this.tenantId = tenantId;
        }

        /**
         * Build call for getChannelNameById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChannelNameByIdCall(version, orgId, channelId, tenantId, _callback);
        }


        /**
         * Execute getChannelNameById request
         * @return SlackGetChannelNameByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackGetChannelNameByIdResponse execute() throws ApiException {
            ApiResponse<SlackGetChannelNameByIdResponse> localVarResp = getChannelNameByIdWithHttpInfo(version, orgId, channelId, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChannelNameById request with HTTP info returned
         * @return ApiResponse&lt;SlackGetChannelNameByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackGetChannelNameByIdResponse> executeWithHttpInfo() throws ApiException {
            return getChannelNameByIdWithHttpInfo(version, orgId, channelId, tenantId);
        }

        /**
         * Execute getChannelNameById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackGetChannelNameByIdResponse> _callback) throws ApiException {
            return getChannelNameByIdAsync(version, orgId, channelId, tenantId, _callback);
        }
    }

    /**
     * Get Slack Channel name by Slack Channel ID.
     * Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param channelId Slack Channel ID (required)
     * @param tenantId Tenant ID (required)
     * @return GetChannelNameByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetChannelNameByIdRequestBuilder getChannelNameById(String version, UUID orgId, URI channelId, UUID tenantId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
            

        return new GetChannelNameByIdRequestBuilder(version, orgId, channelId, tenantId);
    }
    private okhttp3.Call getChannelsCall(String version, UUID orgId, UUID tenantId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{tenant_id}/channels"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelsValidateBeforeCall(String version, UUID orgId, UUID tenantId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getChannels(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getChannels(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getChannels(Async)");
        }

        return getChannelsCall(version, orgId, tenantId, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<SlackGetChannelsResponse> getChannelsWithHttpInfo(String version, UUID orgId, UUID tenantId, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getChannelsValidateBeforeCall(version, orgId, tenantId, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<SlackGetChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChannelsAsync(String version, UUID orgId, UUID tenantId, String startingAfter, String endingBefore, Integer limit, final ApiCallback<SlackGetChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelsValidateBeforeCall(version, orgId, tenantId, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<SlackGetChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChannelsRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID tenantId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private GetChannelsRequestBuilder(String version, UUID orgId, UUID tenantId) {
            this.version = version;
            this.orgId = orgId;
            this.tenantId = tenantId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return GetChannelsRequestBuilder
         */
        public GetChannelsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return GetChannelsRequestBuilder
         */
        public GetChannelsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 1000)
         * @return GetChannelsRequestBuilder
         */
        public GetChannelsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChannelsCall(version, orgId, tenantId, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute getChannels request
         * @return SlackGetChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackGetChannelsResponse execute() throws ApiException {
            ApiResponse<SlackGetChannelsResponse> localVarResp = getChannelsWithHttpInfo(version, orgId, tenantId, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChannels request with HTTP info returned
         * @return ApiResponse&lt;SlackGetChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackGetChannelsResponse> executeWithHttpInfo() throws ApiException {
            return getChannelsWithHttpInfo(version, orgId, tenantId, startingAfter, endingBefore, limit);
        }

        /**
         * Execute getChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackGetChannelsResponse> _callback) throws ApiException {
            return getChannelsAsync(version, orgId, tenantId, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Get a list of Slack channels
     * Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access. Note that it is currently only possible to page forwards through this collection, no prev links will be generated and the ending_before parameter will not function.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param tenantId Tenant ID (required)
     * @return GetChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Slack channels </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetChannelsRequestBuilder getChannels(String version, UUID orgId, UUID tenantId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
            

        return new GetChannelsRequestBuilder(version, orgId, tenantId);
    }
}

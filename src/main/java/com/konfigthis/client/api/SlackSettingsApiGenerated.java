/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetProjectSettingsCollection;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProjectSettingsPatchRequest;
import com.konfigthis.client.model.ProjectSettingsPatchRequestData;
import com.konfigthis.client.model.SettingsRequest;
import com.konfigthis.client.model.SettingsRequestData;
import com.konfigthis.client.model.SlackSettingsCreateDefaultNotificationSettingsResponse;
import com.konfigthis.client.model.SlackSettingsGetDefaultNotificationSettingsResponse;
import com.konfigthis.client.model.SlackSettingsProjectOverrideResponse;
import com.konfigthis.client.model.SlackSettingsUpdateNotificationSettingsForProjectResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SlackSettingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SlackSettingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SlackSettingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDefaultNotificationSettingsCall(String version, UUID orgId, UUID botId, SettingsRequest settingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settingsRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDefaultNotificationSettingsValidateBeforeCall(String version, UUID orgId, UUID botId, SettingsRequest settingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling createDefaultNotificationSettings(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createDefaultNotificationSettings(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling createDefaultNotificationSettings(Async)");
        }

        return createDefaultNotificationSettingsCall(version, orgId, botId, settingsRequest, _callback);

    }


    private ApiResponse<SlackSettingsCreateDefaultNotificationSettingsResponse> createDefaultNotificationSettingsWithHttpInfo(String version, UUID orgId, UUID botId, SettingsRequest settingsRequest) throws ApiException {
        okhttp3.Call localVarCall = createDefaultNotificationSettingsValidateBeforeCall(version, orgId, botId, settingsRequest, null);
        Type localVarReturnType = new TypeToken<SlackSettingsCreateDefaultNotificationSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDefaultNotificationSettingsAsync(String version, UUID orgId, UUID botId, SettingsRequest settingsRequest, final ApiCallback<SlackSettingsCreateDefaultNotificationSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDefaultNotificationSettingsValidateBeforeCall(version, orgId, botId, settingsRequest, _callback);
        Type localVarReturnType = new TypeToken<SlackSettingsCreateDefaultNotificationSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDefaultNotificationSettingsRequestBuilder {
        private final SettingsRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID botId;

        private CreateDefaultNotificationSettingsRequestBuilder(SettingsRequestData data, String version, UUID orgId, UUID botId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.botId = botId;
        }

        /**
         * Build call for createDefaultNotificationSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return createDefaultNotificationSettingsCall(version, orgId, botId, settingsRequest, _callback);
        }

        private SettingsRequest buildBodyParams() {
            SettingsRequest settingsRequest = new SettingsRequest();
            settingsRequest.data(this.data);
            return settingsRequest;
        }

        /**
         * Execute createDefaultNotificationSettings request
         * @return SlackSettingsCreateDefaultNotificationSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackSettingsCreateDefaultNotificationSettingsResponse execute() throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            ApiResponse<SlackSettingsCreateDefaultNotificationSettingsResponse> localVarResp = createDefaultNotificationSettingsWithHttpInfo(version, orgId, botId, settingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDefaultNotificationSettings request with HTTP info returned
         * @return ApiResponse&lt;SlackSettingsCreateDefaultNotificationSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackSettingsCreateDefaultNotificationSettingsResponse> executeWithHttpInfo() throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return createDefaultNotificationSettingsWithHttpInfo(version, orgId, botId, settingsRequest);
        }

        /**
         * Execute createDefaultNotificationSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackSettingsCreateDefaultNotificationSettingsResponse> _callback) throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return createDefaultNotificationSettingsAsync(version, orgId, botId, settingsRequest, _callback);
        }
    }

    /**
     * Create new Slack notification default settings.
     * Create new Slack notification default settings for a given tenant.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param botId Bot ID (required)
     * @return CreateDefaultNotificationSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public CreateDefaultNotificationSettingsRequestBuilder createDefaultNotificationSettings(SettingsRequestData data, String version, UUID orgId, UUID botId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new CreateDefaultNotificationSettingsRequestBuilder(data, version, orgId, botId);
    }
    private okhttp3.Call getDefaultNotificationSettingsCall(String version, UUID orgId, UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultNotificationSettingsValidateBeforeCall(String version, UUID orgId, UUID botId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDefaultNotificationSettings(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDefaultNotificationSettings(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getDefaultNotificationSettings(Async)");
        }

        return getDefaultNotificationSettingsCall(version, orgId, botId, _callback);

    }


    private ApiResponse<SlackSettingsGetDefaultNotificationSettingsResponse> getDefaultNotificationSettingsWithHttpInfo(String version, UUID orgId, UUID botId) throws ApiException {
        okhttp3.Call localVarCall = getDefaultNotificationSettingsValidateBeforeCall(version, orgId, botId, null);
        Type localVarReturnType = new TypeToken<SlackSettingsGetDefaultNotificationSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultNotificationSettingsAsync(String version, UUID orgId, UUID botId, final ApiCallback<SlackSettingsGetDefaultNotificationSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultNotificationSettingsValidateBeforeCall(version, orgId, botId, _callback);
        Type localVarReturnType = new TypeToken<SlackSettingsGetDefaultNotificationSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultNotificationSettingsRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID botId;

        private GetDefaultNotificationSettingsRequestBuilder(String version, UUID orgId, UUID botId) {
            this.version = version;
            this.orgId = orgId;
            this.botId = botId;
        }

        /**
         * Build call for getDefaultNotificationSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultNotificationSettingsCall(version, orgId, botId, _callback);
        }


        /**
         * Execute getDefaultNotificationSettings request
         * @return SlackSettingsGetDefaultNotificationSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackSettingsGetDefaultNotificationSettingsResponse execute() throws ApiException {
            ApiResponse<SlackSettingsGetDefaultNotificationSettingsResponse> localVarResp = getDefaultNotificationSettingsWithHttpInfo(version, orgId, botId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultNotificationSettings request with HTTP info returned
         * @return ApiResponse&lt;SlackSettingsGetDefaultNotificationSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackSettingsGetDefaultNotificationSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getDefaultNotificationSettingsWithHttpInfo(version, orgId, botId);
        }

        /**
         * Execute getDefaultNotificationSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackSettingsGetDefaultNotificationSettingsResponse> _callback) throws ApiException {
            return getDefaultNotificationSettingsAsync(version, orgId, botId, _callback);
        }
    }

    /**
     * Get Slack integration default notification settings.
     * Get Slack integration default notification settings for the provided tenant ID and bot ID.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param botId Bot ID (required)
     * @return GetDefaultNotificationSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default settings created successfully </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetDefaultNotificationSettingsRequestBuilder getDefaultNotificationSettings(String version, UUID orgId, UUID botId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new GetDefaultNotificationSettingsRequestBuilder(version, orgId, botId);
    }
    private okhttp3.Call getOverridesForProjectsCall(String version, UUID orgId, UUID botId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}/projects"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOverridesForProjectsValidateBeforeCall(String version, UUID orgId, UUID botId, String startingAfter, String endingBefore, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getOverridesForProjects(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOverridesForProjects(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getOverridesForProjects(Async)");
        }

        return getOverridesForProjectsCall(version, orgId, botId, startingAfter, endingBefore, limit, _callback);

    }


    private ApiResponse<GetProjectSettingsCollection> getOverridesForProjectsWithHttpInfo(String version, UUID orgId, UUID botId, String startingAfter, String endingBefore, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getOverridesForProjectsValidateBeforeCall(version, orgId, botId, startingAfter, endingBefore, limit, null);
        Type localVarReturnType = new TypeToken<GetProjectSettingsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOverridesForProjectsAsync(String version, UUID orgId, UUID botId, String startingAfter, String endingBefore, Integer limit, final ApiCallback<GetProjectSettingsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOverridesForProjectsValidateBeforeCall(version, orgId, botId, startingAfter, endingBefore, limit, _callback);
        Type localVarReturnType = new TypeToken<GetProjectSettingsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOverridesForProjectsRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID botId;
        private String startingAfter;
        private String endingBefore;
        private Integer limit;

        private GetOverridesForProjectsRequestBuilder(String version, UUID orgId, UUID botId) {
            this.version = version;
            this.orgId = orgId;
            this.botId = botId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return GetOverridesForProjectsRequestBuilder
         */
        public GetOverridesForProjectsRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return GetOverridesForProjectsRequestBuilder
         */
        public GetOverridesForProjectsRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return GetOverridesForProjectsRequestBuilder
         */
        public GetOverridesForProjectsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getOverridesForProjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return default settings for a tenant </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOverridesForProjectsCall(version, orgId, botId, startingAfter, endingBefore, limit, _callback);
        }


        /**
         * Execute getOverridesForProjects request
         * @return GetProjectSettingsCollection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return default settings for a tenant </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public GetProjectSettingsCollection execute() throws ApiException {
            ApiResponse<GetProjectSettingsCollection> localVarResp = getOverridesForProjectsWithHttpInfo(version, orgId, botId, startingAfter, endingBefore, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOverridesForProjects request with HTTP info returned
         * @return ApiResponse&lt;GetProjectSettingsCollection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return default settings for a tenant </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<GetProjectSettingsCollection> executeWithHttpInfo() throws ApiException {
            return getOverridesForProjectsWithHttpInfo(version, orgId, botId, startingAfter, endingBefore, limit);
        }

        /**
         * Execute getOverridesForProjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return default settings for a tenant </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProjectSettingsCollection> _callback) throws ApiException {
            return getOverridesForProjectsAsync(version, orgId, botId, startingAfter, endingBefore, limit, _callback);
        }
    }

    /**
     * Slack notification settings overrides for projects
     * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param botId Bot ID (required)
     * @return GetOverridesForProjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return default settings for a tenant </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetOverridesForProjectsRequestBuilder getOverridesForProjects(String version, UUID orgId, UUID botId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new GetOverridesForProjectsRequestBuilder(version, orgId, botId);
    }
    private okhttp3.Call projectOverrideCall(String version, UUID orgId, UUID projectId, UUID botId, SettingsRequest settingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settingsRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectOverrideValidateBeforeCall(String version, UUID orgId, UUID projectId, UUID botId, SettingsRequest settingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling projectOverride(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling projectOverride(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectOverride(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling projectOverride(Async)");
        }

        return projectOverrideCall(version, orgId, projectId, botId, settingsRequest, _callback);

    }


    private ApiResponse<SlackSettingsProjectOverrideResponse> projectOverrideWithHttpInfo(String version, UUID orgId, UUID projectId, UUID botId, SettingsRequest settingsRequest) throws ApiException {
        okhttp3.Call localVarCall = projectOverrideValidateBeforeCall(version, orgId, projectId, botId, settingsRequest, null);
        Type localVarReturnType = new TypeToken<SlackSettingsProjectOverrideResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call projectOverrideAsync(String version, UUID orgId, UUID projectId, UUID botId, SettingsRequest settingsRequest, final ApiCallback<SlackSettingsProjectOverrideResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectOverrideValidateBeforeCall(version, orgId, projectId, botId, settingsRequest, _callback);
        Type localVarReturnType = new TypeToken<SlackSettingsProjectOverrideResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProjectOverrideRequestBuilder {
        private final SettingsRequestData data;
        private final String version;
        private final UUID orgId;
        private final UUID projectId;
        private final UUID botId;

        private ProjectOverrideRequestBuilder(SettingsRequestData data, String version, UUID orgId, UUID projectId, UUID botId) {
            this.data = data;
            this.version = version;
            this.orgId = orgId;
            this.projectId = projectId;
            this.botId = botId;
        }

        /**
         * Build call for projectOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Project settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return projectOverrideCall(version, orgId, projectId, botId, settingsRequest, _callback);
        }

        private SettingsRequest buildBodyParams() {
            SettingsRequest settingsRequest = new SettingsRequest();
            settingsRequest.data(this.data);
            return settingsRequest;
        }

        /**
         * Execute projectOverride request
         * @return SlackSettingsProjectOverrideResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Project settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackSettingsProjectOverrideResponse execute() throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            ApiResponse<SlackSettingsProjectOverrideResponse> localVarResp = projectOverrideWithHttpInfo(version, orgId, projectId, botId, settingsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute projectOverride request with HTTP info returned
         * @return ApiResponse&lt;SlackSettingsProjectOverrideResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Project settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackSettingsProjectOverrideResponse> executeWithHttpInfo() throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return projectOverrideWithHttpInfo(version, orgId, projectId, botId, settingsRequest);
        }

        /**
         * Execute projectOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Project settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackSettingsProjectOverrideResponse> _callback) throws ApiException {
            SettingsRequest settingsRequest = buildBodyParams();
            return projectOverrideAsync(version, orgId, projectId, botId, settingsRequest, _callback);
        }
    }

    /**
     * Create a new Slack settings override for a given project.
     * Create Slack settings override for a project.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param projectId Project ID (required)
     * @param botId Bot ID (required)
     * @return ProjectOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Project settings created successfully </td><td>  * deprecation -  <br>  * location -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ProjectOverrideRequestBuilder projectOverride(SettingsRequestData data, String version, UUID orgId, UUID projectId, UUID botId) throws IllegalArgumentException {
        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new ProjectOverrideRequestBuilder(data, version, orgId, projectId, botId);
    }
    private okhttp3.Call removeIntegrationCall(String version, UUID orgId, UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIntegrationValidateBeforeCall(String version, UUID orgId, UUID botId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling removeIntegration(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeIntegration(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling removeIntegration(Async)");
        }

        return removeIntegrationCall(version, orgId, botId, _callback);

    }


    private ApiResponse<Void> removeIntegrationWithHttpInfo(String version, UUID orgId, UUID botId) throws ApiException {
        okhttp3.Call localVarCall = removeIntegrationValidateBeforeCall(version, orgId, botId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeIntegrationAsync(String version, UUID orgId, UUID botId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIntegrationValidateBeforeCall(version, orgId, botId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveIntegrationRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID botId;

        private RemoveIntegrationRequestBuilder(String version, UUID orgId, UUID botId) {
            this.version = version;
            this.orgId = orgId;
            this.botId = botId;
        }

        /**
         * Build call for removeIntegration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack App integration successfully removed </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeIntegrationCall(version, orgId, botId, _callback);
        }


        /**
         * Execute removeIntegration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack App integration successfully removed </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeIntegrationWithHttpInfo(version, orgId, botId);
        }

        /**
         * Execute removeIntegration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack App integration successfully removed </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeIntegrationWithHttpInfo(version, orgId, botId);
        }

        /**
         * Execute removeIntegration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack App integration successfully removed </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeIntegrationAsync(version, orgId, botId, _callback);
        }
    }

    /**
     * Remove the given Slack App integration
     * Remove the given Slack App integration
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param botId Bot ID (required)
     * @return RemoveIntegrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Slack App integration successfully removed </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RemoveIntegrationRequestBuilder removeIntegration(String version, UUID orgId, UUID botId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new RemoveIntegrationRequestBuilder(version, orgId, botId);
    }
    private okhttp3.Call removeProjectOverrideCall(String version, UUID orgId, UUID projectId, UUID botId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProjectOverrideValidateBeforeCall(String version, UUID orgId, UUID projectId, UUID botId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling removeProjectOverride(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeProjectOverride(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeProjectOverride(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling removeProjectOverride(Async)");
        }

        return removeProjectOverrideCall(version, orgId, projectId, botId, _callback);

    }


    private ApiResponse<Void> removeProjectOverrideWithHttpInfo(String version, UUID orgId, UUID projectId, UUID botId) throws ApiException {
        okhttp3.Call localVarCall = removeProjectOverrideValidateBeforeCall(version, orgId, projectId, botId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeProjectOverrideAsync(String version, UUID orgId, UUID projectId, UUID botId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProjectOverrideValidateBeforeCall(version, orgId, projectId, botId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveProjectOverrideRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID projectId;
        private final UUID botId;

        private RemoveProjectOverrideRequestBuilder(String version, UUID orgId, UUID projectId, UUID botId) {
            this.version = version;
            this.orgId = orgId;
            this.projectId = projectId;
            this.botId = botId;
        }

        /**
         * Build call for removeProjectOverride
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack settings override for the project removed successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeProjectOverrideCall(version, orgId, projectId, botId, _callback);
        }


        /**
         * Execute removeProjectOverride request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack settings override for the project removed successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeProjectOverrideWithHttpInfo(version, orgId, projectId, botId);
        }

        /**
         * Execute removeProjectOverride request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack settings override for the project removed successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeProjectOverrideWithHttpInfo(version, orgId, projectId, botId);
        }

        /**
         * Execute removeProjectOverride request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Slack settings override for the project removed successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeProjectOverrideAsync(version, orgId, projectId, botId, _callback);
        }
    }

    /**
     * Remove Slack settings override for a project.
     * Remove Slack settings override for a project.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param projectId Project ID (required)
     * @param botId Bot ID (required)
     * @return RemoveProjectOverrideRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Slack settings override for the project removed successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public RemoveProjectOverrideRequestBuilder removeProjectOverride(String version, UUID orgId, UUID projectId, UUID botId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        return new RemoveProjectOverrideRequestBuilder(version, orgId, projectId, botId);
    }
    private okhttp3.Call updateNotificationSettingsForProjectCall(String version, UUID orgId, UUID botId, UUID projectId, ProjectSettingsPatchRequest projectSettingsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectSettingsPatchRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bot_id" + "}", localVarApiClient.escapeString(botId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNotificationSettingsForProjectValidateBeforeCall(String version, UUID orgId, UUID botId, UUID projectId, ProjectSettingsPatchRequest projectSettingsPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateNotificationSettingsForProject(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateNotificationSettingsForProject(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling updateNotificationSettingsForProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateNotificationSettingsForProject(Async)");
        }

        return updateNotificationSettingsForProjectCall(version, orgId, botId, projectId, projectSettingsPatchRequest, _callback);

    }


    private ApiResponse<SlackSettingsUpdateNotificationSettingsForProjectResponse> updateNotificationSettingsForProjectWithHttpInfo(String version, UUID orgId, UUID botId, UUID projectId, ProjectSettingsPatchRequest projectSettingsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateNotificationSettingsForProjectValidateBeforeCall(version, orgId, botId, projectId, projectSettingsPatchRequest, null);
        Type localVarReturnType = new TypeToken<SlackSettingsUpdateNotificationSettingsForProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateNotificationSettingsForProjectAsync(String version, UUID orgId, UUID botId, UUID projectId, ProjectSettingsPatchRequest projectSettingsPatchRequest, final ApiCallback<SlackSettingsUpdateNotificationSettingsForProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNotificationSettingsForProjectValidateBeforeCall(version, orgId, botId, projectId, projectSettingsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<SlackSettingsUpdateNotificationSettingsForProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateNotificationSettingsForProjectRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID botId;
        private final UUID projectId;
        private ProjectSettingsPatchRequestData data;

        private UpdateNotificationSettingsForProjectRequestBuilder(String version, UUID orgId, UUID botId, UUID projectId) {
            this.version = version;
            this.orgId = orgId;
            this.botId = botId;
            this.projectId = projectId;
        }

        /**
         * Set data
         * @param data  (optional)
         * @return UpdateNotificationSettingsForProjectRequestBuilder
         */
        public UpdateNotificationSettingsForProjectRequestBuilder data(ProjectSettingsPatchRequestData data) {
            this.data = data;
            return this;
        }
        
        /**
         * Build call for updateNotificationSettingsForProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Slack notification settings for a project updated successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectSettingsPatchRequest projectSettingsPatchRequest = buildBodyParams();
            return updateNotificationSettingsForProjectCall(version, orgId, botId, projectId, projectSettingsPatchRequest, _callback);
        }

        private ProjectSettingsPatchRequest buildBodyParams() {
            ProjectSettingsPatchRequest projectSettingsPatchRequest = new ProjectSettingsPatchRequest();
            projectSettingsPatchRequest.data(this.data);
            return projectSettingsPatchRequest;
        }

        /**
         * Execute updateNotificationSettingsForProject request
         * @return SlackSettingsUpdateNotificationSettingsForProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Slack notification settings for a project updated successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public SlackSettingsUpdateNotificationSettingsForProjectResponse execute() throws ApiException {
            ProjectSettingsPatchRequest projectSettingsPatchRequest = buildBodyParams();
            ApiResponse<SlackSettingsUpdateNotificationSettingsForProjectResponse> localVarResp = updateNotificationSettingsForProjectWithHttpInfo(version, orgId, botId, projectId, projectSettingsPatchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateNotificationSettingsForProject request with HTTP info returned
         * @return ApiResponse&lt;SlackSettingsUpdateNotificationSettingsForProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Slack notification settings for a project updated successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<SlackSettingsUpdateNotificationSettingsForProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectSettingsPatchRequest projectSettingsPatchRequest = buildBodyParams();
            return updateNotificationSettingsForProjectWithHttpInfo(version, orgId, botId, projectId, projectSettingsPatchRequest);
        }

        /**
         * Execute updateNotificationSettingsForProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Slack notification settings for a project updated successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SlackSettingsUpdateNotificationSettingsForProjectResponse> _callback) throws ApiException {
            ProjectSettingsPatchRequest projectSettingsPatchRequest = buildBodyParams();
            return updateNotificationSettingsForProjectAsync(version, orgId, botId, projectId, projectSettingsPatchRequest, _callback);
        }
    }

    /**
     * Update Slack notification settings for a project.
     * Update Slack notification settings for a project.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId Org ID (required)
     * @param botId Bot ID (required)
     * @param projectId Project ID (required)
     * @return UpdateNotificationSettingsForProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Slack notification settings for a project updated successfully. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public UpdateNotificationSettingsForProjectRequestBuilder updateNotificationSettingsForProject(String version, UUID orgId, UUID botId, UUID projectId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (botId == null) throw new IllegalArgumentException("\"botId\" is required but got null");
            

        if (projectId == null) throw new IllegalArgumentException("\"projectId\" is required but got null");
            

        return new UpdateNotificationSettingsForProjectRequestBuilder(version, orgId, botId, projectId);
    }
}

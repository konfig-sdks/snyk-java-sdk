/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.TargetsGetByIdResponse;
import com.konfigthis.client.model.TargetsListByOrgIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TargetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TargetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TargetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteByIdCall(String version, UUID orgId, UUID targetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/targets/{target_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "target_id" + "}", localVarApiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String version, UUID orgId, UUID targetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteById(Async)");
        }

        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling deleteById(Async)");
        }

        return deleteByIdCall(version, orgId, targetId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String version, UUID orgId, UUID targetId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(version, orgId, targetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String version, UUID orgId, UUID targetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(version, orgId, targetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID targetId;

        private DeleteByIdRequestBuilder(String version, UUID orgId, UUID targetId) {
            this.version = version;
            this.orgId = orgId;
            this.targetId = targetId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The target is deleted with all projects, if it is found in the specified org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(version, orgId, targetId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The target is deleted with all projects, if it is found in the specified org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(version, orgId, targetId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The target is deleted with all projects, if it is found in the specified org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(version, orgId, targetId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The target is deleted with all projects, if it is found in the specified org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(version, orgId, targetId, _callback);
        }
    }

    /**
     * Delete target by target ID
     * Delete the specified target.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The id of the org to delete (required)
     * @param targetId The id of the target to delete (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The target is deleted with all projects, if it is found in the specified org. </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String version, UUID orgId, UUID targetId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (targetId == null) throw new IllegalArgumentException("\"targetId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(version, orgId, targetId);
    }
    private okhttp3.Call getByIdCall(String version, UUID orgId, UUID targetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/targets/{target_id}"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "target_id" + "}", localVarApiClient.escapeString(targetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String version, UUID orgId, UUID targetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getById(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'targetId' is set
        if (targetId == null) {
            throw new ApiException("Missing the required parameter 'targetId' when calling getById(Async)");
        }

        return getByIdCall(version, orgId, targetId, _callback);

    }


    private ApiResponse<TargetsGetByIdResponse> getByIdWithHttpInfo(String version, UUID orgId, UUID targetId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, targetId, null);
        Type localVarReturnType = new TypeToken<TargetsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String version, UUID orgId, UUID targetId, final ApiCallback<TargetsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(version, orgId, targetId, _callback);
        Type localVarReturnType = new TypeToken<TargetsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private final UUID targetId;

        private GetByIdRequestBuilder(String version, UUID orgId, UUID targetId) {
            this.version = version;
            this.orgId = orgId;
            this.targetId = targetId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single target is returned if it is found in the specified org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(version, orgId, targetId, _callback);
        }


        /**
         * Execute getById request
         * @return TargetsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single target is returned if it is found in the specified org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public TargetsGetByIdResponse execute() throws ApiException {
            ApiResponse<TargetsGetByIdResponse> localVarResp = getByIdWithHttpInfo(version, orgId, targetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;TargetsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single target is returned if it is found in the specified org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<TargetsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(version, orgId, targetId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single target is returned if it is found in the specified org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TargetsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(version, orgId, targetId, _callback);
        }
    }

    /**
     * Get target by target ID
     * Get a specified target for an organization.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The id of the org to return the target from (required)
     * @param targetId The id of the target to return (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single target is returned if it is found in the specified org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String version, UUID orgId, UUID targetId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (targetId == null) throw new IllegalArgumentException("\"targetId\" is required but got null");
            

        return new GetByIdRequestBuilder(version, orgId, targetId);
    }
    private okhttp3.Call listByOrgIdCall(String version, UUID orgId, String startingAfter, String endingBefore, Boolean count, Integer limit, Boolean isPrivate, Boolean excludeEmpty, String url, List<String> sourceTypes, String displayName, OffsetDateTime createdGte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org_id}/targets"
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (isPrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_private", isPrivate));
        }

        if (excludeEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_empty", excludeEmpty));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (sourceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "source_types", sourceTypes));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_name", displayName));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_gte", createdGte));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken", "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByOrgIdValidateBeforeCall(String version, UUID orgId, String startingAfter, String endingBefore, Boolean count, Integer limit, Boolean isPrivate, Boolean excludeEmpty, String url, List<String> sourceTypes, String displayName, OffsetDateTime createdGte, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listByOrgId(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listByOrgId(Async)");
        }

        return listByOrgIdCall(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte, _callback);

    }


    private ApiResponse<TargetsListByOrgIdResponse> listByOrgIdWithHttpInfo(String version, UUID orgId, String startingAfter, String endingBefore, Boolean count, Integer limit, Boolean isPrivate, Boolean excludeEmpty, String url, List<String> sourceTypes, String displayName, OffsetDateTime createdGte) throws ApiException {
        okhttp3.Call localVarCall = listByOrgIdValidateBeforeCall(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte, null);
        Type localVarReturnType = new TypeToken<TargetsListByOrgIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByOrgIdAsync(String version, UUID orgId, String startingAfter, String endingBefore, Boolean count, Integer limit, Boolean isPrivate, Boolean excludeEmpty, String url, List<String> sourceTypes, String displayName, OffsetDateTime createdGte, final ApiCallback<TargetsListByOrgIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByOrgIdValidateBeforeCall(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte, _callback);
        Type localVarReturnType = new TypeToken<TargetsListByOrgIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByOrgIdRequestBuilder {
        private final String version;
        private final UUID orgId;
        private String startingAfter;
        private String endingBefore;
        private Boolean count;
        private Integer limit;
        private Boolean isPrivate;
        private Boolean excludeEmpty;
        private String url;
        private List<String> sourceTypes;
        private String displayName;
        private OffsetDateTime createdGte;

        private ListByOrgIdRequestBuilder(String version, UUID orgId) {
            this.version = version;
            this.orgId = orgId;
        }

        /**
         * Set startingAfter
         * @param startingAfter Return the page of results immediately after this cursor (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore Return the page of results immediately before this cursor (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set count
         * @param count Calculate total amount of filtered results (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder count(Boolean count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return per page (optional, default to 10)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set isPrivate
         * @param isPrivate Return targets that match the provided value of is_private (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder isPrivate(Boolean isPrivate) {
            this.isPrivate = isPrivate;
            return this;
        }
        
        /**
         * Set excludeEmpty
         * @param excludeEmpty Return only the targets that has projects (optional, default to true)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder excludeEmpty(Boolean excludeEmpty) {
            this.excludeEmpty = excludeEmpty;
            return this;
        }
        
        /**
         * Set url
         * @param url Return targets that match the provided remote_url. (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set sourceTypes
         * @param sourceTypes Return targets that match the provided source_types (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder sourceTypes(List<String> sourceTypes) {
            this.sourceTypes = sourceTypes;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName Return targets with display names starting with the provided string (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set createdGte
         * @param createdGte Return only targets which have been created at or after the specified date.  (optional)
         * @return ListByOrgIdRequestBuilder
         */
        public ListByOrgIdRequestBuilder createdGte(OffsetDateTime createdGte) {
            this.createdGte = createdGte;
            return this;
        }
        
        /**
         * Build call for listByOrgId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of targets is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByOrgIdCall(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte, _callback);
        }


        /**
         * Execute listByOrgId request
         * @return TargetsListByOrgIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of targets is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public TargetsListByOrgIdResponse execute() throws ApiException {
            ApiResponse<TargetsListByOrgIdResponse> localVarResp = listByOrgIdWithHttpInfo(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByOrgId request with HTTP info returned
         * @return ApiResponse&lt;TargetsListByOrgIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of targets is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<TargetsListByOrgIdResponse> executeWithHttpInfo() throws ApiException {
            return listByOrgIdWithHttpInfo(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte);
        }

        /**
         * Execute listByOrgId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of targets is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TargetsListByOrgIdResponse> _callback) throws ApiException {
            return listByOrgIdAsync(version, orgId, startingAfter, endingBefore, count, limit, isPrivate, excludeEmpty, url, sourceTypes, displayName, createdGte, _callback);
        }
    }

    /**
     * Get targets by org ID
     * Get a list of an organization&#39;s targets.
     * @param version The requested version of the endpoint to process the request (required)
     * @param orgId The id of the org to return a list of targets (required)
     * @return ListByOrgIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of targets is returned for the targeted org </td><td>  * deprecation -  <br>  * snyk-request-id -  <br>  * snyk-version-lifecycle-stage -  <br>  * snyk-version-requested -  <br>  * snyk-version-served -  <br>  * sunset -  <br>  </td></tr>
     </table>
     */
    public ListByOrgIdRequestBuilder listByOrgId(String version, UUID orgId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListByOrgIdRequestBuilder(version, orgId);
    }
}

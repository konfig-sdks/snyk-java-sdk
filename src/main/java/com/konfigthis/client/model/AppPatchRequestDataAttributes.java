/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AppPatchRequestDataAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppPatchRequestDataAttributes {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS = "access_token_ttl_seconds";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS)
  private Double accessTokenTtlSeconds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<URI> redirectUris = null;

  public AppPatchRequestDataAttributes() {
  }

  public AppPatchRequestDataAttributes accessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
    return this;
  }

  public AppPatchRequestDataAttributes accessTokenTtlSeconds(Integer accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds.doubleValue();
    return this;
  }

   /**
   * The access token time to live for your app, in seconds. It only affects the newly generated access tokens, existing access token will  continue to have their previous time to live as expiration.
   * minimum: 3600
   * maximum: 86400
   * @return accessTokenTtlSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3600", value = "The access token time to live for your app, in seconds. It only affects the newly generated access tokens, existing access token will  continue to have their previous time to live as expiration.")

  public Double getAccessTokenTtlSeconds() {
    return accessTokenTtlSeconds;
  }


  public void setAccessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
  }


  public AppPatchRequestDataAttributes name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * New name of the app to display to users during authorization flow.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My App", value = "New name of the app to display to users during authorization flow.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public AppPatchRequestDataAttributes redirectUris(List<URI> redirectUris) {
    
    
    
    
    this.redirectUris = redirectUris;
    return this;
  }

  public AppPatchRequestDataAttributes addRedirectUrisItem(URI redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * List of allowed redirect URIs to call back after authentication.
   * @return redirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"https://example.com/callback\"]", value = "List of allowed redirect URIs to call back after authentication.")

  public List<URI> getRedirectUris() {
    return redirectUris;
  }


  public void setRedirectUris(List<URI> redirectUris) {
    
    
    
    this.redirectUris = redirectUris;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppPatchRequestDataAttributes instance itself
   */
  public AppPatchRequestDataAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPatchRequestDataAttributes appPatchRequestDataAttributes = (AppPatchRequestDataAttributes) o;
    return Objects.equals(this.accessTokenTtlSeconds, appPatchRequestDataAttributes.accessTokenTtlSeconds) &&
        Objects.equals(this.name, appPatchRequestDataAttributes.name) &&
        Objects.equals(this.redirectUris, appPatchRequestDataAttributes.redirectUris)&&
        Objects.equals(this.additionalProperties, appPatchRequestDataAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenTtlSeconds, name, redirectUris, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPatchRequestDataAttributes {\n");
    sb.append("    accessTokenTtlSeconds: ").append(toIndentedString(accessTokenTtlSeconds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token_ttl_seconds");
    openapiFields.add("name");
    openapiFields.add("redirect_uris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppPatchRequestDataAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppPatchRequestDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPatchRequestDataAttributes is not found in the empty JSON string", AppPatchRequestDataAttributes.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPatchRequestDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPatchRequestDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPatchRequestDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPatchRequestDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPatchRequestDataAttributes>() {
           @Override
           public void write(JsonWriter out, AppPatchRequestDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPatchRequestDataAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppPatchRequestDataAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppPatchRequestDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppPatchRequestDataAttributes
  * @throws IOException if the JSON string is invalid with respect to AppPatchRequestDataAttributes
  */
  public static AppPatchRequestDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPatchRequestDataAttributes.class);
  }

 /**
  * Convert an instance of AppPatchRequestDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Context;
import com.konfigthis.client.model.GrantType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AppResourceAttributesWithSecret
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AppResourceAttributesWithSecret {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS = "access_token_ttl_seconds";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS)
  private Double accessTokenTtlSeconds;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private UUID clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Context context;

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grant_type";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private GrantType grantType;

  public static final String SERIALIZED_NAME_IS_CONFIDENTIAL = "is_confidential";
  @SerializedName(SERIALIZED_NAME_IS_CONFIDENTIAL)
  private Boolean isConfidential;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_PUBLIC_ID = "org_public_id";
  @SerializedName(SERIALIZED_NAME_ORG_PUBLIC_ID)
  private UUID orgPublicId;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<URI> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public AppResourceAttributesWithSecret() {
  }

  public AppResourceAttributesWithSecret accessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
    return this;
  }

  public AppResourceAttributesWithSecret accessTokenTtlSeconds(Integer accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds.doubleValue();
    return this;
  }

   /**
   * The access token time to live for your app, in seconds. It only affects the newly generated access tokens, existing access token will  continue to have their previous time to live as expiration.
   * minimum: 3600
   * maximum: 86400
   * @return accessTokenTtlSeconds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3600", required = true, value = "The access token time to live for your app, in seconds. It only affects the newly generated access tokens, existing access token will  continue to have their previous time to live as expiration.")

  public Double getAccessTokenTtlSeconds() {
    return accessTokenTtlSeconds;
  }


  public void setAccessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
  }


  public AppResourceAttributesWithSecret clientId(UUID clientId) {
    
    
    
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The oauth2 client id for the app.
   * @return clientId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "941b423a-e0a0-4a33-a7ca-dd9e9e6bd8cf", required = true, value = "The oauth2 client id for the app.")

  public UUID getClientId() {
    return clientId;
  }


  public void setClientId(UUID clientId) {
    
    
    
    this.clientId = clientId;
  }


  public AppResourceAttributesWithSecret clientSecret(String clientSecret) {
    
    
    if (clientSecret != null && clientSecret.length() < 1) {
      throw new IllegalArgumentException("Invalid value for clientSecret. Length must be greater than or equal to 1.");
    }
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The oauth2 client secret for the app. This is the only time this secret will be returned, store it securely and don’t lose it.
   * @return clientSecret
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "snyk_cs_ctZW0JsWG^Bm`*oPo=mnV26qU_6pjxht<]S_v1", required = true, value = "The oauth2 client secret for the app. This is the only time this secret will be returned, store it securely and don’t lose it.")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    
    
    if (clientSecret != null && clientSecret.length() < 1) {
      throw new IllegalArgumentException("Invalid value for clientSecret. Length must be greater than or equal to 1.");
    }
    this.clientSecret = clientSecret;
  }


  public AppResourceAttributesWithSecret context(Context context) {
    
    
    
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Context getContext() {
    return context;
  }


  public void setContext(Context context) {
    
    
    
    this.context = context;
  }


  public AppResourceAttributesWithSecret grantType(GrantType grantType) {
    
    
    
    
    this.grantType = grantType;
    return this;
  }

   /**
   * Get grantType
   * @return grantType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GrantType getGrantType() {
    return grantType;
  }


  public void setGrantType(GrantType grantType) {
    
    
    
    this.grantType = grantType;
  }


  public AppResourceAttributesWithSecret isConfidential(Boolean isConfidential) {
    
    
    
    
    this.isConfidential = isConfidential;
    return this;
  }

   /**
   * A boolean to indicate if an app is confidential or not as per the OAuth2 RFC. Confidential apps can securely store secrets. Examples of non-confidential apps are full web-based or CLIs.
   * @return isConfidential
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "A boolean to indicate if an app is confidential or not as per the OAuth2 RFC. Confidential apps can securely store secrets. Examples of non-confidential apps are full web-based or CLIs.")

  public Boolean getIsConfidential() {
    return isConfidential;
  }


  public void setIsConfidential(Boolean isConfidential) {
    
    
    
    this.isConfidential = isConfidential;
  }


  public AppResourceAttributesWithSecret isPublic(Boolean isPublic) {
    
    
    
    
    this.isPublic = isPublic;
    return this;
  }

   /**
   * A boolean to indicate if an app is publicly available or not.
   * @return isPublic
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "A boolean to indicate if an app is publicly available or not.")

  public Boolean getIsPublic() {
    return isPublic;
  }


  public void setIsPublic(Boolean isPublic) {
    
    
    
    this.isPublic = isPublic;
  }


  public AppResourceAttributesWithSecret name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * New name of the app to display to users during authorization flow.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My App", required = true, value = "New name of the app to display to users during authorization flow.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public AppResourceAttributesWithSecret orgPublicId(UUID orgPublicId) {
    
    
    
    
    this.orgPublicId = orgPublicId;
    return this;
  }

   /**
   * Get orgPublicId
   * @return orgPublicId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getOrgPublicId() {
    return orgPublicId;
  }


  public void setOrgPublicId(UUID orgPublicId) {
    
    
    
    this.orgPublicId = orgPublicId;
  }


  public AppResourceAttributesWithSecret redirectUris(List<URI> redirectUris) {
    
    
    
    
    this.redirectUris = redirectUris;
    return this;
  }

  public AppResourceAttributesWithSecret addRedirectUrisItem(URI redirectUrisItem) {
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * List of allowed redirect URIs to call back after authentication.
   * @return redirectUris
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"https://example.com/callback\"]", required = true, value = "List of allowed redirect URIs to call back after authentication.")

  public List<URI> getRedirectUris() {
    return redirectUris;
  }


  public void setRedirectUris(List<URI> redirectUris) {
    
    
    
    this.redirectUris = redirectUris;
  }


  public AppResourceAttributesWithSecret scopes(List<String> scopes) {
    
    
    
    
    this.scopes = scopes;
    return this;
  }

  public AppResourceAttributesWithSecret addScopesItem(String scopesItem) {
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * The scopes this app is allowed to request during authorization.
   * @return scopes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The scopes this app is allowed to request during authorization.")

  public List<String> getScopes() {
    return scopes;
  }


  public void setScopes(List<String> scopes) {
    
    
    
    this.scopes = scopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppResourceAttributesWithSecret instance itself
   */
  public AppResourceAttributesWithSecret putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppResourceAttributesWithSecret appResourceAttributesWithSecret = (AppResourceAttributesWithSecret) o;
    return Objects.equals(this.accessTokenTtlSeconds, appResourceAttributesWithSecret.accessTokenTtlSeconds) &&
        Objects.equals(this.clientId, appResourceAttributesWithSecret.clientId) &&
        Objects.equals(this.clientSecret, appResourceAttributesWithSecret.clientSecret) &&
        Objects.equals(this.context, appResourceAttributesWithSecret.context) &&
        Objects.equals(this.grantType, appResourceAttributesWithSecret.grantType) &&
        Objects.equals(this.isConfidential, appResourceAttributesWithSecret.isConfidential) &&
        Objects.equals(this.isPublic, appResourceAttributesWithSecret.isPublic) &&
        Objects.equals(this.name, appResourceAttributesWithSecret.name) &&
        Objects.equals(this.orgPublicId, appResourceAttributesWithSecret.orgPublicId) &&
        Objects.equals(this.redirectUris, appResourceAttributesWithSecret.redirectUris) &&
        Objects.equals(this.scopes, appResourceAttributesWithSecret.scopes)&&
        Objects.equals(this.additionalProperties, appResourceAttributesWithSecret.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenTtlSeconds, clientId, clientSecret, context, grantType, isConfidential, isPublic, name, orgPublicId, redirectUris, scopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppResourceAttributesWithSecret {\n");
    sb.append("    accessTokenTtlSeconds: ").append(toIndentedString(accessTokenTtlSeconds)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    isConfidential: ").append(toIndentedString(isConfidential)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgPublicId: ").append(toIndentedString(orgPublicId)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token_ttl_seconds");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("context");
    openapiFields.add("grant_type");
    openapiFields.add("is_confidential");
    openapiFields.add("is_public");
    openapiFields.add("name");
    openapiFields.add("org_public_id");
    openapiFields.add("redirect_uris");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_token_ttl_seconds");
    openapiRequiredFields.add("client_id");
    openapiRequiredFields.add("client_secret");
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("grant_type");
    openapiRequiredFields.add("is_confidential");
    openapiRequiredFields.add("is_public");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("redirect_uris");
    openapiRequiredFields.add("scopes");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppResourceAttributesWithSecret
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppResourceAttributesWithSecret.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppResourceAttributesWithSecret is not found in the empty JSON string", AppResourceAttributesWithSecret.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppResourceAttributesWithSecret.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if (!jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("org_public_id") != null && !jsonObj.get("org_public_id").isJsonNull()) && !jsonObj.get("org_public_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_public_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_public_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("redirect_uris") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scopes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppResourceAttributesWithSecret.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppResourceAttributesWithSecret' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppResourceAttributesWithSecret> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppResourceAttributesWithSecret.class));

       return (TypeAdapter<T>) new TypeAdapter<AppResourceAttributesWithSecret>() {
           @Override
           public void write(JsonWriter out, AppResourceAttributesWithSecret value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppResourceAttributesWithSecret read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppResourceAttributesWithSecret instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppResourceAttributesWithSecret given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppResourceAttributesWithSecret
  * @throws IOException if the JSON string is invalid with respect to AppResourceAttributesWithSecret
  */
  public static AppResourceAttributesWithSecret fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppResourceAttributesWithSecret.class);
  }

 /**
  * Convert an instance of AppResourceAttributesWithSecret to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


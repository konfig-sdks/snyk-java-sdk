/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CommonIssueModelAttributesCoordinatesInner;
import com.konfigthis.client.model.CommonIssueModelAttributesProblemsInner;
import com.konfigthis.client.model.Severity;
import com.konfigthis.client.model.Slots;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CommonIssueModelAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CommonIssueModelAttributes {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private List<CommonIssueModelAttributesCoordinatesInner> coordinates = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * The type from enumeration of the issue’s severity level. This is usually set from the issue’s producer, but can be overridden by policies.
   */
  @JsonAdapter(EffectiveSeverityLevelEnum.Adapter.class)
 public enum EffectiveSeverityLevelEnum {
    INFO("info"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high"),
    
    CRITICAL("critical");

    private String value;

    EffectiveSeverityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveSeverityLevelEnum fromValue(String value) {
      for (EffectiveSeverityLevelEnum b : EffectiveSeverityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveSeverityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveSeverityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveSeverityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveSeverityLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_SEVERITY_LEVEL = "effective_severity_level";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_SEVERITY_LEVEL)
  private EffectiveSeverityLevelEnum effectiveSeverityLevel;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_PROBLEMS = "problems";
  @SerializedName(SERIALIZED_NAME_PROBLEMS)
  private List<CommonIssueModelAttributesProblemsInner> problems = null;

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  private List<Severity> severities = null;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Slots slots;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CommonIssueModelAttributes() {
  }

  public CommonIssueModelAttributes title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * A human-readable title for this issue.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "XML External Entity (XXE) Injection", value = "A human-readable title for this issue.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CommonIssueModelAttributes description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description of the issue in Markdown format
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "## Overview\\n\\n\\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection.", value = "A description of the issue in Markdown format")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CommonIssueModelAttributes coordinates(List<CommonIssueModelAttributesCoordinatesInner> coordinates) {
    
    
    
    
    this.coordinates = coordinates;
    return this;
  }

  public CommonIssueModelAttributes addCoordinatesItem(CommonIssueModelAttributesCoordinatesInner coordinatesItem) {
    if (this.coordinates == null) {
      this.coordinates = new ArrayList<>();
    }
    this.coordinates.add(coordinatesItem);
    return this;
  }

   /**
   * Get coordinates
   * @return coordinates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommonIssueModelAttributesCoordinatesInner> getCoordinates() {
    return coordinates;
  }


  public void setCoordinates(List<CommonIssueModelAttributesCoordinatesInner> coordinates) {
    
    
    
    this.coordinates = coordinates;
  }


  public CommonIssueModelAttributes createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-16T13:51:13Z", value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public CommonIssueModelAttributes effectiveSeverityLevel(EffectiveSeverityLevelEnum effectiveSeverityLevel) {
    
    
    
    
    this.effectiveSeverityLevel = effectiveSeverityLevel;
    return this;
  }

   /**
   * The type from enumeration of the issue’s severity level. This is usually set from the issue’s producer, but can be overridden by policies.
   * @return effectiveSeverityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type from enumeration of the issue’s severity level. This is usually set from the issue’s producer, but can be overridden by policies.")

  public EffectiveSeverityLevelEnum getEffectiveSeverityLevel() {
    return effectiveSeverityLevel;
  }


  public void setEffectiveSeverityLevel(EffectiveSeverityLevelEnum effectiveSeverityLevel) {
    
    
    
    this.effectiveSeverityLevel = effectiveSeverityLevel;
  }


  public CommonIssueModelAttributes key(String key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * The Snyk vulnerability ID.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SNYK-JAVA-COMFASTERXMLWOODSTOX-2928754", value = "The Snyk vulnerability ID.")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    
    
    
    this.key = key;
  }


  public CommonIssueModelAttributes problems(List<CommonIssueModelAttributesProblemsInner> problems) {
    
    
    
    
    this.problems = problems;
    return this;
  }

  public CommonIssueModelAttributes addProblemsItem(CommonIssueModelAttributesProblemsInner problemsItem) {
    if (this.problems == null) {
      this.problems = new ArrayList<>();
    }
    this.problems.add(problemsItem);
    return this;
  }

   /**
   * Get problems
   * @return problems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommonIssueModelAttributesProblemsInner> getProblems() {
    return problems;
  }


  public void setProblems(List<CommonIssueModelAttributesProblemsInner> problems) {
    
    
    
    this.problems = problems;
  }


  public CommonIssueModelAttributes severities(List<Severity> severities) {
    
    
    
    
    this.severities = severities;
    return this;
  }

  public CommonIssueModelAttributes addSeveritiesItem(Severity severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

   /**
   * The severity level of the vulnerability: ‘low’, ‘medium’, ‘high’ or ‘critical’.
   * @return severities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The severity level of the vulnerability: ‘low’, ‘medium’, ‘high’ or ‘critical’.")

  public List<Severity> getSeverities() {
    return severities;
  }


  public void setSeverities(List<Severity> severities) {
    
    
    
    this.severities = severities;
  }


  public CommonIssueModelAttributes slots(Slots slots) {
    
    
    
    
    this.slots = slots;
    return this;
  }

   /**
   * Get slots
   * @return slots
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Slots getSlots() {
    return slots;
  }


  public void setSlots(Slots slots) {
    
    
    
    this.slots = slots;
  }


  public CommonIssueModelAttributes type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The issue type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "package_vulnerability", value = "The issue type")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public CommonIssueModelAttributes updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * When the vulnerability information was last modified.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-16T14:00:24.315507Z", value = "When the vulnerability information was last modified.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CommonIssueModelAttributes instance itself
   */
  public CommonIssueModelAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonIssueModelAttributes commonIssueModelAttributes = (CommonIssueModelAttributes) o;
    return Objects.equals(this.title, commonIssueModelAttributes.title) &&
        Objects.equals(this.description, commonIssueModelAttributes.description) &&
        Objects.equals(this.coordinates, commonIssueModelAttributes.coordinates) &&
        Objects.equals(this.createdAt, commonIssueModelAttributes.createdAt) &&
        Objects.equals(this.effectiveSeverityLevel, commonIssueModelAttributes.effectiveSeverityLevel) &&
        Objects.equals(this.key, commonIssueModelAttributes.key) &&
        Objects.equals(this.problems, commonIssueModelAttributes.problems) &&
        Objects.equals(this.severities, commonIssueModelAttributes.severities) &&
        Objects.equals(this.slots, commonIssueModelAttributes.slots) &&
        Objects.equals(this.type, commonIssueModelAttributes.type) &&
        Objects.equals(this.updatedAt, commonIssueModelAttributes.updatedAt)&&
        Objects.equals(this.additionalProperties, commonIssueModelAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, coordinates, createdAt, effectiveSeverityLevel, key, problems, severities, slots, type, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonIssueModelAttributes {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    effectiveSeverityLevel: ").append(toIndentedString(effectiveSeverityLevel)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    problems: ").append(toIndentedString(problems)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("coordinates");
    openapiFields.add("created_at");
    openapiFields.add("effective_severity_level");
    openapiFields.add("key");
    openapiFields.add("problems");
    openapiFields.add("severities");
    openapiFields.add("slots");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommonIssueModelAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommonIssueModelAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonIssueModelAttributes is not found in the empty JSON string", CommonIssueModelAttributes.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        JsonArray jsonArraycoordinates = jsonObj.getAsJsonArray("coordinates");
        if (jsonArraycoordinates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coordinates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coordinates` to be an array in the JSON string but got `%s`", jsonObj.get("coordinates").toString()));
          }

          // validate the optional field `coordinates` (array)
          for (int i = 0; i < jsonArraycoordinates.size(); i++) {
            CommonIssueModelAttributesCoordinatesInner.validateJsonObject(jsonArraycoordinates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("effective_severity_level") != null && !jsonObj.get("effective_severity_level").isJsonNull()) && !jsonObj.get("effective_severity_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_severity_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_severity_level").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("problems") != null && !jsonObj.get("problems").isJsonNull()) {
        JsonArray jsonArrayproblems = jsonObj.getAsJsonArray("problems");
        if (jsonArrayproblems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("problems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `problems` to be an array in the JSON string but got `%s`", jsonObj.get("problems").toString()));
          }

          // validate the optional field `problems` (array)
          for (int i = 0; i < jsonArrayproblems.size(); i++) {
            CommonIssueModelAttributesProblemsInner.validateJsonObject(jsonArrayproblems.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("severities") != null && !jsonObj.get("severities").isJsonNull()) {
        JsonArray jsonArrayseverities = jsonObj.getAsJsonArray("severities");
        if (jsonArrayseverities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("severities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
          }

          // validate the optional field `severities` (array)
          for (int i = 0; i < jsonArrayseverities.size(); i++) {
            Severity.validateJsonObject(jsonArrayseverities.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `slots`
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        Slots.validateJsonObject(jsonObj.getAsJsonObject("slots"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonIssueModelAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonIssueModelAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonIssueModelAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonIssueModelAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonIssueModelAttributes>() {
           @Override
           public void write(JsonWriter out, CommonIssueModelAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonIssueModelAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CommonIssueModelAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonIssueModelAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonIssueModelAttributes
  * @throws IOException if the JSON string is invalid with respect to CommonIssueModelAttributes
  */
  public static CommonIssueModelAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonIssueModelAttributes.class);
  }

 /**
  * Convert an instance of CommonIssueModelAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


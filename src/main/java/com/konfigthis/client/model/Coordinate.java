/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Remedy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Coordinate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Coordinate {
  public static final String SERIALIZED_NAME_IS_FIXABLE_MANUALLY = "is_fixable_manually";
  @SerializedName(SERIALIZED_NAME_IS_FIXABLE_MANUALLY)
  private Boolean isFixableManually;

  public static final String SERIALIZED_NAME_IS_FIXABLE_SNYK = "is_fixable_snyk";
  @SerializedName(SERIALIZED_NAME_IS_FIXABLE_SNYK)
  private Boolean isFixableSnyk;

  public static final String SERIALIZED_NAME_IS_FIXABLE_UPSTREAM = "is_fixable_upstream";
  @SerializedName(SERIALIZED_NAME_IS_FIXABLE_UPSTREAM)
  private Boolean isFixableUpstream;

  public static final String SERIALIZED_NAME_IS_PATCHABLE = "is_patchable";
  @SerializedName(SERIALIZED_NAME_IS_PATCHABLE)
  private Boolean isPatchable;

  public static final String SERIALIZED_NAME_IS_PINNABLE = "is_pinnable";
  @SerializedName(SERIALIZED_NAME_IS_PINNABLE)
  private Boolean isPinnable;

  public static final String SERIALIZED_NAME_IS_UPGRADEABLE = "is_upgradeable";
  @SerializedName(SERIALIZED_NAME_IS_UPGRADEABLE)
  private Boolean isUpgradeable;

  public static final String SERIALIZED_NAME_REACHABILITY = "reachability";
  @SerializedName(SERIALIZED_NAME_REACHABILITY)
  private String reachability;

  public static final String SERIALIZED_NAME_REMEDIES = "remedies";
  @SerializedName(SERIALIZED_NAME_REMEDIES)
  private List<Remedy> remedies = null;

  public static final String SERIALIZED_NAME_REPRESENTATIONS = "representations";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIONS)
  private List<Object> representations = null;

  public Coordinate() {
  }

  public Coordinate isFixableManually(Boolean isFixableManually) {
    
    
    
    
    this.isFixableManually = isFixableManually;
    return this;
  }

   /**
   * Get isFixableManually
   * @return isFixableManually
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsFixableManually() {
    return isFixableManually;
  }


  public void setIsFixableManually(Boolean isFixableManually) {
    
    
    
    this.isFixableManually = isFixableManually;
  }


  public Coordinate isFixableSnyk(Boolean isFixableSnyk) {
    
    
    
    
    this.isFixableSnyk = isFixableSnyk;
    return this;
  }

   /**
   * Get isFixableSnyk
   * @return isFixableSnyk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsFixableSnyk() {
    return isFixableSnyk;
  }


  public void setIsFixableSnyk(Boolean isFixableSnyk) {
    
    
    
    this.isFixableSnyk = isFixableSnyk;
  }


  public Coordinate isFixableUpstream(Boolean isFixableUpstream) {
    
    
    
    
    this.isFixableUpstream = isFixableUpstream;
    return this;
  }

   /**
   * Get isFixableUpstream
   * @return isFixableUpstream
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsFixableUpstream() {
    return isFixableUpstream;
  }


  public void setIsFixableUpstream(Boolean isFixableUpstream) {
    
    
    
    this.isFixableUpstream = isFixableUpstream;
  }


  public Coordinate isPatchable(Boolean isPatchable) {
    
    
    
    
    this.isPatchable = isPatchable;
    return this;
  }

   /**
   * Get isPatchable
   * @return isPatchable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPatchable() {
    return isPatchable;
  }


  public void setIsPatchable(Boolean isPatchable) {
    
    
    
    this.isPatchable = isPatchable;
  }


  public Coordinate isPinnable(Boolean isPinnable) {
    
    
    
    
    this.isPinnable = isPinnable;
    return this;
  }

   /**
   * Get isPinnable
   * @return isPinnable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPinnable() {
    return isPinnable;
  }


  public void setIsPinnable(Boolean isPinnable) {
    
    
    
    this.isPinnable = isPinnable;
  }


  public Coordinate isUpgradeable(Boolean isUpgradeable) {
    
    
    
    
    this.isUpgradeable = isUpgradeable;
    return this;
  }

   /**
   * Get isUpgradeable
   * @return isUpgradeable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsUpgradeable() {
    return isUpgradeable;
  }


  public void setIsUpgradeable(Boolean isUpgradeable) {
    
    
    
    this.isUpgradeable = isUpgradeable;
  }


  public Coordinate reachability(String reachability) {
    
    
    
    
    this.reachability = reachability;
    return this;
  }

   /**
   * Get reachability
   * @return reachability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReachability() {
    return reachability;
  }


  public void setReachability(String reachability) {
    
    
    
    this.reachability = reachability;
  }


  public Coordinate remedies(List<Remedy> remedies) {
    
    
    
    
    this.remedies = remedies;
    return this;
  }

  public Coordinate addRemediesItem(Remedy remediesItem) {
    if (this.remedies == null) {
      this.remedies = new ArrayList<>();
    }
    this.remedies.add(remediesItem);
    return this;
  }

   /**
   * Get remedies
   * @return remedies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Remedy> getRemedies() {
    return remedies;
  }


  public void setRemedies(List<Remedy> remedies) {
    
    
    
    this.remedies = remedies;
  }


  public Coordinate representations(List<Object> representations) {
    
    
    
    
    this.representations = representations;
    return this;
  }

  public Coordinate addRepresentationsItem(Object representationsItem) {
    if (this.representations == null) {
      this.representations = new ArrayList<>();
    }
    this.representations.add(representationsItem);
    return this;
  }

   /**
   * A list of precise locations that surface an issue. A coordinate may have multiple representations. For example, a package vulnerability may be represented both by its package dependency graph traversal, and by the location in a package manifest that introduced the dependency. 
   * @return representations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of precise locations that surface an issue. A coordinate may have multiple representations. For example, a package vulnerability may be represented both by its package dependency graph traversal, and by the location in a package manifest that introduced the dependency. ")

  public List<Object> getRepresentations() {
    return representations;
  }


  public void setRepresentations(List<Object> representations) {
    
    
    
    this.representations = representations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Coordinate instance itself
   */
  public Coordinate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coordinate coordinate = (Coordinate) o;
    return Objects.equals(this.isFixableManually, coordinate.isFixableManually) &&
        Objects.equals(this.isFixableSnyk, coordinate.isFixableSnyk) &&
        Objects.equals(this.isFixableUpstream, coordinate.isFixableUpstream) &&
        Objects.equals(this.isPatchable, coordinate.isPatchable) &&
        Objects.equals(this.isPinnable, coordinate.isPinnable) &&
        Objects.equals(this.isUpgradeable, coordinate.isUpgradeable) &&
        Objects.equals(this.reachability, coordinate.reachability) &&
        Objects.equals(this.remedies, coordinate.remedies) &&
        Objects.equals(this.representations, coordinate.representations)&&
        Objects.equals(this.additionalProperties, coordinate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFixableManually, isFixableSnyk, isFixableUpstream, isPatchable, isPinnable, isUpgradeable, reachability, remedies, representations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coordinate {\n");
    sb.append("    isFixableManually: ").append(toIndentedString(isFixableManually)).append("\n");
    sb.append("    isFixableSnyk: ").append(toIndentedString(isFixableSnyk)).append("\n");
    sb.append("    isFixableUpstream: ").append(toIndentedString(isFixableUpstream)).append("\n");
    sb.append("    isPatchable: ").append(toIndentedString(isPatchable)).append("\n");
    sb.append("    isPinnable: ").append(toIndentedString(isPinnable)).append("\n");
    sb.append("    isUpgradeable: ").append(toIndentedString(isUpgradeable)).append("\n");
    sb.append("    reachability: ").append(toIndentedString(reachability)).append("\n");
    sb.append("    remedies: ").append(toIndentedString(remedies)).append("\n");
    sb.append("    representations: ").append(toIndentedString(representations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_fixable_manually");
    openapiFields.add("is_fixable_snyk");
    openapiFields.add("is_fixable_upstream");
    openapiFields.add("is_patchable");
    openapiFields.add("is_pinnable");
    openapiFields.add("is_upgradeable");
    openapiFields.add("reachability");
    openapiFields.add("remedies");
    openapiFields.add("representations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Coordinate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Coordinate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Coordinate is not found in the empty JSON string", Coordinate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("reachability") != null && !jsonObj.get("reachability").isJsonNull()) && !jsonObj.get("reachability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reachability").toString()));
      }
      if (jsonObj.get("remedies") != null && !jsonObj.get("remedies").isJsonNull()) {
        JsonArray jsonArrayremedies = jsonObj.getAsJsonArray("remedies");
        if (jsonArrayremedies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remedies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remedies` to be an array in the JSON string but got `%s`", jsonObj.get("remedies").toString()));
          }

          // validate the optional field `remedies` (array)
          for (int i = 0; i < jsonArrayremedies.size(); i++) {
            Remedy.validateJsonObject(jsonArrayremedies.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("representations") != null && !jsonObj.get("representations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `representations` to be an array in the JSON string but got `%s`", jsonObj.get("representations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Coordinate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Coordinate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Coordinate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Coordinate.class));

       return (TypeAdapter<T>) new TypeAdapter<Coordinate>() {
           @Override
           public void write(JsonWriter out, Coordinate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Coordinate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Coordinate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Coordinate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Coordinate
  * @throws IOException if the JSON string is invalid with respect to Coordinate
  */
  public static Coordinate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Coordinate.class);
  }

 /**
  * Convert an instance of Coordinate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


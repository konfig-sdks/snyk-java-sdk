/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.VersioningSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomBaseImageAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomBaseImageAttributes {
  public static final String SERIALIZED_NAME_INCLUDE_IN_RECOMMENDATIONS = "include_in_recommendations";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_RECOMMENDATIONS)
  private Boolean includeInRecommendations;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private UUID projectId;

  public static final String SERIALIZED_NAME_VERSIONING_SCHEMA = "versioning_schema";
  @SerializedName(SERIALIZED_NAME_VERSIONING_SCHEMA)
  private VersioningSchema versioningSchema;

  public CustomBaseImageAttributes() {
  }

  public CustomBaseImageAttributes includeInRecommendations(Boolean includeInRecommendations) {
    
    
    
    
    this.includeInRecommendations = includeInRecommendations;
    return this;
  }

   /**
   * Whether this image should be recommended as a base image upgrade.  If set to true, this image could be shown as a base image upgrade to other projects. If set to false this image will never be recommended as an upgrade. 
   * @return includeInRecommendations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether this image should be recommended as a base image upgrade.  If set to true, this image could be shown as a base image upgrade to other projects. If set to false this image will never be recommended as an upgrade. ")

  public Boolean getIncludeInRecommendations() {
    return includeInRecommendations;
  }


  public void setIncludeInRecommendations(Boolean includeInRecommendations) {
    
    
    
    this.includeInRecommendations = includeInRecommendations;
  }


  public CustomBaseImageAttributes projectId(UUID projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * The ID of the container project that the custom base image is based off of. The attributes of this custom base image are taken from the latest snapshot at the time of creation. This means that no changes should be made to the original project after the creation of the custom base image, as new snapshots created from any changes will NOT be picked up. 
   * @return projectId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2cab3939-d112-4ef0-836d-e09c87cbe69b", required = true, value = "The ID of the container project that the custom base image is based off of. The attributes of this custom base image are taken from the latest snapshot at the time of creation. This means that no changes should be made to the original project after the creation of the custom base image, as new snapshots created from any changes will NOT be picked up. ")

  public UUID getProjectId() {
    return projectId;
  }


  public void setProjectId(UUID projectId) {
    
    
    
    this.projectId = projectId;
  }


  public CustomBaseImageAttributes versioningSchema(VersioningSchema versioningSchema) {
    
    
    
    
    this.versioningSchema = versioningSchema;
    return this;
  }

   /**
   * Get versioningSchema
   * @return versioningSchema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VersioningSchema getVersioningSchema() {
    return versioningSchema;
  }


  public void setVersioningSchema(VersioningSchema versioningSchema) {
    
    
    
    this.versioningSchema = versioningSchema;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomBaseImageAttributes instance itself
   */
  public CustomBaseImageAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomBaseImageAttributes customBaseImageAttributes = (CustomBaseImageAttributes) o;
    return Objects.equals(this.includeInRecommendations, customBaseImageAttributes.includeInRecommendations) &&
        Objects.equals(this.projectId, customBaseImageAttributes.projectId) &&
        Objects.equals(this.versioningSchema, customBaseImageAttributes.versioningSchema)&&
        Objects.equals(this.additionalProperties, customBaseImageAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeInRecommendations, projectId, versioningSchema, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomBaseImageAttributes {\n");
    sb.append("    includeInRecommendations: ").append(toIndentedString(includeInRecommendations)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    versioningSchema: ").append(toIndentedString(versioningSchema)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("include_in_recommendations");
    openapiFields.add("project_id");
    openapiFields.add("versioning_schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("include_in_recommendations");
    openapiRequiredFields.add("project_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomBaseImageAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomBaseImageAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomBaseImageAttributes is not found in the empty JSON string", CustomBaseImageAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomBaseImageAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      // validate the optional field `versioning_schema`
      if (jsonObj.get("versioning_schema") != null && !jsonObj.get("versioning_schema").isJsonNull()) {
        VersioningSchema.validateJsonObject(jsonObj.getAsJsonObject("versioning_schema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomBaseImageAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomBaseImageAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomBaseImageAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomBaseImageAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomBaseImageAttributes>() {
           @Override
           public void write(JsonWriter out, CustomBaseImageAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomBaseImageAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomBaseImageAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomBaseImageAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomBaseImageAttributes
  * @throws IOException if the JSON string is invalid with respect to CustomBaseImageAttributes
  */
  public static CustomBaseImageAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomBaseImageAttributes.class);
  }

 /**
  * Convert an instance of CustomBaseImageAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


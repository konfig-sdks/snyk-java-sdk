/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PatchProjectRequestDataAttributesTagsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PatchProjectRequestDataAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PatchProjectRequestDataAttributes {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<PatchProjectRequestDataAttributesTagsInner> tags = null;

  /**
   * Gets or Sets businessCriticality
   */
  @JsonAdapter(BusinessCriticalityEnum.Adapter.class)
 public enum BusinessCriticalityEnum {
    CRITICAL("critical"),
    
    HIGH("high"),
    
    MEDIUM("medium"),
    
    LOW("low");

    private String value;

    BusinessCriticalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessCriticalityEnum fromValue(String value) {
      for (BusinessCriticalityEnum b : BusinessCriticalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessCriticalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessCriticalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessCriticalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessCriticalityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_CRITICALITY = "business_criticality";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CRITICALITY)
  private List<BusinessCriticalityEnum> businessCriticality = null;

  /**
   * Gets or Sets environment
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
 public enum EnvironmentEnum {
    FRONTEND("frontend"),
    
    BACKEND("backend"),
    
    INTERNAL("internal"),
    
    EXTERNAL("external"),
    
    MOBILE("mobile"),
    
    SAAS("saas"),
    
    ONPREM("onprem"),
    
    HOSTED("hosted"),
    
    DISTRIBUTED("distributed");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String value) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<EnvironmentEnum> environment = null;

  /**
   * Gets or Sets lifecycle
   */
  @JsonAdapter(LifecycleEnum.Adapter.class)
 public enum LifecycleEnum {
    PRODUCTION("production"),
    
    DEVELOPMENT("development"),
    
    SANDBOX("sandbox");

    private String value;

    LifecycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleEnum fromValue(String value) {
      for (LifecycleEnum b : LifecycleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifecycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifecycleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE = "lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private List<LifecycleEnum> lifecycle = null;

  /**
   * Test frequency of a project. Also controls when automated PRs may be created.
   */
  @JsonAdapter(TestFrequencyEnum.Adapter.class)
 public enum TestFrequencyEnum {
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    NEVER("never");

    private String value;

    TestFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestFrequencyEnum fromValue(String value) {
      for (TestFrequencyEnum b : TestFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEST_FREQUENCY = "test_frequency";
  @SerializedName(SERIALIZED_NAME_TEST_FREQUENCY)
  private TestFrequencyEnum testFrequency;

  public PatchProjectRequestDataAttributes() {
  }

  public PatchProjectRequestDataAttributes tags(List<PatchProjectRequestDataAttributesTagsInner> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public PatchProjectRequestDataAttributes addTagsItem(PatchProjectRequestDataAttributesTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"key\":\"tag-key\",\"value\":\"tag-value\"}]", value = "")

  public List<PatchProjectRequestDataAttributesTagsInner> getTags() {
    return tags;
  }


  public void setTags(List<PatchProjectRequestDataAttributesTagsInner> tags) {
    
    
    
    this.tags = tags;
  }


  public PatchProjectRequestDataAttributes businessCriticality(List<BusinessCriticalityEnum> businessCriticality) {
    
    
    
    
    this.businessCriticality = businessCriticality;
    return this;
  }

  public PatchProjectRequestDataAttributes addBusinessCriticalityItem(BusinessCriticalityEnum businessCriticalityItem) {
    if (this.businessCriticality == null) {
      this.businessCriticality = new ArrayList<>();
    }
    this.businessCriticality.add(businessCriticalityItem);
    return this;
  }

   /**
   * Get businessCriticality
   * @return businessCriticality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"medium\"]", value = "")

  public List<BusinessCriticalityEnum> getBusinessCriticality() {
    return businessCriticality;
  }


  public void setBusinessCriticality(List<BusinessCriticalityEnum> businessCriticality) {
    
    
    
    this.businessCriticality = businessCriticality;
  }


  public PatchProjectRequestDataAttributes environment(List<EnvironmentEnum> environment) {
    
    
    
    
    this.environment = environment;
    return this;
  }

  public PatchProjectRequestDataAttributes addEnvironmentItem(EnvironmentEnum environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"external\",\"hosted\"]", value = "")

  public List<EnvironmentEnum> getEnvironment() {
    return environment;
  }


  public void setEnvironment(List<EnvironmentEnum> environment) {
    
    
    
    this.environment = environment;
  }


  public PatchProjectRequestDataAttributes lifecycle(List<LifecycleEnum> lifecycle) {
    
    
    
    
    this.lifecycle = lifecycle;
    return this;
  }

  public PatchProjectRequestDataAttributes addLifecycleItem(LifecycleEnum lifecycleItem) {
    if (this.lifecycle == null) {
      this.lifecycle = new ArrayList<>();
    }
    this.lifecycle.add(lifecycleItem);
    return this;
  }

   /**
   * Get lifecycle
   * @return lifecycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"production\"]", value = "")

  public List<LifecycleEnum> getLifecycle() {
    return lifecycle;
  }


  public void setLifecycle(List<LifecycleEnum> lifecycle) {
    
    
    
    this.lifecycle = lifecycle;
  }


  public PatchProjectRequestDataAttributes testFrequency(TestFrequencyEnum testFrequency) {
    
    
    
    
    this.testFrequency = testFrequency;
    return this;
  }

   /**
   * Test frequency of a project. Also controls when automated PRs may be created.
   * @return testFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DAILY", value = "Test frequency of a project. Also controls when automated PRs may be created.")

  public TestFrequencyEnum getTestFrequency() {
    return testFrequency;
  }


  public void setTestFrequency(TestFrequencyEnum testFrequency) {
    
    
    
    this.testFrequency = testFrequency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PatchProjectRequestDataAttributes instance itself
   */
  public PatchProjectRequestDataAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchProjectRequestDataAttributes patchProjectRequestDataAttributes = (PatchProjectRequestDataAttributes) o;
    return Objects.equals(this.tags, patchProjectRequestDataAttributes.tags) &&
        Objects.equals(this.businessCriticality, patchProjectRequestDataAttributes.businessCriticality) &&
        Objects.equals(this.environment, patchProjectRequestDataAttributes.environment) &&
        Objects.equals(this.lifecycle, patchProjectRequestDataAttributes.lifecycle) &&
        Objects.equals(this.testFrequency, patchProjectRequestDataAttributes.testFrequency)&&
        Objects.equals(this.additionalProperties, patchProjectRequestDataAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, businessCriticality, environment, lifecycle, testFrequency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchProjectRequestDataAttributes {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    businessCriticality: ").append(toIndentedString(businessCriticality)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    testFrequency: ").append(toIndentedString(testFrequency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("business_criticality");
    openapiFields.add("environment");
    openapiFields.add("lifecycle");
    openapiFields.add("test_frequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PatchProjectRequestDataAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PatchProjectRequestDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchProjectRequestDataAttributes is not found in the empty JSON string", PatchProjectRequestDataAttributes.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            PatchProjectRequestDataAttributesTagsInner.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("business_criticality") != null && !jsonObj.get("business_criticality").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `business_criticality` to be an array in the JSON string but got `%s`", jsonObj.get("business_criticality").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycle` to be an array in the JSON string but got `%s`", jsonObj.get("lifecycle").toString()));
      }
      if ((jsonObj.get("test_frequency") != null && !jsonObj.get("test_frequency").isJsonNull()) && !jsonObj.get("test_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_frequency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchProjectRequestDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchProjectRequestDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchProjectRequestDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchProjectRequestDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchProjectRequestDataAttributes>() {
           @Override
           public void write(JsonWriter out, PatchProjectRequestDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchProjectRequestDataAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PatchProjectRequestDataAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PatchProjectRequestDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PatchProjectRequestDataAttributes
  * @throws IOException if the JSON string is invalid with respect to PatchProjectRequestDataAttributes
  */
  public static PatchProjectRequestDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchProjectRequestDataAttributes.class);
  }

 /**
  * Convert an instance of PatchProjectRequestDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


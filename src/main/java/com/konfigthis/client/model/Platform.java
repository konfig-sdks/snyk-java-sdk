/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Platform
 */
@JsonAdapter(Platform.Adapter.class)public enum Platform {
  
  AIX_PPC64("aix/ppc64"),
  
  ANDROID_386("android/386"),
  
  ANDROID_AMD64("android/amd64"),
  
  ANDROID_ARM("android/arm"),
  
  ANDROID_ARM_V5("android/arm/v5"),
  
  ANDROID_ARM_V6("android/arm/v6"),
  
  ANDROID_ARM_V7("android/arm/v7"),
  
  ANDROID_ARM64("android/arm64"),
  
  ANDROID_ARM64_V8("android/arm64/v8"),
  
  DARWIN_AMD64("darwin/amd64"),
  
  DARWIN_ARM("darwin/arm"),
  
  DARWIN_ARM_V5("darwin/arm/v5"),
  
  DARWIN_ARM_V6("darwin/arm/v6"),
  
  DARWIN_ARM_V7("darwin/arm/v7"),
  
  DARWIN_ARM64("darwin/arm64"),
  
  DARWIN_ARM64_V8("darwin/arm64/v8"),
  
  DRAGONFLY_AMD64("dragonfly/amd64"),
  
  FREEBSD_386("freebsd/386"),
  
  FREEBSD_AMD64("freebsd/amd64"),
  
  FREEBSD_ARM("freebsd/arm"),
  
  FREEBSD_ARM_V5("freebsd/arm/v5"),
  
  FREEBSD_ARM_V6("freebsd/arm/v6"),
  
  FREEBSD_ARM_V7("freebsd/arm/v7"),
  
  ILLUMOS_AMD64("illumos/amd64"),
  
  IOS_ARM64("ios/arm64"),
  
  IOS_ARM64_V8("ios/arm64/v8"),
  
  JS_WASM("js/wasm"),
  
  LINUX_386("linux/386"),
  
  LINUX_AMD64("linux/amd64"),
  
  LINUX_ARM("linux/arm"),
  
  LINUX_ARM_V5("linux/arm/v5"),
  
  LINUX_ARM_V6("linux/arm/v6"),
  
  LINUX_ARM_V7("linux/arm/v7"),
  
  LINUX_ARM64("linux/arm64"),
  
  LINUX_ARM64_V8("linux/arm64/v8"),
  
  LINUX_LOONG64("linux/loong64"),
  
  LINUX_MIPS("linux/mips"),
  
  LINUX_MIPSLE("linux/mipsle"),
  
  LINUX_MIPS64("linux/mips64"),
  
  LINUX_MIPS64LE("linux/mips64le"),
  
  LINUX_PPC64("linux/ppc64"),
  
  LINUX_PPC64LE("linux/ppc64le"),
  
  LINUX_RISCV64("linux/riscv64"),
  
  LINUX_S390X("linux/s390x"),
  
  LINUX_X86_64("linux/x86_64"),
  
  NETBSD_386("netbsd/386"),
  
  NETBSD_AMD64("netbsd/amd64"),
  
  NETBSD_ARM("netbsd/arm"),
  
  NETBSD_ARM_V5("netbsd/arm/v5"),
  
  NETBSD_ARM_V6("netbsd/arm/v6"),
  
  NETBSD_ARM_V7("netbsd/arm/v7"),
  
  OPENBSD_386("openbsd/386"),
  
  OPENBSD_AMD64("openbsd/amd64"),
  
  OPENBSD_ARM("openbsd/arm"),
  
  OPENBSD_ARM_V5("openbsd/arm/v5"),
  
  OPENBSD_ARM_V6("openbsd/arm/v6"),
  
  OPENBSD_ARM_V7("openbsd/arm/v7"),
  
  OPENBSD_ARM64("openbsd/arm64"),
  
  OPENBSD_ARM64_V8("openbsd/arm64/v8"),
  
  PLAN9_386("plan9/386"),
  
  PLAN9_AMD64("plan9/amd64"),
  
  PLAN9_ARM("plan9/arm"),
  
  PLAN9_ARM_V5("plan9/arm/v5"),
  
  PLAN9_ARM_V6("plan9/arm/v6"),
  
  PLAN9_ARM_V7("plan9/arm/v7"),
  
  SOLARIS_AMD64("solaris/amd64"),
  
  WINDOWS_386("windows/386"),
  
  WINDOWS_AMD64("windows/amd64"),
  
  WINDOWS_ARM("windows/arm"),
  
  WINDOWS_ARM_V5("windows/arm/v5"),
  
  WINDOWS_ARM_V6("windows/arm/v6"),
  
  WINDOWS_ARM_V7("windows/arm/v7"),
  
  WINDOWS_ARM64("windows/arm64"),
  
  WINDOWS_ARM64_V8("windows/arm64/v8");

  private String value;

  Platform(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Platform fromValue(String value) {
    for (Platform b : Platform.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Platform> {
    @Override
    public void write(final JsonWriter jsonWriter, final Platform enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Platform read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Platform.fromValue(value);
    }
  }
}


/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProjectAttributesTagsInner;
import com.konfigthis.client.model.ProjectSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProjectAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectAttributes {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ProjectAttributesTagsInner> tags = null;

  public static final String SERIALIZED_NAME_BUILD_ARGS = "build_args";
  @SerializedName(SERIALIZED_NAME_BUILD_ARGS)
  private Object buildArgs = null;

  /**
   * Gets or Sets businessCriticality
   */
  @JsonAdapter(BusinessCriticalityEnum.Adapter.class)
 public enum BusinessCriticalityEnum {
    CRITICAL("critical"),
    
    HIGH("high"),
    
    MEDIUM("medium"),
    
    LOW("low");

    private String value;

    BusinessCriticalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessCriticalityEnum fromValue(String value) {
      for (BusinessCriticalityEnum b : BusinessCriticalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessCriticalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessCriticalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessCriticalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessCriticalityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_CRITICALITY = "business_criticality";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CRITICALITY)
  private List<BusinessCriticalityEnum> businessCriticality = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  /**
   * Gets or Sets environment
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
 public enum EnvironmentEnum {
    FRONTEND("frontend"),
    
    BACKEND("backend"),
    
    INTERNAL("internal"),
    
    EXTERNAL("external"),
    
    MOBILE("mobile"),
    
    SAAS("saas"),
    
    ONPREM("onprem"),
    
    HOSTED("hosted"),
    
    DISTRIBUTED("distributed");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String value) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvironmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<EnvironmentEnum> environment = null;

  /**
   * Gets or Sets lifecycle
   */
  @JsonAdapter(LifecycleEnum.Adapter.class)
 public enum LifecycleEnum {
    PRODUCTION("production"),
    
    DEVELOPMENT("development"),
    
    SANDBOX("sandbox");

    private String value;

    LifecycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleEnum fromValue(String value) {
      for (LifecycleEnum b : LifecycleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifecycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifecycleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE = "lifecycle";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE)
  private List<LifecycleEnum> lifecycle = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private ProjectSettings settings;

  /**
   * Describes if a project is currently monitored or it is de-activated.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_FILE = "target_file";
  @SerializedName(SERIALIZED_NAME_TARGET_FILE)
  private String targetFile;

  public static final String SERIALIZED_NAME_TARGET_REFERENCE = "target_reference";
  @SerializedName(SERIALIZED_NAME_TARGET_REFERENCE)
  private String targetReference;

  public static final String SERIALIZED_NAME_TARGET_RUNTIME = "target_runtime";
  @SerializedName(SERIALIZED_NAME_TARGET_RUNTIME)
  private String targetRuntime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ProjectAttributes() {
  }

  public ProjectAttributes tags(List<ProjectAttributesTagsInner> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public ProjectAttributes addTagsItem(ProjectAttributesTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"key\":\"tag-key\",\"value\":\"tag-value\"}]", value = "")

  public List<ProjectAttributesTagsInner> getTags() {
    return tags;
  }


  public void setTags(List<ProjectAttributesTagsInner> tags) {
    
    
    
    this.tags = tags;
  }


  public ProjectAttributes buildArgs(Object buildArgs) {
    
    
    
    
    this.buildArgs = buildArgs;
    return this;
  }

   /**
   * Get buildArgs
   * @return buildArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getBuildArgs() {
    return buildArgs;
  }


  public void setBuildArgs(Object buildArgs) {
    
    
    
    this.buildArgs = buildArgs;
  }


  public ProjectAttributes businessCriticality(List<BusinessCriticalityEnum> businessCriticality) {
    
    
    
    
    this.businessCriticality = businessCriticality;
    return this;
  }

  public ProjectAttributes addBusinessCriticalityItem(BusinessCriticalityEnum businessCriticalityItem) {
    if (this.businessCriticality == null) {
      this.businessCriticality = new ArrayList<>();
    }
    this.businessCriticality.add(businessCriticalityItem);
    return this;
  }

   /**
   * Get businessCriticality
   * @return businessCriticality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"medium\"]", value = "")

  public List<BusinessCriticalityEnum> getBusinessCriticality() {
    return businessCriticality;
  }


  public void setBusinessCriticality(List<BusinessCriticalityEnum> businessCriticality) {
    
    
    
    this.businessCriticality = businessCriticality;
  }


  public ProjectAttributes created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * The date that the project was created on
   * @return created
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-05-29T09:50:54.014Z", required = true, value = "The date that the project was created on")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public ProjectAttributes environment(List<EnvironmentEnum> environment) {
    
    
    
    
    this.environment = environment;
    return this;
  }

  public ProjectAttributes addEnvironmentItem(EnvironmentEnum environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"external\",\"hosted\"]", value = "")

  public List<EnvironmentEnum> getEnvironment() {
    return environment;
  }


  public void setEnvironment(List<EnvironmentEnum> environment) {
    
    
    
    this.environment = environment;
  }


  public ProjectAttributes lifecycle(List<LifecycleEnum> lifecycle) {
    
    
    
    
    this.lifecycle = lifecycle;
    return this;
  }

  public ProjectAttributes addLifecycleItem(LifecycleEnum lifecycleItem) {
    if (this.lifecycle == null) {
      this.lifecycle = new ArrayList<>();
    }
    this.lifecycle.add(lifecycleItem);
    return this;
  }

   /**
   * Get lifecycle
   * @return lifecycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"production\"]", value = "")

  public List<LifecycleEnum> getLifecycle() {
    return lifecycle;
  }


  public void setLifecycle(List<LifecycleEnum> lifecycle) {
    
    
    
    this.lifecycle = lifecycle;
  }


  public ProjectAttributes name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Project name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "snyk/goof", required = true, value = "Project name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ProjectAttributes origin(String origin) {
    
    
    
    
    this.origin = origin;
    return this;
  }

   /**
   * The origin the project was added from.
   * @return origin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "github", required = true, value = "The origin the project was added from.")

  public String getOrigin() {
    return origin;
  }


  public void setOrigin(String origin) {
    
    
    
    this.origin = origin;
  }


  public ProjectAttributes readOnly(Boolean readOnly) {
    
    
    
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Whether the project is read-only
   * @return readOnly
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the project is read-only")

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    
    
    
    this.readOnly = readOnly;
  }


  public ProjectAttributes settings(ProjectSettings settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectSettings getSettings() {
    return settings;
  }


  public void setSettings(ProjectSettings settings) {
    
    
    
    this.settings = settings;
  }


  public ProjectAttributes status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Describes if a project is currently monitored or it is de-activated.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ACTIVE", required = true, value = "Describes if a project is currently monitored or it is de-activated.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ProjectAttributes targetFile(String targetFile) {
    
    
    
    
    this.targetFile = targetFile;
    return this;
  }

   /**
   * Path within the target to identify a specific file/directory/image etc. when scanning just part  of the target, and not the entity.
   * @return targetFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "package.json", required = true, value = "Path within the target to identify a specific file/directory/image etc. when scanning just part  of the target, and not the entity.")

  public String getTargetFile() {
    return targetFile;
  }


  public void setTargetFile(String targetFile) {
    
    
    
    this.targetFile = targetFile;
  }


  public ProjectAttributes targetReference(String targetReference) {
    
    
    
    
    this.targetReference = targetReference;
    return this;
  }

   /**
   * The additional information required to resolve which revision of the resource should be scanned.
   * @return targetReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "main", required = true, value = "The additional information required to resolve which revision of the resource should be scanned.")

  public String getTargetReference() {
    return targetReference;
  }


  public void setTargetReference(String targetReference) {
    
    
    
    this.targetReference = targetReference;
  }


  public ProjectAttributes targetRuntime(String targetRuntime) {
    
    
    
    
    this.targetRuntime = targetRuntime;
    return this;
  }

   /**
   * Dotnet Target, for relevant projects
   * @return targetRuntime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dotnet Target, for relevant projects")

  public String getTargetRuntime() {
    return targetRuntime;
  }


  public void setTargetRuntime(String targetRuntime) {
    
    
    
    this.targetRuntime = targetRuntime;
  }


  public ProjectAttributes type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The package manager of the project.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "maven", required = true, value = "The package manager of the project.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectAttributes instance itself
   */
  public ProjectAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectAttributes projectAttributes = (ProjectAttributes) o;
    return Objects.equals(this.tags, projectAttributes.tags) &&
        Objects.equals(this.buildArgs, projectAttributes.buildArgs) &&
        Objects.equals(this.businessCriticality, projectAttributes.businessCriticality) &&
        Objects.equals(this.created, projectAttributes.created) &&
        Objects.equals(this.environment, projectAttributes.environment) &&
        Objects.equals(this.lifecycle, projectAttributes.lifecycle) &&
        Objects.equals(this.name, projectAttributes.name) &&
        Objects.equals(this.origin, projectAttributes.origin) &&
        Objects.equals(this.readOnly, projectAttributes.readOnly) &&
        Objects.equals(this.settings, projectAttributes.settings) &&
        Objects.equals(this.status, projectAttributes.status) &&
        Objects.equals(this.targetFile, projectAttributes.targetFile) &&
        Objects.equals(this.targetReference, projectAttributes.targetReference) &&
        Objects.equals(this.targetRuntime, projectAttributes.targetRuntime) &&
        Objects.equals(this.type, projectAttributes.type)&&
        Objects.equals(this.additionalProperties, projectAttributes.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, buildArgs, businessCriticality, created, environment, lifecycle, name, origin, readOnly, settings, status, targetFile, targetReference, targetRuntime, type, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectAttributes {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    buildArgs: ").append(toIndentedString(buildArgs)).append("\n");
    sb.append("    businessCriticality: ").append(toIndentedString(businessCriticality)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetFile: ").append(toIndentedString(targetFile)).append("\n");
    sb.append("    targetReference: ").append(toIndentedString(targetReference)).append("\n");
    sb.append("    targetRuntime: ").append(toIndentedString(targetRuntime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("build_args");
    openapiFields.add("business_criticality");
    openapiFields.add("created");
    openapiFields.add("environment");
    openapiFields.add("lifecycle");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("read_only");
    openapiFields.add("settings");
    openapiFields.add("status");
    openapiFields.add("target_file");
    openapiFields.add("target_reference");
    openapiFields.add("target_runtime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("read_only");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("target_file");
    openapiRequiredFields.add("target_reference");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectAttributes is not found in the empty JSON string", ProjectAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            ProjectAttributesTagsInner.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("business_criticality") != null && !jsonObj.get("business_criticality").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `business_criticality` to be an array in the JSON string but got `%s`", jsonObj.get("business_criticality").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lifecycle") != null && !jsonObj.get("lifecycle").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycle` to be an array in the JSON string but got `%s`", jsonObj.get("lifecycle").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the required field `settings`
      ProjectSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("target_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_file").toString()));
      }
      if (!jsonObj.get("target_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_reference").toString()));
      }
      if ((jsonObj.get("target_runtime") != null && !jsonObj.get("target_runtime").isJsonNull()) && !jsonObj.get("target_runtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_runtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_runtime").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectAttributes>() {
           @Override
           public void write(JsonWriter out, ProjectAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectAttributes
  * @throws IOException if the JSON string is invalid with respect to ProjectAttributes
  */
  public static ProjectAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectAttributes.class);
  }

 /**
  * Convert an instance of ProjectAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


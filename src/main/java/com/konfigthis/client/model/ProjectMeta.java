/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProjectMeta
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectMeta {
  public static final String SERIALIZED_NAME_IMPORTED = "imported";
  @SerializedName(SERIALIZED_NAME_IMPORTED)
  private OffsetDateTime imported;

  public static final String SERIALIZED_NAME_ISSUES_CRITICAL_COUNT = "issues_critical_count";
  @SerializedName(SERIALIZED_NAME_ISSUES_CRITICAL_COUNT)
  private Double issuesCriticalCount;

  public static final String SERIALIZED_NAME_ISSUES_HIGH_COUNT = "issues_high_count";
  @SerializedName(SERIALIZED_NAME_ISSUES_HIGH_COUNT)
  private Double issuesHighCount;

  public static final String SERIALIZED_NAME_ISSUES_LOW_COUNT = "issues_low_count";
  @SerializedName(SERIALIZED_NAME_ISSUES_LOW_COUNT)
  private Double issuesLowCount;

  public static final String SERIALIZED_NAME_ISSUES_MEDIUM_COUNT = "issues_medium_count";
  @SerializedName(SERIALIZED_NAME_ISSUES_MEDIUM_COUNT)
  private Double issuesMediumCount;

  public static final String SERIALIZED_NAME_LAST_TESTED_AT = "last_tested_at";
  @SerializedName(SERIALIZED_NAME_LAST_TESTED_AT)
  private OffsetDateTime lastTestedAt;

  public ProjectMeta() {
  }

  public ProjectMeta imported(OffsetDateTime imported) {
    
    
    
    
    this.imported = imported;
    return this;
  }

   /**
   * The time the project was imported
   * @return imported
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-05-29T09:50:54.014Z", required = true, value = "The time the project was imported")

  public OffsetDateTime getImported() {
    return imported;
  }


  public void setImported(OffsetDateTime imported) {
    
    
    
    this.imported = imported;
  }


  public ProjectMeta issuesCriticalCount(Double issuesCriticalCount) {
    
    
    
    
    this.issuesCriticalCount = issuesCriticalCount;
    return this;
  }

  public ProjectMeta issuesCriticalCount(Integer issuesCriticalCount) {
    
    
    
    
    this.issuesCriticalCount = issuesCriticalCount.doubleValue();
    return this;
  }

   /**
   * The sum of critical severity issues of the project
   * @return issuesCriticalCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The sum of critical severity issues of the project")

  public Double getIssuesCriticalCount() {
    return issuesCriticalCount;
  }


  public void setIssuesCriticalCount(Double issuesCriticalCount) {
    
    
    
    this.issuesCriticalCount = issuesCriticalCount;
  }


  public ProjectMeta issuesHighCount(Double issuesHighCount) {
    
    
    
    
    this.issuesHighCount = issuesHighCount;
    return this;
  }

  public ProjectMeta issuesHighCount(Integer issuesHighCount) {
    
    
    
    
    this.issuesHighCount = issuesHighCount.doubleValue();
    return this;
  }

   /**
   * The sum of high severity issues of the project
   * @return issuesHighCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The sum of high severity issues of the project")

  public Double getIssuesHighCount() {
    return issuesHighCount;
  }


  public void setIssuesHighCount(Double issuesHighCount) {
    
    
    
    this.issuesHighCount = issuesHighCount;
  }


  public ProjectMeta issuesLowCount(Double issuesLowCount) {
    
    
    
    
    this.issuesLowCount = issuesLowCount;
    return this;
  }

  public ProjectMeta issuesLowCount(Integer issuesLowCount) {
    
    
    
    
    this.issuesLowCount = issuesLowCount.doubleValue();
    return this;
  }

   /**
   * The sum of low severity issues of the project
   * @return issuesLowCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The sum of low severity issues of the project")

  public Double getIssuesLowCount() {
    return issuesLowCount;
  }


  public void setIssuesLowCount(Double issuesLowCount) {
    
    
    
    this.issuesLowCount = issuesLowCount;
  }


  public ProjectMeta issuesMediumCount(Double issuesMediumCount) {
    
    
    
    
    this.issuesMediumCount = issuesMediumCount;
    return this;
  }

  public ProjectMeta issuesMediumCount(Integer issuesMediumCount) {
    
    
    
    
    this.issuesMediumCount = issuesMediumCount.doubleValue();
    return this;
  }

   /**
   * The sum of medium severity issues of the project
   * @return issuesMediumCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10", required = true, value = "The sum of medium severity issues of the project")

  public Double getIssuesMediumCount() {
    return issuesMediumCount;
  }


  public void setIssuesMediumCount(Double issuesMediumCount) {
    
    
    
    this.issuesMediumCount = issuesMediumCount;
  }


  public ProjectMeta lastTestedAt(OffsetDateTime lastTestedAt) {
    
    
    
    
    this.lastTestedAt = lastTestedAt;
    return this;
  }

   /**
   * The time the project was last tested
   * @return lastTestedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-05-29T09:50:54.014Z", required = true, value = "The time the project was last tested")

  public OffsetDateTime getLastTestedAt() {
    return lastTestedAt;
  }


  public void setLastTestedAt(OffsetDateTime lastTestedAt) {
    
    
    
    this.lastTestedAt = lastTestedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectMeta instance itself
   */
  public ProjectMeta putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectMeta projectMeta = (ProjectMeta) o;
    return Objects.equals(this.imported, projectMeta.imported) &&
        Objects.equals(this.issuesCriticalCount, projectMeta.issuesCriticalCount) &&
        Objects.equals(this.issuesHighCount, projectMeta.issuesHighCount) &&
        Objects.equals(this.issuesLowCount, projectMeta.issuesLowCount) &&
        Objects.equals(this.issuesMediumCount, projectMeta.issuesMediumCount) &&
        Objects.equals(this.lastTestedAt, projectMeta.lastTestedAt)&&
        Objects.equals(this.additionalProperties, projectMeta.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imported, issuesCriticalCount, issuesHighCount, issuesLowCount, issuesMediumCount, lastTestedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectMeta {\n");
    sb.append("    imported: ").append(toIndentedString(imported)).append("\n");
    sb.append("    issuesCriticalCount: ").append(toIndentedString(issuesCriticalCount)).append("\n");
    sb.append("    issuesHighCount: ").append(toIndentedString(issuesHighCount)).append("\n");
    sb.append("    issuesLowCount: ").append(toIndentedString(issuesLowCount)).append("\n");
    sb.append("    issuesMediumCount: ").append(toIndentedString(issuesMediumCount)).append("\n");
    sb.append("    lastTestedAt: ").append(toIndentedString(lastTestedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imported");
    openapiFields.add("issues_critical_count");
    openapiFields.add("issues_high_count");
    openapiFields.add("issues_low_count");
    openapiFields.add("issues_medium_count");
    openapiFields.add("last_tested_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imported");
    openapiRequiredFields.add("issues_critical_count");
    openapiRequiredFields.add("issues_high_count");
    openapiRequiredFields.add("issues_low_count");
    openapiRequiredFields.add("issues_medium_count");
    openapiRequiredFields.add("last_tested_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectMeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectMeta is not found in the empty JSON string", ProjectMeta.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectMeta.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectMeta>() {
           @Override
           public void write(JsonWriter out, ProjectMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectMeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectMeta instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectMeta
  * @throws IOException if the JSON string is invalid with respect to ProjectMeta
  */
  public static ProjectMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectMeta.class);
  }

 /**
  * Convert an instance of ProjectMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AutoDependencyUpgradeSettings;
import com.konfigthis.client.model.AutoRemediationPRsSettings;
import com.konfigthis.client.model.ManualRemediationPRsSettings;
import com.konfigthis.client.model.PullRequestAssignmentSettings;
import com.konfigthis.client.model.PullRequestsSettings;
import com.konfigthis.client.model.RecurringTestsSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProjectSettings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProjectSettings {
  public static final String SERIALIZED_NAME_AUTO_DEPENDENCY_UPGRADE = "auto_dependency_upgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_DEPENDENCY_UPGRADE)
  private AutoDependencyUpgradeSettings autoDependencyUpgrade;

  public static final String SERIALIZED_NAME_AUTO_REMEDIATION_PRS = "auto_remediation_prs";
  @SerializedName(SERIALIZED_NAME_AUTO_REMEDIATION_PRS)
  private AutoRemediationPRsSettings autoRemediationPrs;

  public static final String SERIALIZED_NAME_MANUAL_REMEDIATION_PRS = "manual_remediation_prs";
  @SerializedName(SERIALIZED_NAME_MANUAL_REMEDIATION_PRS)
  private ManualRemediationPRsSettings manualRemediationPrs;

  public static final String SERIALIZED_NAME_PULL_REQUEST_ASSIGNMENT = "pull_request_assignment";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_ASSIGNMENT)
  private PullRequestAssignmentSettings pullRequestAssignment;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private PullRequestsSettings pullRequests;

  public static final String SERIALIZED_NAME_RECURRING_TESTS = "recurring_tests";
  @SerializedName(SERIALIZED_NAME_RECURRING_TESTS)
  private RecurringTestsSettings recurringTests;

  public ProjectSettings() {
  }

  public ProjectSettings autoDependencyUpgrade(AutoDependencyUpgradeSettings autoDependencyUpgrade) {
    
    
    
    
    this.autoDependencyUpgrade = autoDependencyUpgrade;
    return this;
  }

   /**
   * Get autoDependencyUpgrade
   * @return autoDependencyUpgrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AutoDependencyUpgradeSettings getAutoDependencyUpgrade() {
    return autoDependencyUpgrade;
  }


  public void setAutoDependencyUpgrade(AutoDependencyUpgradeSettings autoDependencyUpgrade) {
    
    
    
    this.autoDependencyUpgrade = autoDependencyUpgrade;
  }


  public ProjectSettings autoRemediationPrs(AutoRemediationPRsSettings autoRemediationPrs) {
    
    
    
    
    this.autoRemediationPrs = autoRemediationPrs;
    return this;
  }

   /**
   * Get autoRemediationPrs
   * @return autoRemediationPrs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AutoRemediationPRsSettings getAutoRemediationPrs() {
    return autoRemediationPrs;
  }


  public void setAutoRemediationPrs(AutoRemediationPRsSettings autoRemediationPrs) {
    
    
    
    this.autoRemediationPrs = autoRemediationPrs;
  }


  public ProjectSettings manualRemediationPrs(ManualRemediationPRsSettings manualRemediationPrs) {
    
    
    
    
    this.manualRemediationPrs = manualRemediationPrs;
    return this;
  }

   /**
   * Get manualRemediationPrs
   * @return manualRemediationPrs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ManualRemediationPRsSettings getManualRemediationPrs() {
    return manualRemediationPrs;
  }


  public void setManualRemediationPrs(ManualRemediationPRsSettings manualRemediationPrs) {
    
    
    
    this.manualRemediationPrs = manualRemediationPrs;
  }


  public ProjectSettings pullRequestAssignment(PullRequestAssignmentSettings pullRequestAssignment) {
    
    
    
    
    this.pullRequestAssignment = pullRequestAssignment;
    return this;
  }

   /**
   * Get pullRequestAssignment
   * @return pullRequestAssignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PullRequestAssignmentSettings getPullRequestAssignment() {
    return pullRequestAssignment;
  }


  public void setPullRequestAssignment(PullRequestAssignmentSettings pullRequestAssignment) {
    
    
    
    this.pullRequestAssignment = pullRequestAssignment;
  }


  public ProjectSettings pullRequests(PullRequestsSettings pullRequests) {
    
    
    
    
    this.pullRequests = pullRequests;
    return this;
  }

   /**
   * Get pullRequests
   * @return pullRequests
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PullRequestsSettings getPullRequests() {
    return pullRequests;
  }


  public void setPullRequests(PullRequestsSettings pullRequests) {
    
    
    
    this.pullRequests = pullRequests;
  }


  public ProjectSettings recurringTests(RecurringTestsSettings recurringTests) {
    
    
    
    
    this.recurringTests = recurringTests;
    return this;
  }

   /**
   * Get recurringTests
   * @return recurringTests
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RecurringTestsSettings getRecurringTests() {
    return recurringTests;
  }


  public void setRecurringTests(RecurringTestsSettings recurringTests) {
    
    
    
    this.recurringTests = recurringTests;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProjectSettings instance itself
   */
  public ProjectSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSettings projectSettings = (ProjectSettings) o;
    return Objects.equals(this.autoDependencyUpgrade, projectSettings.autoDependencyUpgrade) &&
        Objects.equals(this.autoRemediationPrs, projectSettings.autoRemediationPrs) &&
        Objects.equals(this.manualRemediationPrs, projectSettings.manualRemediationPrs) &&
        Objects.equals(this.pullRequestAssignment, projectSettings.pullRequestAssignment) &&
        Objects.equals(this.pullRequests, projectSettings.pullRequests) &&
        Objects.equals(this.recurringTests, projectSettings.recurringTests)&&
        Objects.equals(this.additionalProperties, projectSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoDependencyUpgrade, autoRemediationPrs, manualRemediationPrs, pullRequestAssignment, pullRequests, recurringTests, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSettings {\n");
    sb.append("    autoDependencyUpgrade: ").append(toIndentedString(autoDependencyUpgrade)).append("\n");
    sb.append("    autoRemediationPrs: ").append(toIndentedString(autoRemediationPrs)).append("\n");
    sb.append("    manualRemediationPrs: ").append(toIndentedString(manualRemediationPrs)).append("\n");
    sb.append("    pullRequestAssignment: ").append(toIndentedString(pullRequestAssignment)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    recurringTests: ").append(toIndentedString(recurringTests)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_dependency_upgrade");
    openapiFields.add("auto_remediation_prs");
    openapiFields.add("manual_remediation_prs");
    openapiFields.add("pull_request_assignment");
    openapiFields.add("pull_requests");
    openapiFields.add("recurring_tests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pull_requests");
    openapiRequiredFields.add("recurring_tests");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProjectSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectSettings is not found in the empty JSON string", ProjectSettings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectSettings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `auto_dependency_upgrade`
      if (jsonObj.get("auto_dependency_upgrade") != null && !jsonObj.get("auto_dependency_upgrade").isJsonNull()) {
        AutoDependencyUpgradeSettings.validateJsonObject(jsonObj.getAsJsonObject("auto_dependency_upgrade"));
      }
      // validate the optional field `auto_remediation_prs`
      if (jsonObj.get("auto_remediation_prs") != null && !jsonObj.get("auto_remediation_prs").isJsonNull()) {
        AutoRemediationPRsSettings.validateJsonObject(jsonObj.getAsJsonObject("auto_remediation_prs"));
      }
      // validate the optional field `manual_remediation_prs`
      if (jsonObj.get("manual_remediation_prs") != null && !jsonObj.get("manual_remediation_prs").isJsonNull()) {
        ManualRemediationPRsSettings.validateJsonObject(jsonObj.getAsJsonObject("manual_remediation_prs"));
      }
      // validate the optional field `pull_request_assignment`
      if (jsonObj.get("pull_request_assignment") != null && !jsonObj.get("pull_request_assignment").isJsonNull()) {
        PullRequestAssignmentSettings.validateJsonObject(jsonObj.getAsJsonObject("pull_request_assignment"));
      }
      // validate the required field `pull_requests`
      PullRequestsSettings.validateJsonObject(jsonObj.getAsJsonObject("pull_requests"));
      // validate the required field `recurring_tests`
      RecurringTestsSettings.validateJsonObject(jsonObj.getAsJsonObject("recurring_tests"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectSettings>() {
           @Override
           public void write(JsonWriter out, ProjectSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProjectSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectSettings
  * @throws IOException if the JSON string is invalid with respect to ProjectSettings
  */
  public static ProjectSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectSettings.class);
  }

 /**
  * Convert an instance of ProjectSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


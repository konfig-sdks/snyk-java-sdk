/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ServiceAccountsCreateForOrganizationRequestDataAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ServiceAccountsCreateForOrganizationRequestDataAttributes {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS = "access_token_ttl_seconds";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_TTL_SECONDS)
  private Double accessTokenTtlSeconds;

  /**
   * Authentication strategy for the service account:   * api_key - Regular Snyk API Key.   * oauth_client_secret - OAuth2 client_credentials grant, which returns a client secret that can be used to retrieve an access token.   * oauth_private_key_jwt - OAuth2 client_credentials grant, using private_key_jwt client_assertion as laid out in OIDC Connect Core 1.0, section 9.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
 public enum AuthTypeEnum {
    API_KEY("api_key"),
    
    OAUTH_CLIENT_SECRET("oauth_client_secret"),
    
    OAUTH_PRIVATE_KEY_JWT("oauth_private_key_jwt");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_JWKS_URL = "jwks_url";
  @SerializedName(SERIALIZED_NAME_JWKS_URL)
  private String jwksUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private UUID roleId;

  public ServiceAccountsCreateForOrganizationRequestDataAttributes() {
  }

  public ServiceAccountsCreateForOrganizationRequestDataAttributes accessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
    return this;
  }

  public ServiceAccountsCreateForOrganizationRequestDataAttributes accessTokenTtlSeconds(Integer accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds.doubleValue();
    return this;
  }

   /**
   * The time, in seconds, that a generated access token will be valid for. Defaults to 1 hour if unset. Only used when auth_type is one of the oauth_* variants.
   * minimum: 3600
   * maximum: 86400
   * @return accessTokenTtlSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time, in seconds, that a generated access token will be valid for. Defaults to 1 hour if unset. Only used when auth_type is one of the oauth_* variants.")

  public Double getAccessTokenTtlSeconds() {
    return accessTokenTtlSeconds;
  }


  public void setAccessTokenTtlSeconds(Double accessTokenTtlSeconds) {
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds < 3600) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be greater than or equal to 3600.");
    }
    if (accessTokenTtlSeconds != null && accessTokenTtlSeconds > 86400) {
      throw new IllegalArgumentException("Invalid value for accessTokenTtlSeconds. Must be less than or equal to 86400.");
    }
    
    this.accessTokenTtlSeconds = accessTokenTtlSeconds;
  }


  public ServiceAccountsCreateForOrganizationRequestDataAttributes authType(AuthTypeEnum authType) {
    
    
    
    
    this.authType = authType;
    return this;
  }

   /**
   * Authentication strategy for the service account:   * api_key - Regular Snyk API Key.   * oauth_client_secret - OAuth2 client_credentials grant, which returns a client secret that can be used to retrieve an access token.   * oauth_private_key_jwt - OAuth2 client_credentials grant, using private_key_jwt client_assertion as laid out in OIDC Connect Core 1.0, section 9.
   * @return authType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Authentication strategy for the service account:   * api_key - Regular Snyk API Key.   * oauth_client_secret - OAuth2 client_credentials grant, which returns a client secret that can be used to retrieve an access token.   * oauth_private_key_jwt - OAuth2 client_credentials grant, using private_key_jwt client_assertion as laid out in OIDC Connect Core 1.0, section 9.")

  public AuthTypeEnum getAuthType() {
    return authType;
  }


  public void setAuthType(AuthTypeEnum authType) {
    
    
    
    this.authType = authType;
  }


  public ServiceAccountsCreateForOrganizationRequestDataAttributes jwksUrl(String jwksUrl) {
    
    
    
    
    this.jwksUrl = jwksUrl;
    return this;
  }

   /**
   * A JWKs URL hosting your public keys, used to verify signed JWT requests. Must be https. Required only when auth_type is oauth_private_key_jwt.
   * @return jwksUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JWKs URL hosting your public keys, used to verify signed JWT requests. Must be https. Required only when auth_type is oauth_private_key_jwt.")

  public String getJwksUrl() {
    return jwksUrl;
  }


  public void setJwksUrl(String jwksUrl) {
    
    
    
    this.jwksUrl = jwksUrl;
  }


  public ServiceAccountsCreateForOrganizationRequestDataAttributes name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * A human-friendly name for the service account.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A human-friendly name for the service account.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ServiceAccountsCreateForOrganizationRequestDataAttributes roleId(UUID roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * The ID of the role which the created service account should use. Obtained in the Snyk UI, via \&quot;Group Page\&quot; -&gt; \&quot;Settings\&quot; -&gt; \&quot;Member Roles\&quot; -&gt; \&quot;Create new Role\&quot;. Can be shared among multiple accounts.
   * @return roleId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the role which the created service account should use. Obtained in the Snyk UI, via \"Group Page\" -> \"Settings\" -> \"Member Roles\" -> \"Create new Role\". Can be shared among multiple accounts.")

  public UUID getRoleId() {
    return roleId;
  }


  public void setRoleId(UUID roleId) {
    
    
    
    this.roleId = roleId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ServiceAccountsCreateForOrganizationRequestDataAttributes instance itself
   */
  public ServiceAccountsCreateForOrganizationRequestDataAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceAccountsCreateForOrganizationRequestDataAttributes serviceAccountsCreateForOrganizationRequestDataAttributes = (ServiceAccountsCreateForOrganizationRequestDataAttributes) o;
    return Objects.equals(this.accessTokenTtlSeconds, serviceAccountsCreateForOrganizationRequestDataAttributes.accessTokenTtlSeconds) &&
        Objects.equals(this.authType, serviceAccountsCreateForOrganizationRequestDataAttributes.authType) &&
        Objects.equals(this.jwksUrl, serviceAccountsCreateForOrganizationRequestDataAttributes.jwksUrl) &&
        Objects.equals(this.name, serviceAccountsCreateForOrganizationRequestDataAttributes.name) &&
        Objects.equals(this.roleId, serviceAccountsCreateForOrganizationRequestDataAttributes.roleId)&&
        Objects.equals(this.additionalProperties, serviceAccountsCreateForOrganizationRequestDataAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenTtlSeconds, authType, jwksUrl, name, roleId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceAccountsCreateForOrganizationRequestDataAttributes {\n");
    sb.append("    accessTokenTtlSeconds: ").append(toIndentedString(accessTokenTtlSeconds)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    jwksUrl: ").append(toIndentedString(jwksUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token_ttl_seconds");
    openapiFields.add("auth_type");
    openapiFields.add("jwks_url");
    openapiFields.add("name");
    openapiFields.add("role_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auth_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("role_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServiceAccountsCreateForOrganizationRequestDataAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ServiceAccountsCreateForOrganizationRequestDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceAccountsCreateForOrganizationRequestDataAttributes is not found in the empty JSON string", ServiceAccountsCreateForOrganizationRequestDataAttributes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceAccountsCreateForOrganizationRequestDataAttributes.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      if ((jsonObj.get("jwks_url") != null && !jsonObj.get("jwks_url").isJsonNull()) && !jsonObj.get("jwks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("role_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceAccountsCreateForOrganizationRequestDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceAccountsCreateForOrganizationRequestDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceAccountsCreateForOrganizationRequestDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceAccountsCreateForOrganizationRequestDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceAccountsCreateForOrganizationRequestDataAttributes>() {
           @Override
           public void write(JsonWriter out, ServiceAccountsCreateForOrganizationRequestDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceAccountsCreateForOrganizationRequestDataAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ServiceAccountsCreateForOrganizationRequestDataAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServiceAccountsCreateForOrganizationRequestDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServiceAccountsCreateForOrganizationRequestDataAttributes
  * @throws IOException if the JSON string is invalid with respect to ServiceAccountsCreateForOrganizationRequestDataAttributes
  */
  public static ServiceAccountsCreateForOrganizationRequestDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceAccountsCreateForOrganizationRequestDataAttributes.class);
  }

 /**
  * Convert an instance of ServiceAccountsCreateForOrganizationRequestDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


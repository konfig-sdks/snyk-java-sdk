/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AppPatchRequest;
import com.konfigthis.client.model.AppPatchRequestData;
import com.konfigthis.client.model.AppPostRequest;
import com.konfigthis.client.model.AppPostRequestData;
import com.konfigthis.client.model.AppPostResponse;
import com.konfigthis.client.model.AppsCreateInstallSecretRequest;
import com.konfigthis.client.model.AppsCreateInstallSecretRequestData;
import com.konfigthis.client.model.AppsCreateInstallSecretResponse;
import com.konfigthis.client.model.AppsGetActiveSessionsResponse;
import com.konfigthis.client.model.AppsGetByAppIdResponse;
import com.konfigthis.client.model.AppsGetByClientIdResponse;
import com.konfigthis.client.model.AppsInstallGroupAppRequest;
import com.konfigthis.client.model.AppsInstallGroupAppRequestData;
import com.konfigthis.client.model.AppsInstallGroupAppRequestRelationships;
import com.konfigthis.client.model.AppsInstallGroupAppResponse;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequest;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequestData;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgRequestRelationships;
import com.konfigthis.client.model.AppsInstallSnykAppToOrgResponse;
import com.konfigthis.client.model.AppsListAppBotsResponse;
import com.konfigthis.client.model.AppsListAppsResponse;
import com.konfigthis.client.model.AppsListGroupAppInstallsResponse;
import com.konfigthis.client.model.AppsListOrgAppsResponse;
import com.konfigthis.client.model.AppsListOrgCreationsResponse;
import com.konfigthis.client.model.AppsListOrgInstallsResponse;
import com.konfigthis.client.model.AppsListUserInstalledAppsResponse;
import com.konfigthis.client.model.AppsManageClientSecretForSnykApp200Response;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppRequest;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppRequest1;
import com.konfigthis.client.model.AppsManageClientSecretForSnykAppResponse;
import com.konfigthis.client.model.AppsManageClientSecretsRequest;
import com.konfigthis.client.model.AppsManageClientSecretsResponse;
import com.konfigthis.client.model.AppsUpdateAttributesResponse;
import com.konfigthis.client.model.AppsUpdateCreationAttributesByIdResponse;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private static AppsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AppsApi(apiClient);
    }

    /**
     * Revoke app authorization for an Snyk Organization with install ID.
     *
     * Revoke app authorization for an Snyk Organization with install ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void byInstallIdTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID installId = null;
        api.byInstallId(version, orgId, installId)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     *
     * Manage client secret for non-interactive Snyk App installations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstallSecretTest() throws ApiException {
        AppsCreateInstallSecretRequestData data = null;
        String version = null;
        UUID groupId = null;
        UUID installId = null;
        AppsCreateInstallSecretResponse response = api.createInstallSecret(data, version, groupId, installId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new Snyk App for an organization.
     *
     * Create a new Snyk App for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAppForOrganizationTest() throws ApiException {
        AppPostRequestData data = null;
        String version = null;
        UUID orgId = null;
        AppPostResponse response = api.createNewAppForOrganization(data, version, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new app for an organization.
     *
     * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationAppTest() throws ApiException {
        AppPostRequestData data = null;
        String version = null;
        UUID orgId = null;
        AppPostResponse response = api.createOrganizationApp(data, version, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an app
     *
     * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppByIdTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID clientId = null;
        api.deleteAppById(version, orgId, clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an app by its App ID.
     *
     * Delete an app by its App ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByAppIdTest() throws ApiException {
        UUID orgId = null;
        UUID appId = null;
        String version = null;
        api.deleteByAppId(orgId, appId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of active OAuth sessions for the app.
     *
     * Get a list of active OAuth sessions for the app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveSessionsTest() throws ApiException {
        String version = null;
        UUID appId = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsGetActiveSessionsResponse response = api.getActiveSessions(version, appId)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Snyk App by its App ID.
     *
     * Get a Snyk App by its App ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByAppIdTest() throws ApiException {
        UUID orgId = null;
        UUID appId = null;
        String version = null;
        AppsGetByAppIdResponse response = api.getByAppId(orgId, appId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an app by client id
     *
     * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByClientIdTest() throws ApiException {
        UUID orgId = null;
        UUID clientId = null;
        String version = null;
        AppsGetByClientIdResponse response = api.getByClientId(orgId, clientId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Install a Snyk Apps to this group.
     *
     * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installGroupAppTest() throws ApiException {
        AppsInstallGroupAppRequestData data = null;
        AppsInstallGroupAppRequestRelationships relationships = null;
        String version = null;
        UUID groupId = null;
        AppsInstallGroupAppResponse response = api.installGroupApp(data, relationships, version, groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Install a Snyk Apps to this organization.
     *
     * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installSnykAppToOrgTest() throws ApiException {
        AppsInstallSnykAppToOrgRequestData data = null;
        AppsInstallSnykAppToOrgRequestRelationships relationships = null;
        String version = null;
        UUID orgId = null;
        AppsInstallSnykAppToOrgResponse response = api.installSnykAppToOrg(data, relationships, version, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of app bots authorized to an organization.
     *
     * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppBotsTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        List<String> expand = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListAppBotsResponse response = api.listAppBots(orgId, version)
                .expand(expand)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps that can act on your behalf.
     *
     * Get a list of apps that can act on your behalf.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        String version = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListAppsResponse response = api.listApps(version)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps installed for a group.
     *
     * Get a list of apps installed for a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupAppInstallsTest() throws ApiException {
        UUID groupId = null;
        String version = null;
        List<String> expand = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListGroupAppInstallsResponse response = api.listGroupAppInstalls(groupId, version)
                .expand(expand)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps created by an organization.
     *
     * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrgAppsTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListOrgAppsResponse response = api.listOrgApps(orgId, version)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps created by an organization.
     *
     * Get a list of apps created by an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrgCreationsTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListOrgCreationsResponse response = api.listOrgCreations(orgId, version)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps installed for an organization.
     *
     * Get a list of apps installed for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrgInstallsTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        List<String> expand = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListOrgInstallsResponse response = api.listOrgInstalls(orgId, version)
                .expand(expand)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of apps installed for an user.
     *
     * Get a list of apps installed for an user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserInstalledAppsTest() throws ApiException {
        String version = null;
        List<String> expand = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        AppsListUserInstalledAppsResponse response = api.listUserInstalledApps(version)
                .expand(expand)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage client secret for the Snyk App.
     *
     * Manage client secret for the Snyk App.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manageClientSecretForSnykAppTest() throws ApiException {
        AppsCreateInstallSecretRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID appId = null;
        AppsManageClientSecretForSnykAppResponse response = api.manageClientSecretForSnykApp(data, version, orgId, appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     *
     * Manage client secret for non-interactive Snyk App installations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manageClientSecretForSnykApp_0Test() throws ApiException {
        AppsCreateInstallSecretRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID installId = null;
        AppsManageClientSecretForSnykApp200Response response = api.manageClientSecretForSnykApp_0(data, version, orgId, installId)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage client secrets for an app.
     *
     * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manageClientSecretsTest() throws ApiException {
        String mode = null;
        String version = null;
        UUID orgId = null;
        UUID clientId = null;
        String secret = null;
        AppsManageClientSecretsResponse response = api.manageClientSecrets(mode, version, orgId, clientId)
                .secret(secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke an app
     *
     * Revoke access for an app by app id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAppByIdTest() throws ApiException {
        String version = null;
        UUID appId = null;
        api.revokeAppById(version, appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke app bot authorization
     *
     * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeBotAuthorizationTest() throws ApiException {
        UUID botId = null;
        String version = null;
        UUID orgId = null;
        api.revokeBotAuthorization(botId, version, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke access for an app by install ID.
     *
     * Revoke access for an app by install ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeByInstallIdTest() throws ApiException {
        String version = null;
        UUID installId = null;
        api.revokeByInstallId(version, installId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke app authorization for an Snyk Group with install ID.
     *
     * Revoke app authorization for an Snyk Group with install ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeGroupAppInstallTest() throws ApiException {
        String version = null;
        UUID groupId = null;
        UUID installId = null;
        api.revokeGroupAppInstall(version, groupId, installId)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke an active user app session.
     *
     * Revoke an active user app session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeUserAppSessionTest() throws ApiException {
        String version = null;
        UUID appId = null;
        UUID sessionId = null;
        api.revokeUserAppSession(version, appId, sessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update app attributes that are name, redirect URIs, and access token time to live
     *
     * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAttributesTest() throws ApiException {
        AppPatchRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID clientId = null;
        AppsUpdateAttributesResponse response = api.updateAttributes(data, version, orgId, clientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
     *
     * Update app creation attributes with App ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCreationAttributesByIdTest() throws ApiException {
        AppPatchRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID appId = null;
        AppsUpdateCreationAttributesByIdResponse response = api.updateCreationAttributesById(data, version, orgId, appId)
                .execute();
        // TODO: test validations
    }

}

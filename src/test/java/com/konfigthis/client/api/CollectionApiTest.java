/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CollectionCreateNewResponse;
import com.konfigthis.client.model.CollectionEditCollectionResponse;
import com.konfigthis.client.model.CollectionGetByIdResponse;
import com.konfigthis.client.model.CollectionGetListResponse;
import com.konfigthis.client.model.CreateCollectionRequest;
import com.konfigthis.client.model.CreateCollectionRequestData;
import com.konfigthis.client.model.DeleteProjectsFromCollectionRequest;
import com.konfigthis.client.model.DeleteProjectsFromCollectionRequestDataInner;
import com.konfigthis.client.model.GetProjectsOfCollectionResponse;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.konfigthis.client.model.UpdateCollectionRequest;
import com.konfigthis.client.model.UpdateCollectionRequestData;
import com.konfigthis.client.model.UpdateCollectionWithProjectsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollectionApi
 */
@Disabled
public class CollectionApiTest {

    private static CollectionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CollectionApi(apiClient);
    }

    /**
     * Add projects to a collection
     *
     * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won&#39;t be updated when the target changes)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProjectsToTest() throws ApiException {
        List<DeleteProjectsFromCollectionRequestDataInner> data = null;
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        api.addProjectsTo(data, version, orgId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a collection
     *
     * Create a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        CreateCollectionRequestData data = null;
        String version = null;
        UUID orgId = null;
        CollectionCreateNewResponse response = api.createNew(data, version, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit a collection
     *
     * Edit a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editCollectionTest() throws ApiException {
        UpdateCollectionRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        CollectionEditCollectionResponse response = api.editCollection(data, version, orgId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a collection
     *
     * Get a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        CollectionGetByIdResponse response = api.getById(version, orgId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get collections
     *
     * Return a list of organization&#39;s collections with issues counts  and projects count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        String sort = null;
        String direction = null;
        String name = null;
        Boolean isGenerated = null;
        CollectionGetListResponse response = api.getList(version, orgId)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .sort(sort)
                .direction(direction)
                .name(name)
                .isGenerated(isGenerated)
                .execute();
        // TODO: test validations
    }

    /**
     * Get projects from the specified collection
     *
     * Return a list of organization&#39;s projects that are from the specified collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        String sort = null;
        String direction = null;
        List<UUID> targetId = null;
        List<String> show = null;
        List<String> integration = null;
        GetProjectsOfCollectionResponse response = api.getProjects(version, orgId, collectionId)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .sort(sort)
                .direction(direction)
                .targetId(targetId)
                .show(show)
                .integration(integration)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a collection
     *
     * Delete a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        api.removeById(version, orgId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove projects from a collection
     *
     * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProjectsTest() throws ApiException {
        List<DeleteProjectsFromCollectionRequestDataInner> data = null;
        String version = null;
        UUID orgId = null;
        UUID collectionId = null;
        api.removeProjects(data, version, orgId, collectionId)
                .execute();
        // TODO: test validations
    }

}

/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PatchProjectRequest;
import com.konfigthis.client.model.PatchProjectRequestData;
import com.konfigthis.client.model.ProjectsGetByProjectIdResponse;
import com.konfigthis.client.model.ProjectsListForOrgResponse;
import com.konfigthis.client.model.ProjectsUpdateByProjectIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private static ProjectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectsApi(apiClient);
    }

    /**
     * Delete project by project ID.
     *
     * Delete one project in the organization by project ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByProjectIdTest() throws ApiException {
        UUID orgId = null;
        UUID projectId = null;
        String version = null;
        api.deleteByProjectId(orgId, projectId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get project by project ID.
     *
     * Get one project of the organization by project ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByProjectIdTest() throws ApiException {
        UUID orgId = null;
        UUID projectId = null;
        String version = null;
        List<String> expand = null;
        Boolean metaLatestIssueCounts = null;
        Boolean metaLatestDependencyTotal = null;
        ProjectsGetByProjectIdResponse response = api.getByProjectId(orgId, projectId, version)
                .expand(expand)
                .metaLatestIssueCounts(metaLatestIssueCounts)
                .metaLatestDependencyTotal(metaLatestDependencyTotal)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Projects for an Org with the given Org ID.
     *
     * List all Projects for an Org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listForOrgTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        List<UUID> targetId = null;
        String targetReference = null;
        String targetFile = null;
        String targetRuntime = null;
        String metaCount = null;
        List<UUID> ids = null;
        List<String> names = null;
        List<String> namesStartWith = null;
        List<String> origins = null;
        List<String> types = null;
        List<String> expand = null;
        Boolean metaLatestIssueCounts = null;
        Boolean metaLatestDependencyTotal = null;
        OffsetDateTime cliMonitoredBefore = null;
        OffsetDateTime cliMonitoredAfter = null;
        List<String> importingUserPublicId = null;
        List<String> tags = null;
        List<String> businessCriticality = null;
        List<String> environment = null;
        List<String> lifecycle = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        ProjectsListForOrgResponse response = api.listForOrg(orgId, version)
                .targetId(targetId)
                .targetReference(targetReference)
                .targetFile(targetFile)
                .targetRuntime(targetRuntime)
                .metaCount(metaCount)
                .ids(ids)
                .names(names)
                .namesStartWith(namesStartWith)
                .origins(origins)
                .types(types)
                .expand(expand)
                .metaLatestIssueCounts(metaLatestIssueCounts)
                .metaLatestDependencyTotal(metaLatestDependencyTotal)
                .cliMonitoredBefore(cliMonitoredBefore)
                .cliMonitoredAfter(cliMonitoredAfter)
                .importingUserPublicId(importingUserPublicId)
                .tags(tags)
                .businessCriticality(businessCriticality)
                .environment(environment)
                .lifecycle(lifecycle)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates project by project ID.
     *
     * Updates one project of the organization by project ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByProjectIdTest() throws ApiException {
        PatchProjectRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID projectId = null;
        List<String> expand = null;
        ProjectsUpdateByProjectIdResponse response = api.updateByProjectId(data, version, orgId, projectId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

}

/*
 * Snyk API
 * Missing description placeholder
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationRequest;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationRequestData;
import com.konfigthis.client.model.ServiceAccountsCreateForOrganizationResponse;
import com.konfigthis.client.model.ServiceAccountsCreateGroupRequest;
import com.konfigthis.client.model.ServiceAccountsCreateGroupRequestData;
import com.konfigthis.client.model.ServiceAccountsCreateGroupResponse;
import com.konfigthis.client.model.ServiceAccountsGetGroupServiceAccountResponse;
import com.konfigthis.client.model.ServiceAccountsGetOrganizationAccountByIdResponse;
import com.konfigthis.client.model.ServiceAccountsListGroupServiceAccountsResponse;
import com.konfigthis.client.model.ServiceAccountsListOrganizationServiceAccountsResponse;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretRequest;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretRequestData;
import com.konfigthis.client.model.ServiceAccountsManageClientSecretResponse;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdRequest;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdRequestData;
import com.konfigthis.client.model.ServiceAccountsUpdateGroupNameByIdResponse;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameRequest;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameRequestData;
import com.konfigthis.client.model.ServiceAccountsUpdateOrganizationServiceAccountNameResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceAccountsApi
 */
@Disabled
public class ServiceAccountsApiTest {

    private static ServiceAccountsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ServiceAccountsApi(apiClient);
    }

    /**
     * Create a service account for an organization.
     *
     * Create a service account for an organization. The service account can be used to generate access tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createForOrganizationTest() throws ApiException {
        ServiceAccountsCreateForOrganizationRequestData data = null;
        UUID orgId = null;
        String version = null;
        ServiceAccountsCreateForOrganizationResponse response = api.createForOrganization(data, orgId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a service account for a group.
     *
     * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        ServiceAccountsCreateGroupRequestData data = null;
        UUID groupId = null;
        String version = null;
        ServiceAccountsCreateGroupResponse response = api.createGroup(data, groupId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a group service account.
     *
     * Permanently delete a group-level service account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupServiceAccountTest() throws ApiException {
        UUID groupId = null;
        UUID serviceaccountId = null;
        String version = null;
        api.deleteGroupServiceAccount(groupId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a service account in an organization.
     *
     * Delete a service account in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrgServiceAccountTest() throws ApiException {
        UUID orgId = null;
        UUID serviceaccountId = null;
        String version = null;
        api.deleteOrgServiceAccount(orgId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a group service account.
     *
     * Get a group-level service account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupServiceAccountTest() throws ApiException {
        UUID groupId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsGetGroupServiceAccountResponse response = api.getGroupServiceAccount(groupId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an organization service account.
     *
     * Get an organization-level service account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationAccountByIdTest() throws ApiException {
        UUID orgId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsGetOrganizationAccountByIdResponse response = api.getOrganizationAccountById(orgId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of group service accounts.
     *
     * Get all service accounts for a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupServiceAccountsTest() throws ApiException {
        UUID groupId = null;
        String version = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        ServiceAccountsListGroupServiceAccountsResponse response = api.listGroupServiceAccounts(groupId, version)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of organization service accounts.
     *
     * Get all service accounts for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationServiceAccountsTest() throws ApiException {
        UUID orgId = null;
        String version = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        ServiceAccountsListOrganizationServiceAccountsResponse response = api.listOrganizationServiceAccounts(orgId, version)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage a group service account&#39;s client secret.
     *
     * Manage the client secret of a group service account by the service account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manageClientSecretTest() throws ApiException {
        ServiceAccountsManageClientSecretRequestData data = null;
        UUID groupId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsManageClientSecretResponse response = api.manageClientSecret(data, groupId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage an organization service account&#39;s client secret.
     *
     * Manage the client secret of an organization-level service account by the service account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manageClientSecretForOrganizationServiceAccountTest() throws ApiException {
        ServiceAccountsManageClientSecretRequestData data = null;
        UUID orgId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse response = api.manageClientSecretForOrganizationServiceAccount(data, orgId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a group service account.
     *
     * Update the name of a group&#39;s service account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupNameByIdTest() throws ApiException {
        ServiceAccountsUpdateGroupNameByIdRequestData data = null;
        UUID groupId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsUpdateGroupNameByIdResponse response = api.updateGroupNameById(data, groupId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an organization service account.
     *
     * Update the name of an organization-level service account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationServiceAccountNameTest() throws ApiException {
        ServiceAccountsUpdateOrganizationServiceAccountNameRequestData data = null;
        UUID orgId = null;
        UUID serviceaccountId = null;
        String version = null;
        ServiceAccountsUpdateOrganizationServiceAccountNameResponse response = api.updateOrganizationServiceAccountName(data, orgId, serviceaccountId, version)
                .execute();
        // TODO: test validations
    }

}

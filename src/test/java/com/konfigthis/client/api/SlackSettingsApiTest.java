/*
 * Snyk API
 * Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.
 *
 * The version of the OpenAPI document: REST
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.GetProjectSettingsCollection;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProjectSettingsPatchRequest;
import com.konfigthis.client.model.ProjectSettingsPatchRequestData;
import com.konfigthis.client.model.SettingsRequest;
import com.konfigthis.client.model.SettingsRequestData;
import com.konfigthis.client.model.SlackSettingsCreateDefaultNotificationSettingsResponse;
import com.konfigthis.client.model.SlackSettingsGetDefaultNotificationSettingsResponse;
import com.konfigthis.client.model.SlackSettingsProjectOverrideResponse;
import com.konfigthis.client.model.SlackSettingsUpdateNotificationSettingsForProjectResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SlackSettingsApi
 */
@Disabled
public class SlackSettingsApiTest {

    private static SlackSettingsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SlackSettingsApi(apiClient);
    }

    /**
     * Create new Slack notification default settings.
     *
     * Create new Slack notification default settings for a given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDefaultNotificationSettingsTest() throws ApiException {
        SettingsRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID botId = null;
        SlackSettingsCreateDefaultNotificationSettingsResponse response = api.createDefaultNotificationSettings(data, version, orgId, botId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Slack integration default notification settings.
     *
     * Get Slack integration default notification settings for the provided tenant ID and bot ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultNotificationSettingsTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID botId = null;
        SlackSettingsGetDefaultNotificationSettingsResponse response = api.getDefaultNotificationSettings(version, orgId, botId)
                .execute();
        // TODO: test validations
    }

    /**
     * Slack notification settings overrides for projects
     *
     * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOverridesForProjectsTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID botId = null;
        String startingAfter = null;
        String endingBefore = null;
        Integer limit = null;
        GetProjectSettingsCollection response = api.getOverridesForProjects(version, orgId, botId)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new Slack settings override for a given project.
     *
     * Create Slack settings override for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectOverrideTest() throws ApiException {
        SettingsRequestData data = null;
        String version = null;
        UUID orgId = null;
        UUID projectId = null;
        UUID botId = null;
        SlackSettingsProjectOverrideResponse response = api.projectOverride(data, version, orgId, projectId, botId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove the given Slack App integration
     *
     * Remove the given Slack App integration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeIntegrationTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID botId = null;
        api.removeIntegration(version, orgId, botId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Slack settings override for a project.
     *
     * Remove Slack settings override for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProjectOverrideTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID projectId = null;
        UUID botId = null;
        api.removeProjectOverride(version, orgId, projectId, botId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Slack notification settings for a project.
     *
     * Update Slack notification settings for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotificationSettingsForProjectTest() throws ApiException {
        String version = null;
        UUID orgId = null;
        UUID botId = null;
        UUID projectId = null;
        ProjectSettingsPatchRequestData data = null;
        SlackSettingsUpdateNotificationSettingsForProjectResponse response = api.updateNotificationSettingsForProject(version, orgId, botId, projectId)
                .data(data)
                .execute();
        // TODO: test validations
    }

}
